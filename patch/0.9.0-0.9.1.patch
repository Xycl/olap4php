diff --git a/README b/README
index fed48ce..bace4b5 100644
--- a/README
+++ b/README
@@ -18,4 +18,14 @@ Change Log
 ----------
 
 0.9.0: Friday, January 13th, 2012; Patrick Leckey <pat@olap4php.org>
-- Initial public release
\ No newline at end of file
+- Initial public release
+
+0.9.1: Thursday, March 8th, 2012; Patrick Leckey <pat@olap4php.org>
+- Fixed an incompatibility with Microsoft SSAS XML/A Cube Names
+- Fixed inconsistent return types from XMLACell::isNull() and ::getPropertyValue()
+- Fixed XMLAUtil::parseUniqueName to be more compliant with different back-ends
+- Fixed incorrect metadata namespace in XMLACellSet
+- Fixed XMLAMemberUndefined::getCube()
+- Corrected versions in Properties class
+- Added patch folder for IDEA-style upgrade patches
+- Cleaned up some documentation and code style issues (ongoing)
diff --git a/autoload.php b/autoload.php
index 05fd555..5a4f425 100644
--- a/autoload.php
+++ b/autoload.php
@@ -3,109 +3,112 @@
 // @codeCoverageIgnoreStart 
 // this is an autogenerated file - do not edit
 spl_autoload_register(
-    function($class) {
-        static $classes = null;
-        if ($classes === null) {
-            $classes = array(
-                'olap4php\\common\\ienum' => '/common/IEnum.php',
-                'olap4php\\common\\logger' => '/common/Logger.php',
-                'olap4php\\common\\namedlist' => '/common/NamedList.php',
-                'olap4php\\common\\properties' => '/common/Properties.php',
-                'olap4php\\common\\resultset' => '/common/ResultSet.php',
-                'olap4php\\common\\util' => '/common/Util.php',
-                'olap4php\\common\\wildcard' => '/common/Wildcard.php',
-                'olap4php\\metadata\\aggregator' => '/metadata/Aggregator.php',
-                'olap4php\\metadata\\datatype' => '/metadata/DataType.php',
-                'olap4php\\metadata\\dictionary' => '/metadata/Dictionary.php',
-                'olap4php\\metadata\\dimensiontype' => '/metadata/DimensionType.php',
-                'olap4php\\metadata\\icatalog' => '/metadata/ICatalog.php',
-                'olap4php\\metadata\\icube' => '/metadata/ICube.php',
-                'olap4php\\metadata\\idimension' => '/metadata/IDimension.php',
-                'olap4php\\metadata\\ihierarchy' => '/metadata/IHierarchy.php',
-                'olap4php\\metadata\\ilevel' => '/metadata/ILevel.php',
-                'olap4php\\metadata\\imeasure' => '/metadata/IMeasure.php',
-                'olap4php\\metadata\\imember' => '/metadata/IMember.php',
-                'olap4php\\metadata\\imetadataelement' => '/metadata/IMetadataElement.php',
-                'olap4php\\metadata\\inamed' => '/metadata/INamed.php',
-                'olap4php\\metadata\\inamedlist' => '/metadata/INamedList.php',
-                'olap4php\\metadata\\inamedset' => '/metadata/INamedSet.php',
-                'olap4php\\metadata\\iposition' => '/metadata/IType.php',
-                'olap4php\\metadata\\iproperty' => '/metadata/IProperty.php',
-                'olap4php\\metadata\\ischema' => '/metadata/ISchema.php',
-                'olap4php\\metadata\\ixmlaconstant' => '/metadata/IXMLAConstant.php',
-                'olap4php\\metadata\\ixmlaconstantdictionary' => '/metadata/IXMLAConstantDictionary.php',
-                'olap4php\\metadata\\leveltype' => '/metadata/LevelType.php',
-                'olap4php\\metadata\\membertype' => '/metadata/MemberType.php',
-                'olap4php\\metadata\\propertycontenttype' => '/metadata/PropertyContentType.php',
-                'olap4php\\metadata\\propertytype' => '/metadata/PropertyType.php',
-                'olap4php\\metadata\\standardmemberproperty' => '/metadata/StandardMemberProperty.php',
-                'olap4php\\olap\\axis' => '/olap/Axis.php',
-                'olap4php\\olap\\iaxis' => '/olap/IAxis.php',
-                'olap4php\\olap\\icell' => '/olap/ICell.php',
-                'olap4php\\olap\\icellset' => '/olap/ICellSet.php',
-                'olap4php\\olap\\icellsetaxis' => '/olap/ICellSetAxis.php',
-                'olap4php\\olap\\icellsetaxismetadata' => '/olap/ICellSetAxisMetaData.php',
-                'olap4php\\olap\\icellsetmetadata' => '/olap/ICellSetMetaData.php',
-                'olap4php\\olap\\iolapconnection' => '/olap/IOLAPConnection.php',
-                'olap4php\\olap\\iolapdatabasemetadata' => '/olap/IOLAPDatabaseMetaData.php',
-                'olap4php\\olap\\iolapstatement' => '/olap/IOLAPStatement.php',
-                'olap4php\\olap\\iposition' => '/olap/IPosition.php',
-                'olap4php\\olap\\olapexception' => '/olap/OLAPException.php',
-                'olap4php\\olap\\provider\\xmla\\xmlapositionmember' => '/provider/xmla/XMLAPositionMember.php',
-                'olap4php\\provider\\caching\\drivers\\mcache' => '/provider/caching/drivers/MCache.php',
-                'olap4php\\provider\\caching\\ixmlacache' => '/provider/caching/IXMLACache.php',
-                'olap4php\\provider\\xmla\\ixmlamember' => '/provider/xmla/IXMLAMember.php',
-                'olap4php\\provider\\xmla\\metadata\\ixmlametadatahandler' => '/provider/xmla/metadata/IXMLAMetadataHandler.php',
-                'olap4php\\provider\\xmla\\metadata\\ixmlametadatareader' => '/provider/xmla/metadata/IXMLAMetadataReader.php',
-                'olap4php\\provider\\xmla\\metadata\\lazymetadatalist' => '/provider/xmla/metadata/LazyMetadataList.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlacachingmetadatareader' => '/provider/xmla/metadata/XMLACachingMetadataReader.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlacataloghandler' => '/provider/xmla/metadata/XMLACatalogHandler.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlacatalogschemahandler' => '/provider/xmla/metadata/XMLACatalogSchemaHandler.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlacubehandler' => '/provider/xmla/metadata/XMLACubeHandler.php',
-                'olap4php\\provider\\xmla\\metadata\\xmladelegatingmetadatareader' => '/provider/xmla/metadata/XMLADelegatingMetadataReader.php',
-                'olap4php\\provider\\xmla\\metadata\\xmladimensionhandler' => '/provider/xmla/metadata/XMLADimensionHandler.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlahierarchyhandler' => '/provider/xmla/metadata/XMLAHierarchyHandler.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlalevelhandler' => '/provider/xmla/metadata/XMLALevelHandler.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlameasurehandler' => '/provider/xmla/metadata/XMLAMeasureHandler.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlamemberhandler' => '/provider/xmla/metadata/XMLAMemberHandler.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlametadatahandler' => '/provider/xmla/metadata/XMLAMetadataHandler.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlametadatareader' => '/provider/xmla/metadata/XMLAMetadataReader.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlanamedsethandler' => '/provider/xmla/metadata/XMLANamedSetHandler.php',
-                'olap4php\\provider\\xmla\\metadata\\xmlapropertyhandler' => '/provider/xmla/metadata/XMLAPropertyHandler.php',
-                'olap4php\\provider\\xmla\\xmlacatalog' => '/provider/xmla/XMLACatalog.php',
-                'olap4php\\provider\\xmla\\xmlacell' => '/provider/xmla/XMLACell.php',
-                'olap4php\\provider\\xmla\\xmlacellproperty' => '/provider/xmla/XMLACellProperty.php',
-                'olap4php\\provider\\xmla\\xmlacellset' => '/provider/xmla/XMLACellSet.php',
-                'olap4php\\provider\\xmla\\xmlacellsetaxis' => '/provider/xmla/XMLACellSetAxis.php',
-                'olap4php\\provider\\xmla\\xmlacellsetaxismetadata' => '/provider/xmla/XMLACellSetAxisMetaData.php',
-                'olap4php\\provider\\xmla\\xmlacellsetmemberproperty' => '/provider/xmla/XMLACellSetMemberProperty.php',
-                'olap4php\\provider\\xmla\\xmlacellsetmetadata' => '/provider/xmla/XMLACellSetMetaData.php',
-                'olap4php\\provider\\xmla\\xmlaconnection' => '/provider/xmla/XMLAConnection.php',
-                'olap4php\\provider\\xmla\\xmlaconnectioncontext' => '/provider/xmla/XMLAConnectionContext.php',
-                'olap4php\\provider\\xmla\\xmlacube' => '/provider/xmla/XMLACube.php',
-                'olap4php\\provider\\xmla\\xmladatabasemetadata' => '/provider/xmla/XMLADatabaseMetaData.php',
-                'olap4php\\provider\\xmla\\xmladimension' => '/provider/xmla/XMLADimension.php',
-                'olap4php\\provider\\xmla\\xmlaelement' => '/provider/xmla/XMLAElement.php',
-                'olap4php\\provider\\xmla\\xmlahierarchy' => '/provider/xmla/XMLAHierarchy.php',
-                'olap4php\\provider\\xmla\\xmlalevel' => '/provider/xmla/XMLALevel.php',
-                'olap4php\\provider\\xmla\\xmlameasure' => '/provider/xmla/XMLAMeasure.php',
-                'olap4php\\provider\\xmla\\xmlamember' => '/provider/xmla/XMLAMember.php',
-                'olap4php\\provider\\xmla\\xmlamemberundefined' => '/provider/xmla/XMLAMemberUndefined.php',
-                'olap4php\\provider\\xmla\\xmlametadatacolumn' => '/provider/xmla/XMLAMetadataColumn.php',
-                'olap4php\\provider\\xmla\\xmlametadatarequest' => '/provider/xmla/XMLAMetadataRequest.php',
-                'olap4php\\provider\\xmla\\xmlanamedset' => '/provider/xmla/XMLANamedSet.php',
-                'olap4php\\provider\\xmla\\xmlaposition' => '/provider/xmla/XMLAPosition.php',
-                'olap4php\\provider\\xmla\\xmlaproperty' => '/provider/xmla/XMLAProperty.php',
-                'olap4php\\provider\\xmla\\xmlaschema' => '/provider/xmla/XMLASchema.php',
-                'olap4php\\provider\\xmla\\xmlastatement' => '/provider/xmla/XMLAStatement.php',
-                'olap4php\\provider\\xmla\\xmlatreeop' => '/provider/xmla/XMLATreeOp.php',
-                'olap4php\\provider\\xmla\\xmlautil' => '/provider/xmla/XMLAUtil.php'
-            );
-        }
-        $cn = strtolower($class);
-        if (isset($classes[$cn])) {
-            require __DIR__ . $classes[$cn];
-        }
-    }
+   function( $class )
+   {
+      static $classes = null;
+      if ( $classes === null )
+      {
+         $classes = array(
+            'olap4php\\common\\ienum'                                          => '/common/IEnum.php',
+            'olap4php\\common\\logger'                                         => '/common/Logger.php',
+            'olap4php\\common\\namedlist'                                      => '/common/NamedList.php',
+            'olap4php\\common\\properties'                                     => '/common/Properties.php',
+            'olap4php\\common\\resultset'                                      => '/common/ResultSet.php',
+            'olap4php\\common\\util'                                           => '/common/Util.php',
+            'olap4php\\common\\wildcard'                                       => '/common/Wildcard.php',
+            'olap4php\\metadata\\aggregator'                                   => '/metadata/Aggregator.php',
+            'olap4php\\metadata\\datatype'                                     => '/metadata/DataType.php',
+            'olap4php\\metadata\\dictionary'                                   => '/metadata/Dictionary.php',
+            'olap4php\\metadata\\dimensiontype'                                => '/metadata/DimensionType.php',
+            'olap4php\\metadata\\icatalog'                                     => '/metadata/ICatalog.php',
+            'olap4php\\metadata\\icube'                                        => '/metadata/ICube.php',
+            'olap4php\\metadata\\idimension'                                   => '/metadata/IDimension.php',
+            'olap4php\\metadata\\ihierarchy'                                   => '/metadata/IHierarchy.php',
+            'olap4php\\metadata\\ilevel'                                       => '/metadata/ILevel.php',
+            'olap4php\\metadata\\imeasure'                                     => '/metadata/IMeasure.php',
+            'olap4php\\metadata\\imember'                                      => '/metadata/IMember.php',
+            'olap4php\\metadata\\imetadataelement'                             => '/metadata/IMetadataElement.php',
+            'olap4php\\metadata\\inamed'                                       => '/metadata/INamed.php',
+            'olap4php\\metadata\\inamedlist'                                   => '/metadata/INamedList.php',
+            'olap4php\\metadata\\inamedset'                                    => '/metadata/INamedSet.php',
+            'olap4php\\metadata\\iposition'                                    => '/metadata/IType.php',
+            'olap4php\\metadata\\iproperty'                                    => '/metadata/IProperty.php',
+            'olap4php\\metadata\\ischema'                                      => '/metadata/ISchema.php',
+            'olap4php\\metadata\\ixmlaconstant'                                => '/metadata/IXMLAConstant.php',
+            'olap4php\\metadata\\ixmlaconstantdictionary'                      => '/metadata/IXMLAConstantDictionary.php',
+            'olap4php\\metadata\\leveltype'                                    => '/metadata/LevelType.php',
+            'olap4php\\metadata\\membertype'                                   => '/metadata/MemberType.php',
+            'olap4php\\metadata\\propertycontenttype'                          => '/metadata/PropertyContentType.php',
+            'olap4php\\metadata\\propertytype'                                 => '/metadata/PropertyType.php',
+            'olap4php\\metadata\\standardmemberproperty'                       => '/metadata/StandardMemberProperty.php',
+            'olap4php\\olap\\axis'                                             => '/olap/Axis.php',
+            'olap4php\\olap\\iaxis'                                            => '/olap/IAxis.php',
+            'olap4php\\olap\\icell'                                            => '/olap/ICell.php',
+            'olap4php\\olap\\icellset'                                         => '/olap/ICellSet.php',
+            'olap4php\\olap\\icellsetaxis'                                     => '/olap/ICellSetAxis.php',
+            'olap4php\\olap\\icellsetaxismetadata'                             => '/olap/ICellSetAxisMetaData.php',
+            'olap4php\\olap\\icellsetmetadata'                                 => '/olap/ICellSetMetaData.php',
+            'olap4php\\olap\\iolapconnection'                                  => '/olap/IOLAPConnection.php',
+            'olap4php\\olap\\iolapdatabasemetadata'                            => '/olap/IOLAPDatabaseMetaData.php',
+            'olap4php\\olap\\iolapstatement'                                   => '/olap/IOLAPStatement.php',
+            'olap4php\\olap\\iposition'                                        => '/olap/IPosition.php',
+            'olap4php\\olap\\olapexception'                                    => '/olap/OLAPException.php',
+            'olap4php\\olap\\provider\\xmla\\xmlapositionmember'               => '/provider/xmla/XMLAPositionMember.php',
+            'olap4php\\provider\\caching\\drivers\\mcache'                     => '/provider/caching/drivers/MCache.php',
+            'olap4php\\provider\\caching\\ixmlacache'                          => '/provider/caching/IXMLACache.php',
+            'olap4php\\provider\\xmla\\ixmlamember'                            => '/provider/xmla/IXMLAMember.php',
+            'olap4php\\provider\\xmla\\metadata\\ixmlametadatahandler'         => '/provider/xmla/metadata/IXMLAMetadataHandler.php',
+            'olap4php\\provider\\xmla\\metadata\\ixmlametadatareader'          => '/provider/xmla/metadata/IXMLAMetadataReader.php',
+            'olap4php\\provider\\xmla\\metadata\\lazymetadatalist'             => '/provider/xmla/metadata/LazyMetadataList.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlacachingmetadatareader'    => '/provider/xmla/metadata/XMLACachingMetadataReader.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlacataloghandler'           => '/provider/xmla/metadata/XMLACatalogHandler.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlacatalogschemahandler'     => '/provider/xmla/metadata/XMLACatalogSchemaHandler.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlacubehandler'              => '/provider/xmla/metadata/XMLACubeHandler.php',
+            'olap4php\\provider\\xmla\\metadata\\xmladelegatingmetadatareader' => '/provider/xmla/metadata/XMLADelegatingMetadataReader.php',
+            'olap4php\\provider\\xmla\\metadata\\xmladimensionhandler'         => '/provider/xmla/metadata/XMLADimensionHandler.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlahierarchyhandler'         => '/provider/xmla/metadata/XMLAHierarchyHandler.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlalevelhandler'             => '/provider/xmla/metadata/XMLALevelHandler.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlameasurehandler'           => '/provider/xmla/metadata/XMLAMeasureHandler.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlamemberhandler'            => '/provider/xmla/metadata/XMLAMemberHandler.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlametadatahandler'          => '/provider/xmla/metadata/XMLAMetadataHandler.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlametadatareader'           => '/provider/xmla/metadata/XMLAMetadataReader.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlanamedsethandler'          => '/provider/xmla/metadata/XMLANamedSetHandler.php',
+            'olap4php\\provider\\xmla\\metadata\\xmlapropertyhandler'          => '/provider/xmla/metadata/XMLAPropertyHandler.php',
+            'olap4php\\provider\\xmla\\xmlacatalog'                            => '/provider/xmla/XMLACatalog.php',
+            'olap4php\\provider\\xmla\\xmlacell'                               => '/provider/xmla/XMLACell.php',
+            'olap4php\\provider\\xmla\\xmlacellproperty'                       => '/provider/xmla/XMLACellProperty.php',
+            'olap4php\\provider\\xmla\\xmlacellset'                            => '/provider/xmla/XMLACellSet.php',
+            'olap4php\\provider\\xmla\\xmlacellsetaxis'                        => '/provider/xmla/XMLACellSetAxis.php',
+            'olap4php\\provider\\xmla\\xmlacellsetaxismetadata'                => '/provider/xmla/XMLACellSetAxisMetaData.php',
+            'olap4php\\provider\\xmla\\xmlacellsetmemberproperty'              => '/provider/xmla/XMLACellSetMemberProperty.php',
+            'olap4php\\provider\\xmla\\xmlacellsetmetadata'                    => '/provider/xmla/XMLACellSetMetaData.php',
+            'olap4php\\provider\\xmla\\xmlaconnection'                         => '/provider/xmla/XMLAConnection.php',
+            'olap4php\\provider\\xmla\\xmlaconnectioncontext'                  => '/provider/xmla/XMLAConnectionContext.php',
+            'olap4php\\provider\\xmla\\xmlacube'                               => '/provider/xmla/XMLACube.php',
+            'olap4php\\provider\\xmla\\xmladatabasemetadata'                   => '/provider/xmla/XMLADatabaseMetaData.php',
+            'olap4php\\provider\\xmla\\xmladimension'                          => '/provider/xmla/XMLADimension.php',
+            'olap4php\\provider\\xmla\\xmlaelement'                            => '/provider/xmla/XMLAElement.php',
+            'olap4php\\provider\\xmla\\xmlahierarchy'                          => '/provider/xmla/XMLAHierarchy.php',
+            'olap4php\\provider\\xmla\\xmlalevel'                              => '/provider/xmla/XMLALevel.php',
+            'olap4php\\provider\\xmla\\xmlameasure'                            => '/provider/xmla/XMLAMeasure.php',
+            'olap4php\\provider\\xmla\\xmlamember'                             => '/provider/xmla/XMLAMember.php',
+            'olap4php\\provider\\xmla\\xmlamemberundefined'                    => '/provider/xmla/XMLAMemberUndefined.php',
+            'olap4php\\provider\\xmla\\xmlametadatacolumn'                     => '/provider/xmla/XMLAMetadataColumn.php',
+            'olap4php\\provider\\xmla\\xmlametadatarequest'                    => '/provider/xmla/XMLAMetadataRequest.php',
+            'olap4php\\provider\\xmla\\xmlanamedset'                           => '/provider/xmla/XMLANamedSet.php',
+            'olap4php\\provider\\xmla\\xmlaposition'                           => '/provider/xmla/XMLAPosition.php',
+            'olap4php\\provider\\xmla\\xmlaproperty'                           => '/provider/xmla/XMLAProperty.php',
+            'olap4php\\provider\\xmla\\xmlaschema'                             => '/provider/xmla/XMLASchema.php',
+            'olap4php\\provider\\xmla\\xmlastatement'                          => '/provider/xmla/XMLAStatement.php',
+            'olap4php\\provider\\xmla\\xmlatreeop'                             => '/provider/xmla/XMLATreeOp.php',
+            'olap4php\\provider\\xmla\\xmlautil'                               => '/provider/xmla/XMLAUtil.php'
+         );
+      }
+      $cn = strtolower( $class );
+      if ( isset($classes[$cn]) )
+      {
+         require __DIR__ . $classes[$cn];
+      }
+   }
 );
-// @codeCoverageIgnoreEnd
\ No newline at end of file
+// @codeCoverageIgnoreEnd
diff --git a/common/IEnum.php b/common/IEnum.php
index f246563..8e87dbe 100644
--- a/common/IEnum.php
+++ b/common/IEnum.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -34,15 +34,15 @@ interface IEnum
    /**
     * @return Return the name of the enum
     */
-   public function name ( );
+   public function name();
 
    /**
     * @return IEnum Return the specifed enum constant.
     */
-   static public function getEnum ( $constant );
+   static public function getEnum( $constant );
 
    /**
     * @return Return the array of IEnum constants (objects)
     */
-   static public function getEnumConstants ( );
-}
\ No newline at end of file
+   static public function getEnumConstants();
+}
diff --git a/common/Logger.php b/common/Logger.php
index 07ad175..d863fae 100644
--- a/common/Logger.php
+++ b/common/Logger.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -42,33 +42,33 @@ class Logger
    /**
     * Construct a logger
     */
-   public function __construct ( $logger )
+   public function __construct( $logger )
    {
       $this->logger = $logger;
    }
 
-   public function fatal ( $msg, $caller = NULL )
+   public function fatal( $msg, $caller = NULL )
    {
-      $this->logger->fatal ( $msg, $caller );
+      $this->logger->fatal( $msg, $caller );
    }
 
-   public function error ( $msg, $caller = NULL )
+   public function error( $msg, $caller = NULL )
    {
-      $this->logger->error ( $msg, $caller );
+      $this->logger->error( $msg, $caller );
    }
 
-   public function warn ( $msg, $caller = NULL )
+   public function warn( $msg, $caller = NULL )
    {
-      $this->logger->warn ( $msg, $caller );
+      $this->logger->warn( $msg, $caller );
    }
 
-   public function info ( $msg, $caller = NULL )
+   public function info( $msg, $caller = NULL )
    {
-      $this->logger->info ( $msg, $caller );
+      $this->logger->info( $msg, $caller );
    }
 
-   public function debug ( $msg, $caller = NULL )
+   public function debug( $msg, $caller = NULL )
    {
-      $this->logger->debug ( $msg, $caller );
+      $this->logger->debug( $msg, $caller );
    }
-}
\ No newline at end of file
+}
diff --git a/common/NamedList.php b/common/NamedList.php
index 5d2b5e5..da501a6 100644
--- a/common/NamedList.php
+++ b/common/NamedList.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -38,48 +38,54 @@ use \InvalidArgumentException;
  */
 class NamedList extends ArrayObject implements INamedList
 {
-   public function get ( $index )
+   public function get( $index )
    {
-      if ( parent::offsetExists( $index ) ) return parent::offsetGet ( $index );
+      if ( parent::offsetExists( $index ) ) return parent::offsetGet( $index );
 
       // trying to get by index
-      if ( is_string ( $index ) )
+      if ( is_string( $index ) )
       {
-         return parent::offsetExists ( $index ) ? parent::offsetGet ( $index ) : NULL;
+         return parent::offsetExists( $index ) ? parent::offsetGet( $index ) : NULL;
       }
-      else if ( is_numeric ( $index ) )
-      {
-         $index = (int) $index;
-         if ( $index < 0 || $index >= parent::count() ) return NULL;
+      else {
+         if ( is_numeric( $index ) )
+         {
+            $index = (int)$index;
+            if ( $index < 0 || $index >= parent::count() ) return NULL;
 
-         $indexedArray = array_values( parent::getArrayCopy() );
-         return $indexedArray[$index];
-         //return $obj;
+            $indexedArray = array_values( parent::getArrayCopy() );
+            return $indexedArray[$index];
+            //return $obj;
+         }
       }
 
-      throw new InvalidArgumentException ( "Index $index does not exist in NamedList." );
+      throw new InvalidArgumentException ("Index $index does not exist in NamedList.");
    }
 
 
-   public function indexOfName ( $name )
+   public function indexOfName( $name )
    {
       $indexedKeys = array_keys( parent::getArrayCopy() );
-      $key = array_search( $name, $indexedKeys );
+      $key         = array_search( $name, $indexedKeys );
       if ( $key !== FALSE )
+      {
          return $key;
+      }
       else
+      {
          return NULL;
+      }
    }
 
 
-   public function size ( )
+   public function size()
    {
-      return parent::count ( );
+      return parent::count();
    }
 
    public function add( INamed $obj )
    {
-      parent::offsetSet ( $obj->getName ( ), $obj );
+      parent::offsetSet( $obj->getName(), $obj );
    }
 
    /**
@@ -87,11 +93,11 @@ class NamedList extends ArrayObject implements INamedList
     *
     * @param ArrayObject $list
     */
-   public function addAll ( ArrayObject $list )
+   public function addAll( ArrayObject $list )
    {
       foreach ( $list as $key => $value )
       {
          parent::offsetSet( $key, $value );
       }
    }
-}
\ No newline at end of file
+}
diff --git a/common/Properties.php b/common/Properties.php
index c554095..b09aca9 100644
--- a/common/Properties.php
+++ b/common/Properties.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -31,7 +31,7 @@ class Properties
 
    const DRIVER_MAJOR_VERSION = '0';
 
-   const DRIVER_MINOR_VERSION = '1';
+   const DRIVER_MINOR_VERSION = '9';
 
-   const DRIVER_VERSION = '0.1';
-}
\ No newline at end of file
+   const DRIVER_VERSION = '0.9.1';
+}
diff --git a/common/ResultSet.php b/common/ResultSet.php
index 607f66b..41855bd 100644
--- a/common/ResultSet.php
+++ b/common/ResultSet.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -36,18 +36,20 @@ class ResultSet
    /**
     * @var array
     */
-   private $data = array ();
+   private $data = array();
 
    public function __construct( array $headerList, array $rowList )
    {
       foreach ( $rowList as $row )
       {
          if ( !is_array( $row ) )
-            throw new OLAPException( 'ResultSet: a row of $rowList was not an array.' );
+         {
+            throw new OLAPException('ResultSet: a row of $rowList was not an array.');
+         }
 
          foreach ( $headerList as $header )
          {
-            if ( !isset( $this->data[$header] ) ) $this->data[$header] = array();
+            if ( !isset($this->data[$header]) ) $this->data[$header] = array();
 
             $this->data[$header][] = array_shift( $row );
          }
@@ -61,26 +63,26 @@ class ResultSet
 
    public function fetchRowAssoc()
    {
-      $row = array();
+      $row   = array();
       $empty = TRUE;
       foreach ( $this->data as $header => $column )
       {
-         if ( !empty( $column ) )
+         if ( !empty($column) )
          {
-            $empty = FALSE;
-            $row[ $header ] = array_shift( $this->data[ $header ] );
+            $empty        = FALSE;
+            $row[$header] = array_shift( $this->data[$header] );
          }
       }
 
       if ( $empty ) return NULL;
-      
+
       return $row;
    }
 
    public function getColumnAtIndex( $column, $index )
    {
-      if ( !isset( $this->data[$column] ) || !isset( $this->data[$column][$index] ) ) return NULL;
+      if ( !isset($this->data[$column]) || !isset($this->data[$column][$index]) ) return NULL;
 
       return $this->data[$column][$index];
    }
-}
\ No newline at end of file
+}
diff --git a/common/Util.php b/common/Util.php
index e2d529d..f071f5e 100644
--- a/common/Util.php
+++ b/common/Util.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,24 +33,27 @@ class Util
     * ex: '[foo].[bar]' = ['foo', 'bar']
     *
     * @param string $uniqueName
+    *
     * @return array
     */
    public function parseUniqueName( $uniqueName )
    {
       $retval = array();
 
-      $arr = array();
-      $matches = preg_match_all('#([^\[\]\.]*)#', $uniqueName, $arr, PREG_PATTERN_ORDER);
+      $arr     = array();
+      $matches = preg_match_all( '#([^\[\]\.]*)#', $uniqueName, $arr, PREG_PATTERN_ORDER );
 
       if ( $matches > 0 )
       {
          foreach ( $arr[0] as $match )
          {
-            if ( !empty( $match ) && $match != '' )
+            if ( !empty($match) && $match != '' )
+            {
                $retval[] = $match;
+            }
          }
       }
 
       return $retval;
    }
-}
\ No newline at end of file
+}
diff --git a/common/Wildcard.php b/common/Wildcard.php
index e6f4aa2..58de26e 100644
--- a/common/Wildcard.php
+++ b/common/Wildcard.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -26,6 +26,7 @@
 namespace OLAP4PHP\Common;
 
 use OLAP4PHP\OLAP\OLAPException;
+
 /**
  * @brief Holds a Wildcard pattern
  */
@@ -43,18 +44,18 @@ class Wildcard
     */
    public function __construct( $pattern )
    {
-      if ( empty( $pattern ) ) throw new OLAPException( 'Cannot create an empty Wildcard pattern' );
+      if ( empty($pattern) ) throw new OLAPException('Cannot create an empty Wildcard pattern');
 
       $this->pattern = $pattern;
    }
 
    /**
     * @brief Returns the wildcard pattern
-    * 
+    *
     * @return string
     */
    public function getPattern()
    {
       return $this->pattern;
    }
-}
\ No newline at end of file
+}
diff --git a/docblox.xml b/docblox.xml
index 3fb42e1..5023353 100644
--- a/docblox.xml
+++ b/docblox.xml
@@ -1,24 +1,24 @@
 <?xml version="1.0" encoding="UTF-8" ?>
 <docblox>
-   <parser>
-      <target>/tmp/olap4php-docs</target>
-      <markers>
-         <item>todo</item>
-         <item>fixme</item>
-      </markers>
-   </parser>
-   <transformer>
-      <target>/tmp/olap4php-docs</target>
-   </transformer>
-   <files>
-      <directory>.</directory>
-      <ignore>autoload.php</ignore>
-   </files>
-   <logging>
-      <level>warn</level>
-      <paths>
-         <default>/tmp/olap4php-docs/log/olap4php.log</default>
-         <errors>/tmp/olap4php-docs/log/errors.log</errors>
-      </paths>
-   </logging>
-</docblox>
\ No newline at end of file
+    <parser>
+        <target>/tmp/olap4php-docs</target>
+        <markers>
+            <item>todo</item>
+            <item>fixme</item>
+        </markers>
+    </parser>
+    <transformer>
+        <target>/tmp/olap4php-docs</target>
+    </transformer>
+    <files>
+        <directory>.</directory>
+        <ignore>autoload.php</ignore>
+    </files>
+    <logging>
+        <level>warn</level>
+        <paths>
+            <default>/tmp/olap4php-docs/log/olap4php.log</default>
+            <errors>/tmp/olap4php-docs/log/errors.log</errors>
+        </paths>
+    </logging>
+</docblox>
diff --git a/metadata/Aggregator.php b/metadata/Aggregator.php
index d2be2f9..5577115 100644
--- a/metadata/Aggregator.php
+++ b/metadata/Aggregator.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -32,15 +32,15 @@ use OLAP4PHP\Metadata\Dictionary;
 
 class Aggregator implements IEnum
 {
-   const SUM         = 0;
-   const COUNT       = 1;
-   const MIN         = 2;
-   const MAX         = 3;
-   const AVG         = 4;
-   const XVAR        = 5;
-   const STD         = 6;
-   const CALCULATED  = 7;
-   const UNKNOWN     = 8;
+   const SUM        = 0;
+   const COUNT      = 1;
+   const MIN        = 2;
+   const MAX        = 3;
+   const AVG        = 4;
+   const XVAR       = 5;
+   const STD        = 6;
+   const CALCULATED = 7;
+   const UNKNOWN    = 8;
 
    private $name;
    private $xmlaOrdinal;
@@ -53,52 +53,52 @@ class Aggregator implements IEnum
       switch ( $aggregatorType )
       {
          case self::SUM:
-            $this->name = 'SUM';
+            $this->name        = 'SUM';
             $this->xmlaOrdinal = 1;
             break;
 
          case self::COUNT:
-            $this->name = 'COUNT';
+            $this->name        = 'COUNT';
             $this->xmlaOrdinal = 2;
             break;
 
          case self::MIN:
-            $this->name = 'MIN';
+            $this->name        = 'MIN';
             $this->xmlaOrdinal = 3;
             break;
 
          case self::MAX:
-            $this->name = 'MAX';
+            $this->name        = 'MAX';
             $this->xmlaOrdinal = 4;
             break;
 
          case self::AVG:
-            $this->name = 'AVG';
+            $this->name        = 'AVG';
             $this->xmlaOrdinal = 5;
             break;
 
          case self::XVAR:
-            $this->name = 'VAR';
+            $this->name        = 'VAR';
             $this->xmlaOrdinal = 6;
             break;
 
          case self::STD:
-            $this->name = 'STD';
+            $this->name        = 'STD';
             $this->xmlaOrdinal = 7;
             break;
 
          case self::CALCULATED:
-            $this->name = 'CALCULATED';
+            $this->name        = 'CALCULATED';
             $this->xmlaOrdinal = 127;
             break;
 
          case self::UNKNOWN:
-            $this->name = 'UNKNOWN';
+            $this->name        = 'UNKNOWN';
             $this->xmlaOrdinal = 0;
             break;
 
          default:
-            throw new OLAPException( "Aggregator type $aggregatorType not supported." );
+            throw new OLAPException("Aggregator type $aggregatorType not supported.");
       }
    }
 
@@ -107,15 +107,15 @@ class Aggregator implements IEnum
       if ( !self::$constants )
       {
          self::$constants = array(
-             new Aggregator( self::SUM ),
-             new Aggregator( self::COUNT ),
-             new Aggregator( self::MIN ),
-             new Aggregator( self::MAX ),
-             new Aggregator( self::AVG ),
-             new Aggregator( self::XVAR ),
-             new Aggregator( self::STD ),
-             new Aggregator( self::CALCULATED ),
-             new Aggregator( self::UNKNOWN )
+            new Aggregator(self::SUM),
+            new Aggregator(self::COUNT),
+            new Aggregator(self::MIN),
+            new Aggregator(self::MAX),
+            new Aggregator(self::AVG),
+            new Aggregator(self::XVAR),
+            new Aggregator(self::STD),
+            new Aggregator(self::CALCULATED),
+            new Aggregator(self::UNKNOWN)
          );
       }
 
@@ -124,18 +124,22 @@ class Aggregator implements IEnum
 
    public static function getEnum( $constant )
    {
-      if ( !self::$constants ) self::getEnumConstants ( );
+      if ( !self::$constants ) self::getEnumConstants();
 
-      if ( !isset( self::$constants[ $constant ] ) )
-         throw new \InvalidArgumentException ( 'Invalid Aggregator Constant' );
+      if ( !isset(self::$constants[$constant]) )
+      {
+         throw new \InvalidArgumentException ('Invalid Aggregator Constant');
+      }
 
-      return self::$constants[ $constant ];
+      return self::$constants[$constant];
    }
 
    public static function getDictionary()
    {
       if ( !self::$dictionary )
-         self::$dictionary = new Dictionary( $this );
+      {
+         self::$dictionary = new Dictionary($this);
+      }
 
       return self::$dictionary;
    }
@@ -159,4 +163,4 @@ class Aggregator implements IEnum
    {
       return $this->name;
    }
-}
\ No newline at end of file
+}
diff --git a/metadata/DataType.php b/metadata/DataType.php
index 4147605..45ee605 100644
--- a/metadata/DataType.php
+++ b/metadata/DataType.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,34 +33,34 @@ use OLAP4PHP\Common\IEnum;
 class DataType implements IXMLAConstant, IEnum
 {
    // Enumeration constants
-   const INTEGER           = 0;
-   const DOUBLE            = 1;
-   const CURRENCY          = 2;
-   const BOOLEAN           = 3;
-   const VARIANT           = 4;
-   const UNSIGNED_SHORT    = 5;
-   const UNSIGNED_INTEGER  = 6;
-   const LARGE_INTEGER     = 7;
-   const STRING            = 8;
-   const ACCP              = 9;
-   const CHAR              = 10;
-   const CUKY              = 11;
-   const CURR              = 12;
-   const DATS              = 13;
-   const DEC               = 14;
-   const FLTP              = 15;
-   const INT1              = 16;
-   const INT2              = 17;
-   const INT4              = 18;
-   const LCHR              = 19;
-   const NUMC              = 20;
-   const PREC              = 21;
-   const QUAN              = 22;
-   const SSTR              = 23;
-   const STRG              = 24;
-   const TIMS              = 25;
-   const VARC              = 26;
-   const UNIT              = 27;
+   const INTEGER          = 0;
+   const DOUBLE           = 1;
+   const CURRENCY         = 2;
+   const BOOLEAN          = 3;
+   const VARIANT          = 4;
+   const UNSIGNED_SHORT   = 5;
+   const UNSIGNED_INTEGER = 6;
+   const LARGE_INTEGER    = 7;
+   const STRING           = 8;
+   const ACCP             = 9;
+   const CHAR             = 10;
+   const CUKY             = 11;
+   const CURR             = 12;
+   const DATS             = 13;
+   const DEC              = 14;
+   const FLTP             = 15;
+   const INT1             = 16;
+   const INT2             = 17;
+   const INT4             = 18;
+   const LCHR             = 19;
+   const NUMC             = 20;
+   const PREC             = 21;
+   const QUAN             = 22;
+   const SSTR             = 23;
+   const STRG             = 24;
+   const TIMS             = 25;
+   const VARC             = 26;
+   const UNIT             = 27;
 
    // What constant do we rep ?
    private $constant;
@@ -77,7 +77,7 @@ class DataType implements IXMLAConstant, IEnum
     *
     * @param $constant
     */
-   protected function __construct ( $constant )
+   protected function __construct( $constant )
    {
       $this->constant = $constant;
 
@@ -88,325 +88,329 @@ class DataType implements IXMLAConstant, IEnum
           * in Automation and may be used in VARIANT.
           */
          case self::INTEGER:
-            $this->xmlaOrdinal = 3;
+            $this->xmlaOrdinal     = 3;
             $this->dbTypeIndicator = 'DBTYPE_I4';
-            $this->description = 'A four-byte, signed integer: INTEGER';
-            $this->name = 'INTEGER';
+            $this->description     = 'A four-byte, signed integer: INTEGER';
+            $this->name            = 'INTEGER';
             break;
          case self::DOUBLE:
-            $this->xmlaOrdinal = 5;
+            $this->xmlaOrdinal     = 5;
             $this->dbTypeIndicator = 'DBTYPE_R8';
-            $this->description = 'A double-precision floating-point value: Double';
-            $this->name = 'DOUBLE';
+            $this->description     = 'A double-precision floating-point value: Double';
+            $this->name            = 'DOUBLE';
             break;
          case self::CURRENCY:
-            $this->xmlaOrdinal = 6;
+            $this->xmlaOrdinal     = 6;
             $this->dbTypeIndicator = 'DBTYPE_CY';
-            $this->description = 'A currency value: LARGE_INTEGER, Currency is a fixed-point number with '.
-                                 'four digits to the right of the decimal point. It is stored in an '.
-                                 'eight-byte signed integer, scaled by 10,000.';
-            $this->name = 'CURRENCY';
+            $this->description     = 'A currency value: LARGE_INTEGER, Currency is a fixed-point number with ' .
+               'four digits to the right of the decimal point. It is stored in an ' .
+               'eight-byte signed integer, scaled by 10,000.';
+            $this->name            = 'CURRENCY';
             break;
          case self::BOOLEAN:
-            $this->xmlaOrdinal = 11;
+            $this->xmlaOrdinal     = 11;
             $this->dbTypeIndicator = 'DBTYPE_BOOL';
-            $this->description = 'A Boolean value stored in the same way as in Automation: VARIANT_BOOL; '.
-                                 '0 means false and ~0 (bitwise, the value is not 0; that is, all bits '.
-                                 'are set to 1) means true.';
-            $this->name = 'BOOLEAN';
+            $this->description     = 'A Boolean value stored in the same way as in Automation: VARIANT_BOOL; ' .
+               '0 means false and ~0 (bitwise, the value is not 0; that is, all bits ' .
+               'are set to 1) means true.';
+            $this->name            = 'BOOLEAN';
             break;
          /**
           * Used by SQL Server for value.
           */
          case self::VARIANT:
-            $this->xmlaOrdinal = 12;
+            $this->xmlaOrdinal     = 12;
             $this->dbTypeIndicator = 'DBTYPE_VARIANT';
-            $this->description = 'An Automation VARIANT';
-            $this->name = 'VARIANT';
+            $this->description     = 'An Automation VARIANT';
+            $this->name            = 'VARIANT';
             break;
          /**
           * Used by SQL Server for font size.
           */
          case self::UNSIGNED_SHORT:
-            $this->xmlaOrdinal = 18;
+            $this->xmlaOrdinal     = 18;
             $this->dbTypeIndicator = 'DBTYPE_UI2';
-            $this->description = 'A two-byte, unsigned integer';
-            $this->name = 'UNSIGNED_SHORT';
+            $this->description     = 'A two-byte, unsigned integer';
+            $this->name            = 'UNSIGNED_SHORT';
             break;
          /**
           * Used by SQL Server for colors, font flags and cell ordinal.
           */
          case self::UNSIGNED_INTEGER:
-            $this->xmlaOrdinal = 19;
+            $this->xmlaOrdinal     = 19;
             $this->dbTypeIndicator = 'DBTYPE_UI4';
-            $this->description = 'A four-byte, unsigned integer';
-            $this->name = 'UNSIGNED_INTEGER';
+            $this->description     = 'A four-byte, unsigned integer';
+            $this->name            = 'UNSIGNED_INTEGER';
             break;
          /*
           * The following values exactly match VARENUM
           * in Automation but cannot be used in VARIANT.
           */
          case self::LARGE_INTEGER:
-            $this->xmlaOrdinal = 20;
+            $this->xmlaOrdinal     = 20;
             $this->dbTypeIndicator = 'DBTYPE_I8';
-            $this->description = 'An eight-byte, signed integer: LARGE_INTEGER';
-            $this->name = 'LARGE_INTEGER';
+            $this->description     = 'An eight-byte, signed integer: LARGE_INTEGER';
+            $this->name            = 'LARGE_INTEGER';
             break;
          /*
           * The following values are not in VARENUM in OLE.
           */
          case self::STRING:
-            $this->xmlaOrdinal = 130;
+            $this->xmlaOrdinal     = 130;
             $this->dbTypeIndicator = 'DBTYPE_WSTR';
-            $this->description = 'A null-terminated Unicode character string: wchar_t[length]; If '.
-                                 'DBTYPE_WSTR is used by itself, the number of bytes allocated '.
-                                 'for the string, including the null-termination character, is '.
-                                 'specified by cbMaxLen in the DBBINDING structure. If '.
-                                 'DBTYPE_WSTR is combined with DBTYPE_BYREF, the number of bytes '.
-                                 'allocated for the string, including the null-termination character, '.
-                                 'is at least the length of the string plus two. In either case, the '.
-                                 'actual length of the string is determined from the bound length '.
-                                 'value. The maximum length of the string is the number of allocated '.
-                                 'bytes divided by sizeof(wchar_t) and truncated to the nearest '.
-                                 'integer.';
-            $this->name = 'STRING';
+            $this->description     = 'A null-terminated Unicode character string: wchar_t[length]; If ' .
+               'DBTYPE_WSTR is used by itself, the number of bytes allocated ' .
+               'for the string, including the null-termination character, is ' .
+               'specified by cbMaxLen in the DBBINDING structure. If ' .
+               'DBTYPE_WSTR is combined with DBTYPE_BYREF, the number of bytes ' .
+               'allocated for the string, including the null-termination character, ' .
+               'is at least the length of the string plus two. In either case, the ' .
+               'actual length of the string is determined from the bound length ' .
+               'value. The maximum length of the string is the number of allocated ' .
+               'bytes divided by sizeof(wchar_t) and truncated to the nearest ' .
+               'integer.';
+            $this->name            = 'STRING';
             break;
          /**
           * Used by SAP BW. Represents a Character
           */
          case self::ACCP:
-            $this->xmlaOrdinal = 1000;
+            $this->xmlaOrdinal     = 1000;
             $this->dbTypeIndicator = 'ACCP';
-            $this->description = 'SAP BW Character';
-            $this->name = 'ACCP';
+            $this->description     = 'SAP BW Character';
+            $this->name            = 'ACCP';
             break;
          /**
           * Used by SAP BW. Represents a CHAR
           */
          case self::CHAR:
-            $this->xmlaOrdinal = 1001;
+            $this->xmlaOrdinal     = 1001;
             $this->dbTypeIndicator = 'CHAR';
-            $this->description = 'SAP BW CHAR';
-            $this->name = 'CHAR';
+            $this->description     = 'SAP BW CHAR';
+            $this->name            = 'CHAR';
             break;
          /**
           * Used by SAP BW. Represents a CHAR
           */
          case self::CUKY:
-            $this->xmlaOrdinal = 1002;
+            $this->xmlaOrdinal     = 1002;
             $this->dbTypeIndicator = 'CUKY';
-            $this->description = 'SAP BW CHAR';
-            $this->name = 'CUKY';
+            $this->description     = 'SAP BW CHAR';
+            $this->name            = 'CUKY';
             break;
          /**
           * Used by SAP BW. Represents a Currency - Packed decimal, Integer
           */
          case self::CURR:
-            $this->xmlaOrdinal = 1003;
+            $this->xmlaOrdinal     = 1003;
             $this->dbTypeIndicator = 'CURR';
-            $this->description = 'SAP BW Currency - Packed decimal, Integer';
-            $this->name = 'CURR';
+            $this->description     = 'SAP BW Currency - Packed decimal, Integer';
+            $this->name            = 'CURR';
             break;
          /**
           * Used by SAP BW. Represents a Date
           */
          case self::DATS:
-            $this->xmlaOrdinal = 1004;
+            $this->xmlaOrdinal     = 1004;
             $this->dbTypeIndicator = 'DATS';
-            $this->description = 'SAP BW Date';
-            $this->name = 'DATS';
+            $this->description     = 'SAP BW Date';
+            $this->name            = 'DATS';
             break;
          /**
           * Used by SAP BW. Represents a Decimal
           */
          case self::DEC:
-            $this->xmlaOrdinal = 1005;
+            $this->xmlaOrdinal     = 1005;
             $this->dbTypeIndicator = 'DEC';
-            $this->description = 'SAP BW Decimal';
-            $this->name = 'DEC';
+            $this->description     = 'SAP BW Decimal';
+            $this->name            = 'DEC';
             break;
          /**
           * Used by SAP BW. Represents a Point
           */
          case self::FLTP:
-            $this->xmlaOrdinal = 1006;
+            $this->xmlaOrdinal     = 1006;
             $this->dbTypeIndicator = 'FLTP';
-            $this->description = 'SAP BW Floating Point';
-            $this->name = 'FLTP';
+            $this->description     = 'SAP BW Floating Point';
+            $this->name            = 'FLTP';
             break;
          /**
           * Used by SAP BW. Represents a Byte
           */
          case self::INT1:
-            $this->xmlaOrdinal = 1007;
+            $this->xmlaOrdinal     = 1007;
             $this->dbTypeIndicator = 'INT1';
-            $this->description = 'SAP BW Byte';
-            $this->name = 'INT1';
+            $this->description     = 'SAP BW Byte';
+            $this->name            = 'INT1';
             break;
          /**
           * Used by SAP BW. Represents a Small integer
           */
          case self::INT2:
-            $this->xmlaOrdinal = 1008;
+            $this->xmlaOrdinal     = 1008;
             $this->dbTypeIndicator = 'INT2';
-            $this->description = 'SAP BW Small integer';
-            $this->name = 'INT2';
+            $this->description     = 'SAP BW Small integer';
+            $this->name            = 'INT2';
             break;
          /**
           * Used by SAP BW. Represents an Integer
           */
          case self::INT4:
-            $this->xmlaOrdinal = 1009;
+            $this->xmlaOrdinal     = 1009;
             $this->dbTypeIndicator = 'INT4';
-            $this->description = 'SAP BW Integer';
-            $this->name = 'INT4';
+            $this->description     = 'SAP BW Integer';
+            $this->name            = 'INT4';
             break;
          /**
           * Used by SAP BW. Represents a Text
           */
          case self::LCHR:
-            $this->xmlaOrdinal = 1010;
+            $this->xmlaOrdinal     = 1010;
             $this->dbTypeIndicator = 'LCHR';
-            $this->description = 'SAP BW Text';
-            $this->name = 'LCHR';
+            $this->description     = 'SAP BW Text';
+            $this->name            = 'LCHR';
             break;
          /**
           * Used by SAP BW. Represents a Numeric
           */
          case self::NUMC:
-            $this->xmlaOrdinal = 1011;
+            $this->xmlaOrdinal     = 1011;
             $this->dbTypeIndicator = 'NUMC';
-            $this->description = 'SAP BW Numeric';
-            $this->name = 'NUMC';
+            $this->description     = 'SAP BW Numeric';
+            $this->name            = 'NUMC';
             break;
          /**
           * Used by SAP BW. Represents a Tiny Int
           */
          case self::PREC:
-            $this->xmlaOrdinal = 1012;
+            $this->xmlaOrdinal     = 1012;
             $this->dbTypeIndicator = 'PREC';
-            $this->description = 'SAP BW Tiny Int';
-            $this->name = 'PREC';
+            $this->description     = 'SAP BW Tiny Int';
+            $this->name            = 'PREC';
             break;
          /**
           * Used by SAP BW. Represents a QUAN Integer
           */
          case self::QUAN:
-            $this->xmlaOrdinal = 1013;
+            $this->xmlaOrdinal     = 1013;
             $this->dbTypeIndicator = 'QUAN';
-            $this->description = 'SAP BW QUAN Integer';
-            $this->name = 'QUAN';
+            $this->description     = 'SAP BW QUAN Integer';
+            $this->name            = 'QUAN';
             break;
          /**
           * Used by SAP BW. Represents a String
           */
          case self::SSTR:
-            $this->xmlaOrdinal = 1014;
+            $this->xmlaOrdinal     = 1014;
             $this->dbTypeIndicator = 'SSTR';
-            $this->description = 'SAP BW String';
-            $this->name = 'SSTR';
+            $this->description     = 'SAP BW String';
+            $this->name            = 'SSTR';
             break;
          /**
           * Used by SAP BW. Represents a Long String
           */
          case self::STRG:
-            $this->xmlaOrdinal = 1015;
+            $this->xmlaOrdinal     = 1015;
             $this->dbTypeIndicator = 'STRG';
-            $this->description = 'SAP BW Long String';
-            $this->name = 'STRG';
+            $this->description     = 'SAP BW Long String';
+            $this->name            = 'STRG';
             break;
          /**
           * Used by SAP BW. Represents a Time
           */
          case self::TIMS:
-            $this->xmlaOrdinal = 1016;
+            $this->xmlaOrdinal     = 1016;
             $this->dbTypeIndicator = 'TIMS';
-            $this->description = 'SAP BW Time';
-            $this->name = 'TIMS';
+            $this->description     = 'SAP BW Time';
+            $this->name            = 'TIMS';
             break;
          /**
           * Used by SAP BW. Represents a Varchar
           */
          case self::VARC:
-            $this->xmlaOrdinal = 1017;
+            $this->xmlaOrdinal     = 1017;
             $this->dbTypeIndicator = 'VARC';
-            $this->description = 'SAP BW Varchar';
-            $this->name = 'VARC';
+            $this->description     = 'SAP BW Varchar';
+            $this->name            = 'VARC';
             break;
          /**
           * Used by SAP BW. Represents a Long String for Units
           */
          case self::UNIT:
-            $this->xmlaOrdinal = 1018;
+            $this->xmlaOrdinal     = 1018;
             $this->dbTypeIndicator = 'UNIT';
-            $this->description = 'SAP BW Long String for Units';
-            $this->name = 'UNIT';
+            $this->description     = 'SAP BW Long String for Units';
+            $this->name            = 'UNIT';
             break;
          default:
-            throw new InvalidArgumentException ( 'Unsupported data type' );
+            throw new InvalidArgumentException ('Unsupported data type');
       }
    }
 
-   static public function getEnum ( $constant )
+   static public function getEnum( $constant )
    {
       if ( !self::$constants )
-         self::getEnumConstants ( );
+      {
+         self::getEnumConstants();
+      }
 
-      if ( ! isset ( self::$constants [ $constant ] ) )
-         throw new \InvalidArgumentException ( 'Invalid constant.' );
+      if ( !isset (self::$constants [$constant]) )
+      {
+         throw new \InvalidArgumentException ('Invalid constant.');
+      }
 
-      return self::$constants [ $constant ];
+      return self::$constants [$constant];
    }
 
    /**
     * return array Return the datatype enumeration constants
     */
-   static public function getEnumConstants ( )
+   static public function getEnumConstants()
    {
       if ( !self::$constants )
       {
          // array of enums constants
-         self::$constants = array (
-            new DataType ( self::INTEGER ),
-            new DataType ( self::DOUBLE ),
-            new DataType ( self::CURRENCY ),
-            new DataType ( self::BOOLEAN ),
-            new DataType ( self::VARIANT ),
-            new DataType ( self::UNSIGNED_SHORT ),
-            new DataType ( self::UNSIGNED_INTEGER ),
-            new DataType ( self::LARGE_INTEGER ),
-            new DataType ( self::STRING ),
-            new DataType ( self::ACCP ),
-            new DataType ( self::CHAR ),
-            new DataType ( self::CUKY ),
-            new DataType ( self::CURR ),
-            new DataType ( self::DATS ),
-            new DataType ( self::DEC ),
-            new DataType ( self::FLTP ),
-            new DataType ( self::INT1 ),
-            new DataType ( self::INT2 ),
-            new DataType ( self::INT4 ),
-            new DataType ( self::LCHR ),
-            new DataType ( self::NUMC ),
-            new DataType ( self::PREC ),
-            new DataType ( self::QUAN ),
-            new DataType ( self::SSTR ),
-            new DataType ( self::STRG ),
-            new DataType ( self::TIMS ),
-            new DataType ( self::VARC ),
-            new DataType ( self::UNIT )
+         self::$constants = array(
+            new DataType (self::INTEGER),
+            new DataType (self::DOUBLE),
+            new DataType (self::CURRENCY),
+            new DataType (self::BOOLEAN),
+            new DataType (self::VARIANT),
+            new DataType (self::UNSIGNED_SHORT),
+            new DataType (self::UNSIGNED_INTEGER),
+            new DataType (self::LARGE_INTEGER),
+            new DataType (self::STRING),
+            new DataType (self::ACCP),
+            new DataType (self::CHAR),
+            new DataType (self::CUKY),
+            new DataType (self::CURR),
+            new DataType (self::DATS),
+            new DataType (self::DEC),
+            new DataType (self::FLTP),
+            new DataType (self::INT1),
+            new DataType (self::INT2),
+            new DataType (self::INT4),
+            new DataType (self::LCHR),
+            new DataType (self::NUMC),
+            new DataType (self::PREC),
+            new DataType (self::QUAN),
+            new DataType (self::SSTR),
+            new DataType (self::STRG),
+            new DataType (self::TIMS),
+            new DataType (self::VARC),
+            new DataType (self::UNIT)
          );
       }
 
       return self::$constants;
    }
 
-   public function name ( )
+   public function name()
    {
       return $this->name;
    }
 
-   public function xmlaName ( )
+   public function xmlaName()
    {
       return $this->dbTypeIndicator;
    }
@@ -414,7 +418,7 @@ class DataType implements IXMLAConstant, IEnum
    /**
     * Human readable description of a Datatype instance.
     */
-   public function getDescription ( )
+   public function getDescription()
    {
       return $this->description;
    }
@@ -422,7 +426,7 @@ class DataType implements IXMLAConstant, IEnum
    /**
     * Unique identifier of a Datatype instance.
     */
-   public function xmlaOrdinal ( )
+   public function xmlaOrdinal()
    {
       return $this->xmlaOrdinal;
    }
@@ -430,11 +434,13 @@ class DataType implements IXMLAConstant, IEnum
    /**
     * @return Dictionary of all values
     */
-   static public function getDictionary ( )
+   static public function getDictionary()
    {
       if ( !self::$dictionary )
-         self::$dictionary = new Dictionary ( 'OLAP4PHP\Metadata\DataType' );
+      {
+         self::$dictionary = new Dictionary ('OLAP4PHP\Metadata\DataType');
+      }
 
       return self::$dictionary;
    }
-}
\ No newline at end of file
+}
diff --git a/metadata/Dictionary.php b/metadata/Dictionary.php
index 1415732..8889f15 100644
--- a/metadata/Dictionary.php
+++ b/metadata/Dictionary.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -32,91 +32,93 @@ namespace OLAP4PHP\Metadata;
 class Dictionary implements IXMLAConstantDictionary
 {
    private $class;
-   private $mapByName = array ( );
-   private $mapByOrdinal = array ( );
+   private $mapByName = array();
+   private $mapByOrdinal = array();
    private $constants;
 
    // Static dictionary map by class
-   private static $mapByClass = array ( );
+   private static $mapByClass = array();
 
-   public function __construct ( $class )
+   public function __construct( $class )
    {
       $this->class = $class;
-      $this->init ( );
+      $this->init();
    }
 
-   private function init ( )
+   private function init()
    {
       if ( $this->constants != null )
+      {
          return;
+      }
 
-      $classname = $this->class;
-      $this->constants = $classname::getEnumConstants ( );
+      $classname       = $this->class;
+      $this->constants = $classname::getEnumConstants();
       foreach ( $this->constants as $constant )
       {
-         $this->mapByName [ $constant->xmlaName ( ) ] = $constant;
-         $this->mapByOrdinal [ $constant->xmlaOrdinal ( ) ] = $constant;
+         $this->mapByName [$constant->xmlaName()]       = $constant;
+         $this->mapByOrdinal [$constant->xmlaOrdinal()] = $constant;
       }
    }
 
-   public static function forClass ( $class )
+   public static function forClass( $class )
    {
-      assert ( $class != null );
-      $dictionary = !isset ( self::$mapByClass [ $class ] ) ? null : self::$mapByClass [ $class ];
+      assert( $class != null );
+      $dictionary = !isset (self::$mapByClass [$class]) ? null : self::$mapByClass [$class];
       if ( $dictionary == null )
       {
-         $dictionary = new Dictionary ( $class );
-         self::$mapByClass [ $class ] = $dictionary;
+         $dictionary                = new Dictionary ($class);
+         self::$mapByClass [$class] = $dictionary;
       }
 
       return $dictionary;
    }
 
-    public function forOrdinal ( $xmlaOrdinal )
-    {
-       //init();
-       return isset ( $this->mapByOrdinal [ $xmlaOrdinal ] ) ? $this->mapByOrdinal [ $xmlaOrdinal ] : null;
-    }
+   public function forOrdinal( $xmlaOrdinal )
+   {
+      //init();
+      return isset ($this->mapByOrdinal [$xmlaOrdinal]) ? $this->mapByOrdinal [$xmlaOrdinal] : null;
+   }
 
-    public function forName ( $xmlaName )
-    {
-       //$this->init();
-       return isset ( $this->mapByName [ $xmlaName ] ) ? $this->mapByName [ $xmlaName ] : null;
-    }
+   public function forName( $xmlaName )
+   {
+      //$this->init();
+      return isset ($this->mapByName [$xmlaName]) ? $this->mapByName [$xmlaName] : null;
+   }
 
-    public function forMask ( $xmlaOrdinalMask )
-    {
-        //$this->init();
-        $set = array ( );
-        foreach ( $this->constants as $constant )
-        {
-           if ( ($xmlaOrdinalMask & $constant->xmlaOrdinal ( ) ) != 0 )
-           {
-              $set [] = $constant;
-           }
-        }
-        return $set;
-    }
+   public function forMask( $xmlaOrdinalMask )
+   {
+      //$this->init();
+      $set = array();
+      foreach ( $this->constants as $constant )
+      {
+         if ( ($xmlaOrdinalMask & $constant->xmlaOrdinal()) != 0 )
+         {
+            $set [] = $constant;
+         }
+      }
+      return $set;
+   }
 
-    public function toMask ( array $set )
-    {
-        $mask = 0;
-        foreach ( $set as $enum )
-        {
-            $mask |= $enum->xmlaOrdinal();
-        }
+   public function toMask( array $set )
+   {
+      $mask = 0;
+      foreach ( $set as $enum )
+      {
+         $mask |= $enum->xmlaOrdinal();
+      }
 
-        return $mask;
-    }
+      return $mask;
+   }
 
-    public function getValues ( )
-    {
-       //$this->init();
-       return $this->constants;
-    }
+   public function getValues()
+   {
+      //$this->init();
+      return $this->constants;
+   }
 
-    public function getEnumClass ( )
-    {
-       return $this->class;
-    }
-}
\ No newline at end of file
+   public function getEnumClass()
+   {
+      return $this->class;
+   }
+}
diff --git a/metadata/DimensionType.php b/metadata/DimensionType.php
index d614ac6..3311363 100644
--- a/metadata/DimensionType.php
+++ b/metadata/DimensionType.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -58,108 +58,112 @@ class DimensionType implements IXMLAConstant
 
    protected function __construct( $dimensionType )
    {
-      switch( $dimensionType )
+      switch ( $dimensionType )
       {
          case self::UNKNOWN:
             $this->xmlaOrdinal = self::UNKNOWN;
-            $this->xmlaName = 'UNKNOWN';
+            $this->xmlaName    = 'UNKNOWN';
             break;
 
          case self::TIME:
             $this->xmlaOrdinal = self::TIME;
-            $this->xmlaName = 'TIME';
+            $this->xmlaName    = 'TIME';
             break;
 
          case self::MEASURE:
             $this->xmlaOrdinal = self::MEASURE;
-            $this->xmlaName = 'MEASURE';
+            $this->xmlaName    = 'MEASURE';
             break;
 
          case self::OTHER:
             $this->xmlaOrdinal = self::OTHER;
-            $this->xmlaName = 'OTHER';
+            $this->xmlaName    = 'OTHER';
             break;
 
          case self::QUANTITATIVE:
             $this->xmlaOrdinal = self::QUANTITATIVE;
-            $this->xmlaName = 'QUANTITATIVE';
+            $this->xmlaName    = 'QUANTITATIVE';
             break;
 
          case self::ACCOUNTS:
             $this->xmlaOrdinal = self::ACCOUNTS;
-            $this->xmlaName = 'ACCOUNTS';
+            $this->xmlaName    = 'ACCOUNTS';
             break;
 
          case self::CUSTOMERS:
             $this->xmlaOrdinal = self::CUSTOMERS;
-            $this->xmlaName = 'CUSTOMERS';
+            $this->xmlaName    = 'CUSTOMERS';
             break;
 
          case self::PRODUCTS:
             $this->xmlaOrdinal = self::PRODUCTS;
-            $this->xmlaName = 'PRODUCTS';
+            $this->xmlaName    = 'PRODUCTS';
             break;
 
          case self::SCENARIO:
             $this->xmlaOrdinal = self::SCENARIO;
-            $this->xmlaName = 'SCENARIO';
+            $this->xmlaName    = 'SCENARIO';
             break;
 
          case self::UTILITY:
             $this->xmlaOrdinal = self::UTILITY;
-            $this->xmlaName = 'UTILITY';
+            $this->xmlaName    = 'UTILITY';
             break;
 
          case self::CURRENCY:
             $this->xmlaOrdinal = self::CURRENCY;
-            $this->xmlaName = 'CURRENCY';
+            $this->xmlaName    = 'CURRENCY';
             break;
 
          case self::RATES:
             $this->xmlaOrdinal = self::RATES;
-            $this->xmlaName = 'RATES';
+            $this->xmlaName    = 'RATES';
             break;
 
          case self::CHANNEL:
             $this->xmlaOrdinal = self::CHANNEL;
-            $this->xmlaName = 'CHANNEL';
+            $this->xmlaName    = 'CHANNEL';
             break;
 
          case self::PROMOTION:
             $this->xmlaOrdinal = self::PROMOTION;
-            $this->xmlaName = 'PROMOTION';
+            $this->xmlaName    = 'PROMOTION';
             break;
 
          case self::ORGANIZATION:
             $this->xmlaOrdinal = self::ORGANIZATION;
-            $this->xmlaName = 'ORGANIZATION';
+            $this->xmlaName    = 'ORGANIZATION';
             break;
 
          case self::BILL_OF_MATERIALS:
             $this->xmlaOrdinal = self::BILL_OF_MATERIALS;
-            $this->xmlaName = 'BILL_OF_MATERIALS';
+            $this->xmlaName    = 'BILL_OF_MATERIALS';
             break;
 
          case self::GEOGRAPHY:
             $this->xmlaOrdinal = self::GEOGRAPHY;
-            $this->xmlaName = 'GEOGRAPHY';
+            $this->xmlaName    = 'GEOGRAPHY';
             break;
 
          default:
-            throw new OLAPException( 'DimensionType ' . $dimensionType . ' not supported.' );
+            throw new OLAPException('DimensionType ' . $dimensionType . ' not supported.');
       }
    }
 
 
-   static public function getEnum ( $constant )
+   static public function getEnum( $constant )
    {
       if ( !self::$constants )
-         self::getEnumConstants ( );
+      {
+         self::getEnumConstants();
+      }
 
-      if ( ! isset ( self::$constants [ $constant ] ) )
-         throw new \InvalidArgumentException ( 'Invalid constant.' );
+      if ( !isset (self::$constants [$constant]) )
+      {
+         throw new \InvalidArgumentException ('Invalid constant.');
+      }
 
-      return self::$constants [ $constant ];
+      return self::$constants [$constant];
    }
 
 
@@ -171,24 +175,24 @@ class DimensionType implements IXMLAConstant
    {
       if ( !self::$constants )
       {
-         self::$constants = array (
-            self::UNKNOWN           => new DimensionType ( self::UNKNOWN ),
-            self::TIME              => new DimensionType ( self::TIME ),
-            self::MEASURE           => new DimensionType ( self::MEASURE ),
-            self::OTHER             => new DimensionType ( self::OTHER ),
-            self::QUANTITATIVE      => new DimensionType ( self::QUANTITATIVE ),
-            self::ACCOUNTS          => new DimensionType ( self::ACCOUNTS ),
-            self::CUSTOMERS         => new DimensionType ( self::CUSTOMERS ),
-            self::PRODUCTS          => new DimensionType ( self::PRODUCTS ),
-            self::SCENARIO          => new DimensionType ( self::SCENARIO ),
-            self::UTILITY           => new DimensionType ( self::UTILITY ),
-            self::CURRENCY          => new DimensionType ( self::CURRENCY ),
-            self::RATES             => new DimensionType ( self::RATES ),
-            self::CHANNEL           => new DimensionType ( self::CHANNEL ),
-            self::PROMOTION         => new DimensionType ( self::PROMOTION ),
-            self::ORGANIZATION      => new DimensionType ( self::ORGANIZATION ),
-            self::BILL_OF_MATERIALS => new DimensionType ( self::BILL_OF_MATERIALS ),
-            self::GEOGRAPHY         => new DimensionType ( self::GEOGRAPHY )
+         self::$constants = array(
+            self::UNKNOWN           => new DimensionType (self::UNKNOWN),
+            self::TIME              => new DimensionType (self::TIME),
+            self::MEASURE           => new DimensionType (self::MEASURE),
+            self::OTHER             => new DimensionType (self::OTHER),
+            self::QUANTITATIVE      => new DimensionType (self::QUANTITATIVE),
+            self::ACCOUNTS          => new DimensionType (self::ACCOUNTS),
+            self::CUSTOMERS         => new DimensionType (self::CUSTOMERS),
+            self::PRODUCTS          => new DimensionType (self::PRODUCTS),
+            self::SCENARIO          => new DimensionType (self::SCENARIO),
+            self::UTILITY           => new DimensionType (self::UTILITY),
+            self::CURRENCY          => new DimensionType (self::CURRENCY),
+            self::RATES             => new DimensionType (self::RATES),
+            self::CHANNEL           => new DimensionType (self::CHANNEL),
+            self::PROMOTION         => new DimensionType (self::PROMOTION),
+            self::ORGANIZATION      => new DimensionType (self::ORGANIZATION),
+            self::BILL_OF_MATERIALS => new DimensionType (self::BILL_OF_MATERIALS),
+            self::GEOGRAPHY         => new DimensionType (self::GEOGRAPHY)
          );
       }
 
@@ -225,7 +229,7 @@ class DimensionType implements IXMLAConstant
    /**
     * @brief Return the value of the enum constant.
     */
-   public function getConstant ( )
+   public function getConstant()
    {
       return $this->xmlaOrdinal;
    }
@@ -238,8 +242,8 @@ class DimensionType implements IXMLAConstant
    {
       if ( !self::$dictionary )
       {
-         self::$dictionary = new Dictionary ( 'OLAP4PHP\Metadata\DimensionType' );
+         self::$dictionary = new Dictionary ('OLAP4PHP\Metadata\DimensionType');
       }
       return self::$dictionary;
    }
-}
\ No newline at end of file
+}
diff --git a/metadata/ICatalog.php b/metadata/ICatalog.php
index dc799a5..372b5b9 100644
--- a/metadata/ICatalog.php
+++ b/metadata/ICatalog.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -26,6 +26,7 @@
 namespace OLAP4PHP\MetaData;
 
 use OLAP4PHP\Metadata\INamed;
+
 /**
  *
  */
@@ -34,12 +35,12 @@ interface ICatalog extends INamed
    /**
     * @return IOLAPDatabaseMetaData
     */
-   public function getMetaData ( );
+   public function getMetaData();
 
 
    /**
     * @return array ISchema
     */
-   public function getSchemas ( );
+   public function getSchemas();
 
-}
\ No newline at end of file
+}
diff --git a/metadata/ICube.php b/metadata/ICube.php
index abbebcb..3340c71 100644
--- a/metadata/ICube.php
+++ b/metadata/ICube.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -35,41 +35,41 @@ interface ICube
    /**
     * @return array IDimension
     */
-   public function getDimensions ( );
+   public function getDimensions();
 
 
    /**
     * @return array IHierarchy
     */
-   public function getHierarchies ( );
+   public function getHierarchies();
 
 
    /**
     * @return array IMeasure
     */
-   public function getMeasures ( );
+   public function getMeasures();
 
 
    /**
     * @return array ISchema
     */
-   public function getSchema ( );
+   public function getSchema();
 
 
    /**
     * @return array INamedSet
     */
-   public function getSets ( );
+   public function getSets();
 
 
    /**
     * @return array IMember
     */
-   public function lookupMember ( array $namedParts );
+   public function lookupMember( array $namedParts );
 
 
    /**
     * @return array IMember
     */
-   public function lookupMembers ( array $treeOps, array $nameParts );
-}
\ No newline at end of file
+   public function lookupMembers( array $treeOps, array $nameParts );
+}
diff --git a/metadata/IDimension.php b/metadata/IDimension.php
index 739d7c8..f0a38b0 100644
--- a/metadata/IDimension.php
+++ b/metadata/IDimension.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,18 +33,18 @@ interface IDimension extends IMetadataElement
    /**
     * @return array Member
     */
-   public function getDefaultHierarchy ( );
+   public function getDefaultHierarchy();
 
 
    /**
     * @return int
     */
-   public function getDimensionType ( );
+   public function getDimensionType();
 
 
    /**
     * @return array Hierarchy
     */
-   public function getHierarchies ( );
+   public function getHierarchies();
 
-}
\ No newline at end of file
+}
diff --git a/metadata/IHierarchy.php b/metadata/IHierarchy.php
index 4cbc261..1b04a19 100644
--- a/metadata/IHierarchy.php
+++ b/metadata/IHierarchy.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,30 +33,30 @@ interface IHierarchy extends IMetadataElement
    /**
     * @return Member
     */
-   public function getDefaultMember ( );
+   public function getDefaultMember();
 
 
    /**
     * @return Dimension
     */
-   public function getDimension ( );
+   public function getDimension();
 
 
    /**
     * @return array Level
     */
-   public function getLevels ( );
+   public function getLevels();
 
 
    /**
     * @return array Member
     */
-   public function getRootMembers ( );
+   public function getRootMembers();
 
 
    /**
     * @return boolean
     */
-   public function hasAll ( );
+   public function hasAll();
 
-}
\ No newline at end of file
+}
diff --git a/metadata/ILevel.php b/metadata/ILevel.php
index 566d585..9a66500 100644
--- a/metadata/ILevel.php
+++ b/metadata/ILevel.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,36 +33,36 @@ interface ILevel extends IMetadataElement
    /**
     * @return int
     */
-   public function getCardinality ( );
+   public function getCardinality();
 
    /**
     * @return int
     */
-   public function getDepth ( );
+   public function getDepth();
 
    /**
     * @return IDimension
     */
-   public function getDimension ( );
+   public function getDimension();
 
    /**
     * @return IHierarchy
     */
-   public function getHierarchy ( );
+   public function getHierarchy();
 
    /**
     * @return array IMember
     */
-   public function getMembers ( );
+   public function getMembers();
 
    /**
     * @return array name => IProperty
     */
-   public function getProperties ( );
+   public function getProperties();
 
    /**
     * @return boolean
     */
-   public function isCalculated ( );
+   public function isCalculated();
 
-}
\ No newline at end of file
+}
diff --git a/metadata/IMeasure.php b/metadata/IMeasure.php
index e353425..f0211ac 100644
--- a/metadata/IMeasure.php
+++ b/metadata/IMeasure.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -35,21 +35,21 @@ interface IMeasure extends IMember
     *
     * @return Aggregator
     */
-   public function getAggregator ( );
+   public function getAggregator();
 
    /**
-   * Returns the data type of this Measure.
-   *
-   * @return data type
-   */
-   public function getDatatype ( );
+    * Returns the data type of this Measure.
+    *
+    * @return data type
+    */
+   public function getDatatype();
 
    /**
-   * Returns whether this Measure is visible.
-   *
-   * @return whether this Measure is visible
-   */
-   public function isVisible ( );
+    * Returns whether this Measure is visible.
+    *
+    * @return whether this Measure is visible
+    */
+   public function isVisible();
 
 }
 
diff --git a/metadata/IMember.php b/metadata/IMember.php
index afa4948..20b59a5 100644
--- a/metadata/IMember.php
+++ b/metadata/IMember.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,73 +33,73 @@ interface IMember extends IMetadataElement
    /**
     * @return array IMember
     */
-   public function getAncestorMembers ( );
+   public function getAncestorMembers();
 
 
    /**
     * @return int
     */
-   public function getChildMemberCount ( );
+   public function getChildMemberCount();
 
 
    /**
     * @return array IMember
     */
-   public function getChildMembers ( );
+   public function getChildMembers();
 
 
    /**
     * @return IMember
     */
-   public function getDataMember ( );
+   public function getDataMember();
 
 
    /**
     * @return int
     */
-   public function getDepth ( );
+   public function getDepth();
 
 
    /**
     * @return IDimension
     */
-   public function getDimension ( );
+   public function getDimension();
 
 
    /**
     * @return IHierarchy
     */
-   public function getHierarchy ( );
+   public function getHierarchy();
 
 
    /**
     * @return ILevel
     */
-   public function getLevel ( );
+   public function getLevel();
 
 
    /**
     * @return IType
     */
-   public function getMemberType ( );
+   public function getMemberType();
 
 
    /**
     * @return int
     */
-   public function getOrdinal ( );
+   public function getOrdinal();
 
 
    /**
     * @return IMember
     */
-   public function getParentMember ( );
+   public function getParentMember();
 
 
    /**
     * @return boolean
     */
-   public function isHidden ( );
+   public function isHidden();
 
 }
 
diff --git a/metadata/IMetadataElement.php b/metadata/IMetadataElement.php
index 7f1e5d6..45e97be 100644
--- a/metadata/IMetadataElement.php
+++ b/metadata/IMetadataElement.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -35,18 +35,18 @@ interface IMetadataElement
    /**
     * @return string
     */
-   public function getCaption ( );
+   public function getCaption();
 
 
    /**
     * @return string
     */
-   public function getDescription ( );
+   public function getDescription();
 
 
    /**
     * @return string
     */
-   public function getUniqueName ( );
+   public function getUniqueName();
 
-}
\ No newline at end of file
+}
diff --git a/metadata/INamed.php b/metadata/INamed.php
index 3a0245d..ffe5c9a 100644
--- a/metadata/INamed.php
+++ b/metadata/INamed.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -29,8 +29,8 @@ interface INamed
 {
    /**
     * @brief Gets the name of the element
-    * 
+    *
     * @return string
     */
    public function getName();
-}
\ No newline at end of file
+}
diff --git a/metadata/INamedList.php b/metadata/INamedList.php
index f13d670..b0a32da 100644
--- a/metadata/INamedList.php
+++ b/metadata/INamedList.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -40,7 +40,7 @@ interface INamedList
     * @return the element of the list with the specified name, or null if
     * there is no such element
     */
-   public function get ( $index );
+   public function get( $index );
 
 
    /**
@@ -53,17 +53,17 @@ interface INamedList
     * if there is no such element
     *
     */
-   public function indexOfName ( $name );
+   public function indexOfName( $name );
 
 
    /**
     * @return integer Return the list size
     */
-   public function size ( );
+   public function size();
 
    /**
     * @brief Adds a new item to the list
     */
    public function add( INamed $obj );
 
-}
\ No newline at end of file
+}
diff --git a/metadata/INamedSet.php b/metadata/INamedSet.php
index a999829..e0d733c 100644
--- a/metadata/INamedSet.php
+++ b/metadata/INamedSet.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -34,6 +34,6 @@ interface INamedSet extends IMetadataElement
     *
     * @return ICube  Cube this named set belongs to
     */
-   public function getCube ( );
-   
-}
\ No newline at end of file
+   public function getCube();
+
+}
diff --git a/metadata/IProperty.php b/metadata/IProperty.php
index a661324..1a1202a 100644
--- a/metadata/IProperty.php
+++ b/metadata/IProperty.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -34,10 +34,10 @@ interface IProperty extends IMetadataElement
    /**
     * @return ContentType
     */
-   public function getContentType ( );
+   public function getContentType();
 
    /**
     * @return DataType
     */
-   public function getDataType ( );
-}
\ No newline at end of file
+   public function getDataType();
+}
diff --git a/metadata/ISchema.php b/metadata/ISchema.php
index 2972a39..3c5568d 100644
--- a/metadata/ISchema.php
+++ b/metadata/ISchema.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -35,24 +35,24 @@ interface ISchema extends INamed
    /**
     * @return ICatalog
     */
-   public function getCatalog ( );
+   public function getCatalog();
 
 
    /**
     * @return array ICube
     */
-   public function getCubes ( );
+   public function getCubes();
 
 
    /**
     * @return array IDimension
     */
-   public function getSharedDimensions ( );
+   public function getSharedDimensions();
 
 
    /**
     * @return array ???
     */
-   public function getSupportedLocales ( );
+   public function getSupportedLocales();
 
-}
\ No newline at end of file
+}
diff --git a/metadata/IType.php b/metadata/IType.php
index 9bb1349..d954cb9 100644
--- a/metadata/IType.php
+++ b/metadata/IType.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,12 +33,12 @@ interface IPosition
    /**
     * @return array Member
     */
-   public function getMembers ( );
+   public function getMembers();
 
 
    /**
     * @return int
     */
-   public function getOrdinal ( );
+   public function getOrdinal();
 
-}
\ No newline at end of file
+}
diff --git a/metadata/IXMLAConstant.php b/metadata/IXMLAConstant.php
index 1cd27d0..84246de 100644
--- a/metadata/IXMLAConstant.php
+++ b/metadata/IXMLAConstant.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -31,35 +31,35 @@ namespace OLAP4PHP\Metadata;
 interface IXMLAConstant
 {
    /**
-     * Returns the name of this constant as specified by XMLA.
-     *
-     * <p>Often the name is an enumeration-specific prefix plus the name of
-     * the Java enum constant. For example,
-     * {@link org.olap4j.metadata.Dimension.Type} has
-     * prefix "MD_DIMTYPE_", and therefore this method returns
-     * "MD_DIMTYPE_PRODUCTS" for the enum constant
-     * {@link org.olap4j.metadata.Dimension.Type#PRODUCTS}.
-     *
-     * @return string
-     */
-    public function xmlaName ();
+    * Returns the name of this constant as specified by XMLA.
+    *
+    * <p>Often the name is an enumeration-specific prefix plus the name of
+    * the Java enum constant. For example,
+    * {@link org.olap4j.metadata.Dimension.Type} has
+    * prefix "MD_DIMTYPE_", and therefore this method returns
+    * "MD_DIMTYPE_PRODUCTS" for the enum constant
+    * {@link org.olap4j.metadata.Dimension.Type#PRODUCTS}.
+    *
+    * @return string
+    */
+   public function xmlaName();
 
-    /**
-     * Returns the description of this constant.
-     *
-     * @return string Description of this constant.
-     */
-    public function getDescription ();
+   /**
+    * Returns the description of this constant.
+    *
+    * @return string Description of this constant.
+    */
+   public function getDescription();
 
-    /**
-     * Returns the code of this constant as specified by XMLA.
-     *
-     * <p>For example, the XMLA specification says that the ordinal of
-     * MD_DIMTYPE_PRODUCTS is 8, and therefore this method returns 8
-     * for {@link org.olap4j.metadata.Dimension.Type#PRODUCTS}.
-     *
-     * @return integer ordinal code as specified by XMLA.
-     */
-    public function xmlaOrdinal();
+   /**
+    * Returns the code of this constant as specified by XMLA.
+    *
+    * <p>For example, the XMLA specification says that the ordinal of
+    * MD_DIMTYPE_PRODUCTS is 8, and therefore this method returns 8
+    * for {@link org.olap4j.metadata.Dimension.Type#PRODUCTS}.
+    *
+    * @return integer ordinal code as specified by XMLA.
+    */
+   public function xmlaOrdinal();
 
-}
\ No newline at end of file
+}
diff --git a/metadata/IXMLAConstantDictionary.php b/metadata/IXMLAConstantDictionary.php
index 558c774..c25c4ba 100644
--- a/metadata/IXMLAConstantDictionary.php
+++ b/metadata/IXMLAConstantDictionary.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -35,35 +35,39 @@ interface IXMLAConstantDictionary
     * specification, or null if there is no such.
     *
     * @param integer $xmlaOrdinal XMLA ordinal
+    *
     * @return Enumeration value
     */
-   public function forOrdinal ( $xmlaOrdinal );
+   public function forOrdinal( $xmlaOrdinal );
 
    /**
     * Returns the enumeration value with the given name in the XMLA
     * specification, or null if there is no such.
     *
     * @param string $xmlaName XMLA name
+    *
     * @return Enumeration value
     */
-   public function forName ( $xmlaName );
+   public function forName( $xmlaName );
 
    /**
     * Creates a set of values by parsing a mask.
     *
     * @param integer $xmlaOrdinalMask Bit mask
+    *
     * @return array Set of E values
     */
-   public function forMask ( $xmlaOrdinalMask );
+   public function forMask( $xmlaOrdinalMask );
 
    /**
     * Converts a set of enum values to an integer by logical OR-ing their
     * codes.
     *
     * @param array $set Set of enum values
+    *
     * @return integer Bitmap representing set of enum values
     */
-   public function toMask ( array $set );
+   public function toMask( array $set );
 
    /**
     * Returns all values of the enum.
@@ -74,13 +78,13 @@ interface IXMLAConstantDictionary
     *
     * @return array List of enum values
     */
-   public function getValues ( );
+   public function getValues();
 
    /**
     * Returns the class that the enum values belong to.
     *
-    * @return object 
+    * @return object
     */
-   public function getEnumClass ( );
+   public function getEnumClass();
 
-}
\ No newline at end of file
+}
diff --git a/metadata/LevelType.php b/metadata/LevelType.php
index 68a8344..f7c73e4 100644
--- a/metadata/LevelType.php
+++ b/metadata/LevelType.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -31,45 +31,45 @@ namespace OLAP4PHP\Metadata;
 class LevelType implements IXMLAConstant
 {
    // Enumeration constants
-   const REGULAR                 = 'REGULAR';
-   const ALL                     = 'ALL';
-   const NULL                    = 'NULL';
-   const TIME_YEARS              = 'TIME_YEARS';
-   const TIME_HALF_YEAR          = 'TIME_HALF_YEAR';
-   const TIME_QUARTERS           = 'TIME_QUARTERS';
-   const TIME_MONTHS             = 'TIME_MONTHS';
-   const TIME_WEEKS              = 'TIME_WEEKS';
-   const TIME_DAYS               = 'TIME_DAYS';
-   const TIME_HOURS              = 'TIME_HOURS';
-   const TIME_MINUTES            = 'TIME_MINUTES';
-   const TIME_SECONDS            = 'TIME_SECONDS';
-   const TIME_UNDEFINED          = 'TIME_UNDEFINED';
-   const GEO_CONTINENT           = 'GEO_CONTINENT';
-   const GEO_REGION              = 'GEO_REGION';
-   const GEO_COUNTRY             = 'GEO_COUNTRY';
-   const GEO_STATE_OR_PROVINCE   = 'GEO_STATE_OR_PROVINCE';
-   const GEO_COUNTY              = 'GEO_COUNTY';
-   const GEO_CITY                = 'GEO_CITY';
-   const GEO_POSTALCODE          = 'GEO_POSTALCODE';
-   const GEO_POINT               = 'GEO_POINT';
-   const ORG_UNIT                = 'ORG_UNIT';
-   const BOM_RESOURCE            = 'BOM_RESOURCE';
-   const QUANTITATIVE            = 'QUANTITATIVE';
-   const ACCOUNT                 = 'ACCOUNT';
-   const CUSTOMER                = 'CUSTOMER';
-   const CUSTOMER_GROUP          = 'CUSTOMER_GROUP';
-   const CUSTOMER_HOUSEHOLD      = 'CUSTOMER_HOUSEHOLD';
-   const PRODUCT                 = 'PRODUCT';
-   const PRODUCT_GROUP           = 'PRODUCT_GROUP';
-   const SCENARIO                = 'SCENARIO';
-   const UTILITY                 = 'UTILITY';
-   const PERSON                  = 'PERSON';
-   const COMPANY                 = 'COMPANY';
-   const CURRENCY_SOURCE         = 'CURRENCY_SOURCE';
-   const CURRENCY_DESTINATION    = 'CURRENCY_DESTINATION';
-   const CHANNEL                 = 'CHANNEL';
-   const REPRESENTATIVE          = 'REPRESENTATIVE';
-   const PROMOTION               = 'PROMOTION';
+   const REGULAR               = 'REGULAR';
+   const ALL                   = 'ALL';
+   const NULL                  = 'NULL';
+   const TIME_YEARS            = 'TIME_YEARS';
+   const TIME_HALF_YEAR        = 'TIME_HALF_YEAR';
+   const TIME_QUARTERS         = 'TIME_QUARTERS';
+   const TIME_MONTHS           = 'TIME_MONTHS';
+   const TIME_WEEKS            = 'TIME_WEEKS';
+   const TIME_DAYS             = 'TIME_DAYS';
+   const TIME_HOURS            = 'TIME_HOURS';
+   const TIME_MINUTES          = 'TIME_MINUTES';
+   const TIME_SECONDS          = 'TIME_SECONDS';
+   const TIME_UNDEFINED        = 'TIME_UNDEFINED';
+   const GEO_CONTINENT         = 'GEO_CONTINENT';
+   const GEO_REGION            = 'GEO_REGION';
+   const GEO_COUNTRY           = 'GEO_COUNTRY';
+   const GEO_STATE_OR_PROVINCE = 'GEO_STATE_OR_PROVINCE';
+   const GEO_COUNTY            = 'GEO_COUNTY';
+   const GEO_CITY              = 'GEO_CITY';
+   const GEO_POSTALCODE        = 'GEO_POSTALCODE';
+   const GEO_POINT             = 'GEO_POINT';
+   const ORG_UNIT              = 'ORG_UNIT';
+   const BOM_RESOURCE          = 'BOM_RESOURCE';
+   const QUANTITATIVE          = 'QUANTITATIVE';
+   const ACCOUNT               = 'ACCOUNT';
+   const CUSTOMER              = 'CUSTOMER';
+   const CUSTOMER_GROUP        = 'CUSTOMER_GROUP';
+   const CUSTOMER_HOUSEHOLD    = 'CUSTOMER_HOUSEHOLD';
+   const PRODUCT               = 'PRODUCT';
+   const PRODUCT_GROUP         = 'PRODUCT_GROUP';
+   const SCENARIO              = 'SCENARIO';
+   const UTILITY               = 'UTILITY';
+   const PERSON                = 'PERSON';
+   const COMPANY               = 'COMPANY';
+   const CURRENCY_SOURCE       = 'CURRENCY_SOURCE';
+   const CURRENCY_DESTINATION  = 'CURRENCY_DESTINATION';
+   const CHANNEL               = 'CHANNEL';
+   const REPRESENTATIVE        = 'REPRESENTATIVE';
+   const PROMOTION             = 'PROMOTION';
 
    // What constant do we rep ?
    private $constant;
@@ -81,272 +81,272 @@ class LevelType implements IXMLAConstant
    /**
     * Constructor
     */
-   private function __construct ( $constant )
+   private function __construct( $constant )
    {
       $this->constant = $constant;
 
       switch ( $constant )
       {
          /**
-         * Indicates that the level is not related to time.
-         */
-        case self::REGULAR:
-           $this->xmlaOrdinal = 0x0000;
-           break;
+          * Indicates that the level is not related to time.
+          */
+         case self::REGULAR:
+            $this->xmlaOrdinal = 0x0000;
+            break;
 
-        /**
-         * Indicates that the level contains the 'all' member of its hierarchy.
-         */
-        case self::ALL:
-           $this->xmlaOrdinal = 0x0001;
-           break;
-        /**
-         * Indicates that a level holds the null member. Does not correspond to
-         * an XMLA or OLE DB value.
-         */
-        case self::NULL:
-           $this->xmlaOrdinal = -1;
-           break;
+         /**
+          * Indicates that the level contains the 'all' member of its hierarchy.
+          */
+         case self::ALL:
+            $this->xmlaOrdinal = 0x0001;
+            break;
+         /**
+          * Indicates that a level holds the null member. Does not correspond to
+          * an XMLA or OLE DB value.
+          */
+         case self::NULL:
+            $this->xmlaOrdinal = -1;
+            break;
 
-        /**
-         * Indicates that a level refers to years.
-         * It must be used in a dimension whose type is
-         * {@link org.olap4j.metadata.Dimension.Type#TIME}.
-         */
-        case self::TIME_YEARS:
-           $this->xmlaOrdinal = 0x0014;
-           break;
+         /**
+          * Indicates that a level refers to years.
+          * It must be used in a dimension whose type is
+          * {@link org.olap4j.metadata.Dimension.Type#TIME}.
+          */
+         case self::TIME_YEARS:
+            $this->xmlaOrdinal = 0x0014;
+            break;
 
-        /**
-         * Indicates that a level refers to half years.
-         * It must be used in a dimension whose type is
-         * {@link org.olap4j.metadata.Dimension.Type#TIME}.
-         */
-        case self::TIME_HALF_YEAR:
-           $this->xmlaOrdinal = 0x0024;
-           break;
+         /**
+          * Indicates that a level refers to half years.
+          * It must be used in a dimension whose type is
+          * {@link org.olap4j.metadata.Dimension.Type#TIME}.
+          */
+         case self::TIME_HALF_YEAR:
+            $this->xmlaOrdinal = 0x0024;
+            break;
 
-        /**
-         * Indicates that a level refers to quarters.
-         * It must be used in a dimension whose type is
-         * {@link org.olap4j.metadata.Dimension.Type#TIME}.
-         */
-        case self::TIME_QUARTERS:
-           $this->xmlaOrdinal = 0x0044;
-           break;
+         /**
+          * Indicates that a level refers to quarters.
+          * It must be used in a dimension whose type is
+          * {@link org.olap4j.metadata.Dimension.Type#TIME}.
+          */
+         case self::TIME_QUARTERS:
+            $this->xmlaOrdinal = 0x0044;
+            break;
 
-        /**
-         * Indicates that a level refers to months.
-         * It must be used in a dimension whose type is
-         * {@link org.olap4j.metadata.Dimension.Type#TIME}.
-         */
-        case self::TIME_MONTHS:
-           $this->xmlaOrdinal = 0x0084;
-           break;
+         /**
+          * Indicates that a level refers to months.
+          * It must be used in a dimension whose type is
+          * {@link org.olap4j.metadata.Dimension.Type#TIME}.
+          */
+         case self::TIME_MONTHS:
+            $this->xmlaOrdinal = 0x0084;
+            break;
 
-        /**
-         * Indicates that a level refers to weeks.
-         * It must be used in a dimension whose type is
-         * {@link org.olap4j.metadata.Dimension.Type#TIME}.
-         */
-        case self::TIME_WEEKS:
-           $this->xmlaOrdinal = 0x0104;
-           break;
+         /**
+          * Indicates that a level refers to weeks.
+          * It must be used in a dimension whose type is
+          * {@link org.olap4j.metadata.Dimension.Type#TIME}.
+          */
+         case self::TIME_WEEKS:
+            $this->xmlaOrdinal = 0x0104;
+            break;
 
-        /**
-         * Indicates that a level refers to days.
-         * It must be used in a dimension whose type is
-         * {@link org.olap4j.metadata.Dimension.Type#TIME}.
-         */
-        case self::TIME_DAYS:
-           $this->xmlaOrdinal = 0x0204;
-           break;
+         /**
+          * Indicates that a level refers to days.
+          * It must be used in a dimension whose type is
+          * {@link org.olap4j.metadata.Dimension.Type#TIME}.
+          */
+         case self::TIME_DAYS:
+            $this->xmlaOrdinal = 0x0204;
+            break;
 
-        /**
-         * Indicates that a level refers to hours.
-         * It must be used in a dimension whose type is
-         * {@link org.olap4j.metadata.Dimension.Type#TIME}.
-         */
-        case self::TIME_HOURS:
-           $this->xmlaOrdinal = 0x0304;
-           break;
+         /**
+          * Indicates that a level refers to hours.
+          * It must be used in a dimension whose type is
+          * {@link org.olap4j.metadata.Dimension.Type#TIME}.
+          */
+         case self::TIME_HOURS:
+            $this->xmlaOrdinal = 0x0304;
+            break;
 
-        /**
-         * Indicates that a level refers to minutes.
-         * It must be used in a dimension whose type is
-         * {@link org.olap4j.metadata.Dimension.Type#TIME}.
-         */
-        case self::TIME_MINUTES:
-           $this->xmlaOrdinal = 0x0404;
-           break;
+         /**
+          * Indicates that a level refers to minutes.
+          * It must be used in a dimension whose type is
+          * {@link org.olap4j.metadata.Dimension.Type#TIME}.
+          */
+         case self::TIME_MINUTES:
+            $this->xmlaOrdinal = 0x0404;
+            break;
 
-        /**
-         * Indicates that a level refers to seconds.
-         * It must be used in a dimension whose type is
-         * {@link org.olap4j.metadata.Dimension.Type#TIME}.
-         */
-        case self::TIME_SECONDS:
-           $this->xmlaOrdinal = 0x0804;
-           break;
+         /**
+          * Indicates that a level refers to seconds.
+          * It must be used in a dimension whose type is
+          * {@link org.olap4j.metadata.Dimension.Type#TIME}.
+          */
+         case self::TIME_SECONDS:
+            $this->xmlaOrdinal = 0x0804;
+            break;
 
-        /**
-         * Indicates that a level refers to days.
-         * It must be used in a dimension whose type is
-         * {@link org.olap4j.metadata.Dimension.Type#TIME}.
-         */
-        case self::TIME_UNDEFINED:
-           $this->xmlaOrdinal = 0x1004;
-           break;
+         /**
+          * Indicates that a level refers to days.
+          * It must be used in a dimension whose type is
+          * {@link org.olap4j.metadata.Dimension.Type#TIME}.
+          */
+         case self::TIME_UNDEFINED:
+            $this->xmlaOrdinal = 0x1004;
+            break;
 
-        case self::GEO_CONTINENT:
-           $this->xmlaOrdinal = 0x2001;
-           break;
+         case self::GEO_CONTINENT:
+            $this->xmlaOrdinal = 0x2001;
+            break;
 
-        case self::GEO_REGION:
-           $this->xmlaOrdinal = 0x2002;
-           break;
+         case self::GEO_REGION:
+            $this->xmlaOrdinal = 0x2002;
+            break;
 
-        case self::GEO_COUNTRY:
-           $this->xmlaOrdinal = 0x2003;
-           break;
-        case self::GEO_STATE_OR_PROVINCE:
-           $this->xmlaOrdinal = 0x2004;
-           break;
-        case self::GEO_COUNTY:
-           $this->xmlaOrdinal = 0x2005;
-           break;
-        case self::GEO_CITY:
-           $this->xmlaOrdinal = 0x2006;
-           break;
-        case self::GEO_POSTALCODE:
-           $this->xmlaOrdinal = 0x2007;
-           break;
-        case self::GEO_POINT:
-           $this->xmlaOrdinal = 0x2008;
-           break;
-        case self::ORG_UNIT:
-           $this->xmlaOrdinal = 0x1011;
-           break;
-        case self::BOM_RESOURCE:
-           $this->xmlaOrdinal = 0x1012;
-           break;
-        case self::QUANTITATIVE:
-           $this->xmlaOrdinal = 0x1013;
-           break;
-        case self::ACCOUNT:
-           $this->xmlaOrdinal = 0x1014;
-           break;
-        case self::CUSTOMER:
-           $this->xmlaOrdinal = 0x1021;
-           break;
-        case self::CUSTOMER_GROUP:
-           $this->xmlaOrdinal = 0x1022;
-           break;
-        case self::CUSTOMER_HOUSEHOLD:
-           $this->xmlaOrdinal = 0x1023;
-           break;
-        case self::PRODUCT:
-           $this->xmlaOrdinal = 0x1031;
-           break;
-        case self::PRODUCT_GROUP:
-           $this->xmlaOrdinal = 0x1032;
-           break;
-        case self::SCENARIO:
-           $this->xmlaOrdinal = 0x1015;
-           break;
-        case self::UTILITY:
-           $this->xmlaOrdinal = 0x1016;
-           break;
-        case self::PERSON:
-           $this->xmlaOrdinal = 0x1041;
-           break;
-        case self::COMPANY:
-           $this->xmlaOrdinal = 0x1042;
-           break;
-        case self::CURRENCY_SOURCE:
-           $this->xmlaOrdinal = 0x1051;
-           break;
-        case self::CURRENCY_DESTINATION:
-           $this->xmlaOrdinal = 0x1052;
-           break;
-        case self::CHANNEL:
-           $this->xmlaOrdinal = 0x1061;
-           break;
-        case self::REPRESENTATIVE:
-           $this->xmlaOrdinal = 0x1062;
-           break;
-        case self::PROMOTION:
-           $this->xmlaOrdinal = 0x1071;
-           break;
-        default:
-           throw new InvalidArgumentException ( 'Unsupported level type' );
+         case self::GEO_COUNTRY:
+            $this->xmlaOrdinal = 0x2003;
+            break;
+         case self::GEO_STATE_OR_PROVINCE:
+            $this->xmlaOrdinal = 0x2004;
+            break;
+         case self::GEO_COUNTY:
+            $this->xmlaOrdinal = 0x2005;
+            break;
+         case self::GEO_CITY:
+            $this->xmlaOrdinal = 0x2006;
+            break;
+         case self::GEO_POSTALCODE:
+            $this->xmlaOrdinal = 0x2007;
+            break;
+         case self::GEO_POINT:
+            $this->xmlaOrdinal = 0x2008;
+            break;
+         case self::ORG_UNIT:
+            $this->xmlaOrdinal = 0x1011;
+            break;
+         case self::BOM_RESOURCE:
+            $this->xmlaOrdinal = 0x1012;
+            break;
+         case self::QUANTITATIVE:
+            $this->xmlaOrdinal = 0x1013;
+            break;
+         case self::ACCOUNT:
+            $this->xmlaOrdinal = 0x1014;
+            break;
+         case self::CUSTOMER:
+            $this->xmlaOrdinal = 0x1021;
+            break;
+         case self::CUSTOMER_GROUP:
+            $this->xmlaOrdinal = 0x1022;
+            break;
+         case self::CUSTOMER_HOUSEHOLD:
+            $this->xmlaOrdinal = 0x1023;
+            break;
+         case self::PRODUCT:
+            $this->xmlaOrdinal = 0x1031;
+            break;
+         case self::PRODUCT_GROUP:
+            $this->xmlaOrdinal = 0x1032;
+            break;
+         case self::SCENARIO:
+            $this->xmlaOrdinal = 0x1015;
+            break;
+         case self::UTILITY:
+            $this->xmlaOrdinal = 0x1016;
+            break;
+         case self::PERSON:
+            $this->xmlaOrdinal = 0x1041;
+            break;
+         case self::COMPANY:
+            $this->xmlaOrdinal = 0x1042;
+            break;
+         case self::CURRENCY_SOURCE:
+            $this->xmlaOrdinal = 0x1051;
+            break;
+         case self::CURRENCY_DESTINATION:
+            $this->xmlaOrdinal = 0x1052;
+            break;
+         case self::CHANNEL:
+            $this->xmlaOrdinal = 0x1061;
+            break;
+         case self::REPRESENTATIVE:
+            $this->xmlaOrdinal = 0x1062;
+            break;
+         case self::PROMOTION:
+            $this->xmlaOrdinal = 0x1071;
+            break;
+         default:
+            throw new InvalidArgumentException ('Unsupported level type');
       }
    }
 
    /**
     * return array Return the datatype enumeration constants
     */
-   public function getEnumConstants ( )
+   public function getEnumConstants()
    {
       if ( !self::$constants )
       {
          // array of enums constants
-         self::$constants = array (
-            new LevelType ( self::REGULAR ),
-            new LevelType ( self::ALL ),
-            new LevelType ( self::NULL ),
-            new LevelType ( self::TIME_YEARS ),
-            new LevelType ( self::TIME_HALF_YEAR ),
-            new LevelType ( self::TIME_QUARTERS ),
-            new LevelType ( self::TIME_MONTHS ),
-            new LevelType ( self::TIME_WEEKS ),
-            new LevelType ( self::TIME_DAYS ),
-            new LevelType ( self::TIME_HOURS ),
-            new LevelType ( self::TIME_MINUTES ),
-            new LevelType ( self::TIME_SECONDS ),
-            new LevelType ( self::TIME_UNDEFINED ),
-            new LevelType ( self::GEO_CONTINENT ),
-            new LevelType ( self::GEO_REGION ),
-            new LevelType ( self::GEO_COUNTRY ),
-            new LevelType ( self::GEO_STATE_OR_PROVINCE ),
-            new LevelType ( self::GEO_COUNTY ),
-            new LevelType ( self::GEO_CITY ),
-            new LevelType ( self::GEO_POSTALCODE ),
-            new LevelType ( self::GEO_POINT ),
-            new LevelType ( self::ORG_UNIT ),
-            new LevelType ( self::BOM_RESOURCE ),
-            new LevelType ( self::QUANTITATIVE ),
-            new LevelType ( self::ACCOUNT ),
-            new LevelType ( self::CUSTOMER ),
-            new LevelType ( self::CUSTOMER_GROUP ),
-            new LevelType ( self::CUSTOMER_HOUSEHOLD ),
-            new LevelType ( self::PRODUCT ),
-            new LevelType ( self::PRODUCT_GROUP ),
-            new LevelType ( self::SCENARIO ),
-            new LevelType ( self::UTILITY ),
-            new LevelType ( self::PERSON ),
-            new LevelType ( self::COMPANY ),
-            new LevelType ( self::CURRENCY_SOURCE ),
-            new LevelType ( self::CURRENCY_DESTINATION ),
-            new LevelType ( self::CHANNEL ),
-            new LevelType ( self::REPRESENTATIVE ),
-            new LevelType ( self::PROMOTION )
+         self::$constants = array(
+            new LevelType (self::REGULAR),
+            new LevelType (self::ALL),
+            new LevelType (self::NULL),
+            new LevelType (self::TIME_YEARS),
+            new LevelType (self::TIME_HALF_YEAR),
+            new LevelType (self::TIME_QUARTERS),
+            new LevelType (self::TIME_MONTHS),
+            new LevelType (self::TIME_WEEKS),
+            new LevelType (self::TIME_DAYS),
+            new LevelType (self::TIME_HOURS),
+            new LevelType (self::TIME_MINUTES),
+            new LevelType (self::TIME_SECONDS),
+            new LevelType (self::TIME_UNDEFINED),
+            new LevelType (self::GEO_CONTINENT),
+            new LevelType (self::GEO_REGION),
+            new LevelType (self::GEO_COUNTRY),
+            new LevelType (self::GEO_STATE_OR_PROVINCE),
+            new LevelType (self::GEO_COUNTY),
+            new LevelType (self::GEO_CITY),
+            new LevelType (self::GEO_POSTALCODE),
+            new LevelType (self::GEO_POINT),
+            new LevelType (self::ORG_UNIT),
+            new LevelType (self::BOM_RESOURCE),
+            new LevelType (self::QUANTITATIVE),
+            new LevelType (self::ACCOUNT),
+            new LevelType (self::CUSTOMER),
+            new LevelType (self::CUSTOMER_GROUP),
+            new LevelType (self::CUSTOMER_HOUSEHOLD),
+            new LevelType (self::PRODUCT),
+            new LevelType (self::PRODUCT_GROUP),
+            new LevelType (self::SCENARIO),
+            new LevelType (self::UTILITY),
+            new LevelType (self::PERSON),
+            new LevelType (self::COMPANY),
+            new LevelType (self::CURRENCY_SOURCE),
+            new LevelType (self::CURRENCY_DESTINATION),
+            new LevelType (self::CHANNEL),
+            new LevelType (self::REPRESENTATIVE),
+            new LevelType (self::PROMOTION)
          );
       }
 
       return self::$constants;
    }
 
-   
-   public function xmlaName ( )
+
+   public function xmlaName()
    {
-      return 'MDLEVEL_TYPE_'.$this->constant;
+      return 'MDLEVEL_TYPE_' . $this->constant;
    }
 
    /**
     * Human readable description of a Datatype instance.
     */
-   public function getDescription ( )
+   public function getDescription()
    {
       return '';
    }
@@ -354,7 +354,7 @@ class LevelType implements IXMLAConstant
    /**
     * Unique identifier of a Datatype instance.
     */
-   public function xmlaOrdinal ( )
+   public function xmlaOrdinal()
    {
       return $this->xmlaOrdinal;
    }
@@ -362,15 +362,17 @@ class LevelType implements IXMLAConstant
    /**
     * @return Dictionary of all values
     */
-   static public function getDictionary ( )
+   static public function getDictionary()
    {
       if ( !self::$dictionary )
-         self::$dictionary = new Dictionary ( 'OLAP4PHP\Metadata\LevelType' );
+      {
+         self::$dictionary = new Dictionary ('OLAP4PHP\Metadata\LevelType');
+      }
 
       return self::$dictionary;
    }
 
-   public function isTime ( )
+   public function isTime()
    {
       switch ( $this->constant )
       {
@@ -384,9 +386,9 @@ class LevelType implements IXMLAConstant
          case self::TIME_MINUTES:
          case self::TIME_SECONDS:
          case self::TIME_UNDEFINED:
-             return true;
+            return true;
          default:
-             return false;
+            return false;
       }
    }
-}
\ No newline at end of file
+}
diff --git a/metadata/MemberType.php b/metadata/MemberType.php
index a390d2d..39f5575 100644
--- a/metadata/MemberType.php
+++ b/metadata/MemberType.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,12 +33,12 @@ use OLAP4PHP\Common\IEnum;
  */
 class MemberType implements IXMLAConstant, IEnum
 {
-   const UNKNOWN  = 0;
-   const REGULAR  = 1;
-   const ALL      = 2;
-   const MEASURE  = 3;
-   const FORMULA  = 4;
-   const NULL     = 5;
+   const UNKNOWN = 0;
+   const REGULAR = 1;
+   const ALL     = 2;
+   const MEASURE = 3;
+   const FORMULA = 4;
+   const NULL    = 5;
 
    private $name;
    private $xmlaName;
@@ -50,46 +50,46 @@ class MemberType implements IXMLAConstant, IEnum
 
    public function __construct( $memberType )
    {
-      switch( $memberType )
+      switch ( $memberType )
       {
          case self::UNKNOWN:
-            $this->xmlaName = self::UNKNOWN;
+            $this->xmlaName    = self::UNKNOWN;
             $this->xmlaOrdinal = 0;
-            $this->name = 'UNKNOWN';
+            $this->name        = 'UNKNOWN';
             break;
 
          case self::REGULAR:
-            $this->xmlaName = self::REGULAR;
+            $this->xmlaName    = self::REGULAR;
             $this->xmlaOrdinal = 1;
-            $this->name = 'REGULAR';
+            $this->name        = 'REGULAR';
             break;
 
          case self::ALL:
-            $this->xmlaName = self::ALL;
+            $this->xmlaName    = self::ALL;
             $this->xmlaOrdinal = 2;
-            $this->name = 'ALL';
+            $this->name        = 'ALL';
             break;
 
          case self::MEASURE:
-            $this->xmlaName = self::MEASURE;
+            $this->xmlaName    = self::MEASURE;
             $this->xmlaOrdinal = 3;
-            $this->name = 'MEASURE';
+            $this->name        = 'MEASURE';
             break;
 
          case self::FORMULA:
-            $this->xmlaName = self::FORMULA;
+            $this->xmlaName    = self::FORMULA;
             $this->xmlaOrdinal = 4;
-            $this->name = 'FORMULA';
+            $this->name        = 'FORMULA';
             break;
 
          case self::NULL:
-            $this->xmlaName = self::NULL;
+            $this->xmlaName    = self::NULL;
             $this->xmlaOrdinal = 5;
-            $this->name = 'NULL';
+            $this->name        = 'NULL';
             break;
 
          default:
-            throw new OLAPException( 'MemberType ' . $memberType . ' is not supported.' );
+            throw new OLAPException('MemberType ' . $memberType . ' is not supported.');
       }
    }
 
@@ -98,7 +98,7 @@ class MemberType implements IXMLAConstant, IEnum
       return '';
    }
 
-   public function name ( )
+   public function name()
    {
       return $this->name;
    }
@@ -118,15 +118,19 @@ class MemberType implements IXMLAConstant, IEnum
       return $this->xmlaOrdinal;
    }
 
-   static public function getEnum ( $constant )
+   static public function getEnum( $constant )
    {
       if ( !self::$constants )
-         self::getEnumConstants ( );
+      {
+         self::getEnumConstants();
+      }
 
-      if ( ! isset ( self::$constants [ $constant ] ) )
-         throw new \InvalidArgumentException ( 'Invalid constant.' );
+      if ( !isset (self::$constants [$constant]) )
+      {
+         throw new \InvalidArgumentException ('Invalid constant.');
+      }
 
-      return self::$constants [ $constant ];
+      return self::$constants [$constant];
    }
 
    static public function getEnumConstants()
@@ -134,12 +138,12 @@ class MemberType implements IXMLAConstant, IEnum
       if ( !self::$constants )
       {
          self::$constants = array(
-            self::UNKNOWN  => new MemberType ( self::UNKNOWN ),
-            self::REGULAR  => new MemberType ( self::REGULAR ),
-            self::ALL      => new MemberType ( self::ALL ),
-            self::MEASURE  => new MemberType ( self::MEASURE ),
-            self::FORMULA  => new MemberType ( self::FORMULA ),
-            self::NULL    => new MemberType ( self::NULL )
+            self::UNKNOWN  => new MemberType (self::UNKNOWN),
+            self::REGULAR  => new MemberType (self::REGULAR),
+            self::ALL      => new MemberType (self::ALL),
+            self::MEASURE  => new MemberType (self::MEASURE),
+            self::FORMULA  => new MemberType (self::FORMULA),
+            self::NULL     => new MemberType (self::NULL)
          );
       }
 
@@ -148,7 +152,7 @@ class MemberType implements IXMLAConstant, IEnum
 
    public static function getDictionary()
    {
-      if ( !self::$dictionary ) self::$dictionary = new Dictionary( $this );
+      if ( !self::$dictionary ) self::$dictionary = new Dictionary($this);
       return self::$dictionary;
    }
 
@@ -157,12 +161,12 @@ class MemberType implements IXMLAConstant, IEnum
       if ( !self::$values )
       {
          self::$values = array(
-             self::UNKNOWN => new MemberType ( self::UNKNOWN ),
-             self::REGULAR => new MemberType ( self::REGULAR ),
-             self::ALL     => new MemberType ( self::ALL ),
-             self::MEASURE => new MemberType ( self::MEASURE ),
-             self::FORMULA => new MemberType ( self::FORMULA ),
-             self::NULL   => new MemberType ( self::NULL )
+            self::UNKNOWN => new MemberType (self::UNKNOWN),
+            self::REGULAR => new MemberType (self::REGULAR),
+            self::ALL     => new MemberType (self::ALL),
+            self::MEASURE => new MemberType (self::MEASURE),
+            self::FORMULA => new MemberType (self::FORMULA),
+            self::NULL    => new MemberType (self::NULL)
          );
       }
 
diff --git a/metadata/PropertyContentType.php b/metadata/PropertyContentType.php
index 1982078..5580f91 100644
--- a/metadata/PropertyContentType.php
+++ b/metadata/PropertyContentType.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -31,71 +31,82 @@ namespace OLAP4PHP\Metadata;
 class PropertyContentType implements IXMLAConstant
 {
    // Enumeration constants
-   const REGULAR                    = 0;
-   const ID                         = 1;
-   const RELATION_TO_PARENT         = 2;
-   const ROLLUP_OPERATOR            = 3;
-   const ORG_TITLE                  = 4;
-   const CAPTION                    = 5;
-   const CAPTION_SHORT              = 6;
-   const CAPTION_DESCRIPTION        = 7;
-   const CAPTION_ABREVIATION        = 8;
-   const WEB_URL                    = 9;
-   const WEB_HTML                   = 10;
-   const WEB_XML_OR_XSL             = 11;
-   const WEB_MAIL_ALIAS             = 12;
-   const ADDRESS                    = 13;
-   const ADDRESS_STREET             = 14;
-   const ADDRESS_HOUSE              = 15;
-   const ADDRESS_CITY               = 16;
-   const ADDRESS_STATE_OR_PROVINCE  = 17;
-   const ADDRESS_ZIP                = 18;
-   const ADDRESS_QUARTER            = 19;
-   const ADDRESS_COUNTRY            = 20;
-   const ADDRESS_BUILDING           = 21;
-   const ADDRESS_ROOM               = 22;
-   const ADDRESS_FLOOR              = 23;
-   const ADDRESS_FAX                = 24;
-   const ADDRESS_PHONE              = 25;
-   const GEO_CENTROID_X             = 26;
-   const GEO_CENTROID_Y             = 27;
-   const GEO_CENTROID_Z             = 28;
-   const GEO_BOUNDARY_TOP           = 29;
-   const GEO_BOUNDARY_LEFT          = 30;
-   const GEO_BOUNDARY_BOTTOM        = 31;
-   const GEO_BOUNDARY_RIGHT         = 32;
-   const GEO_BOUNDARY_FRONT         = 33;
-   const GEO_BOUNDARY_REAR          = 34;
-   const GEO_BOUNDARY_POLYGON       = 35;
-   const PHYSICAL_SIZE              = 36;
-   const PHYSICAL_COLOR             = 37;
-   const PHYSICAL_WEIGHT            = 38;
-   const PHYSICAL_HEIGHT            = 39;
-   const PHYSICAL_WIDTH             = 40;
-   const PHYSICAL_DEPTH             = 41;
-   const PHYSICAL_VOLUME            = 42;
-   const PHYSICAL_DENSITY           = 43;
-   const PERSON_FULL_NAME           = 44;
-   const PERSON_FIRST_NAME          = 45;
-   const PERSON_LAST_NAME           = 46;
-   const PERSON_MIDDLE_NAME         = 47;
-   const PERSON_DEMOGRAPHIC         = 48;
-   const PERSON_CONTACT             = 49;
-   const QTY_RANGE_LOW              = 50;
-   const QTY_RANGE_HIGH             = 51;
-   const FORMATTING_COLOR           = 52;
-   const FORMATTING_ORDER           = 53;
-   const FORMATTING_FONT            = 54;
-   const FORMATTING_FONT_EFFECTS    = 55;
-   const FORMATTING_FONT_SIZE       = 56;
-   const FORMATTING_SUB_TOTAL       = 57;
-   const DATE                       = 58;
-   const DATE_START                 = 59;
-   const DATE_ENDED                 = 60;
-   const DATE_CANCELED              = 61;
-   const DATE_MODIFIED              = 62;
-   const DATE_DURATION              = 63;
-   const VERSION                    = 64;
+   const REGULAR                   = 0;
+   const ID                        = 1;
+   const RELATION_TO_PARENT        = 2;
+   const ROLLUP_OPERATOR           = 3;
+   const ORG_TITLE                 = 4;
+   const CAPTION                   = 5;
+   const CAPTION_SHORT             = 6;
+   const CAPTION_DESCRIPTION       = 7;
+   const CAPTION_ABREVIATION       = 8;
+   const WEB_URL                   = 9;
+   const WEB_HTML                  = 10;
+   const WEB_XML_OR_XSL            = 11;
+   const WEB_MAIL_ALIAS            = 12;
+   const ADDRESS                   = 13;
+   const ADDRESS_STREET            = 14;
+   const ADDRESS_HOUSE             = 15;
+   const ADDRESS_CITY              = 16;
+   const ADDRESS_STATE_OR_PROVINCE = 17;
+   const ADDRESS_ZIP               = 18;
+   const ADDRESS_QUARTER           = 19;
+   const ADDRESS_COUNTRY           = 20;
+   const ADDRESS_BUILDING          = 21;
+   const ADDRESS_ROOM              = 22;
+   const ADDRESS_FLOOR             = 23;
+   const ADDRESS_FAX               = 24;
+   const ADDRESS_PHONE             = 25;
+   const GEO_CENTROID_X            = 26;
+   const GEO_CENTROID_Y            = 27;
+   const GEO_CENTROID_Z            = 28;
+   const GEO_BOUNDARY_TOP          = 29;
+   const GEO_BOUNDARY_LEFT         = 30;
+   const GEO_BOUNDARY_BOTTOM       = 31;
+   const GEO_BOUNDARY_RIGHT        = 32;
+   const GEO_BOUNDARY_FRONT        = 33;
+   const GEO_BOUNDARY_REAR         = 34;
+   const GEO_BOUNDARY_POLYGON      = 35;
+   const PHYSICAL_SIZE             = 36;
+   const PHYSICAL_COLOR            = 37;
+   const PHYSICAL_WEIGHT           = 38;
+   const PHYSICAL_HEIGHT           = 39;
+   const PHYSICAL_WIDTH            = 40;
+   const PHYSICAL_DEPTH            = 41;
+   const PHYSICAL_VOLUME           = 42;
+   const PHYSICAL_DENSITY          = 43;
+   const PERSON_FULL_NAME          = 44;
+   const PERSON_FIRST_NAME         = 45;
+   const PERSON_LAST_NAME          = 46;
+   const PERSON_MIDDLE_NAME        = 47;
+   const PERSON_DEMOGRAPHIC        = 48;
+   const PERSON_CONTACT            = 49;
+   const QTY_RANGE_LOW             = 50;
+   const QTY_RANGE_HIGH            = 51;
+   const FORMATTING_COLOR          = 52;
+   const FORMATTING_ORDER          = 53;
+   const FORMATTING_FONT           = 54;
+   const FORMATTING_FONT_EFFECTS   = 55;
+   const FORMATTING_FONT_SIZE      = 56;
+   const FORMATTING_SUB_TOTAL      = 57;
+   const DATE                      = 58;
+   const DATE_START                = 59;
+   const DATE_ENDED                = 60;
+   const DATE_CANCELED             = 61;
+   const DATE_MODIFIED             = 62;
+   const DATE_DURATION             = 63;
+   const VERSION                   = 64;
+   const TIME_YEARS                = 65;
+   const TIME_HALF_YEAR            = 66;
+   const TIME_QUARTERS             = 67;
+   const TIME_MONTHS               = 68;
+   const TIME_WEEKS                = 69;
+   const TIME_DAYS                 = 70;
+   const TIME_HOURS                = 71;
+   const TIME_MINUTES              = 72;
+   const TIME_SECONDS              = 73;
+   const TIME_UNDEFINED            = 74;
+
 
    // What constant do we rep ?
    private $constant;
@@ -108,7 +119,7 @@ class PropertyContentType implements IXMLAConstant
    /**
     * Constructor
     */
-   protected function __construct ( $constant )
+   protected function __construct( $constant )
    {
       $this->constant = $constant;
 
@@ -116,266 +127,266 @@ class PropertyContentType implements IXMLAConstant
       {
          case self::REGULAR:
             $this->xmlaOrdinal = 0x00;
-            $this->name = 'REGULAR';
+            $this->name        = 'REGULAR';
             break;
          case self::ID:
             $this->xmlaOrdinal = 0x01;
-            $this->name = 'ID';
+            $this->name        = 'ID';
             break;
          case self::RELATION_TO_PARENT:
             $this->xmlaOrdinal = 0x02;
-            $this->name = 'RELATION_TO_PARENT';
+            $this->name        = 'RELATION_TO_PARENT';
             break;
          case self::ROLLUP_OPERATOR:
             $this->xmlaOrdinal = 0x03;
-            $this->name = 'ROLLUP_OPERATOR';
+            $this->name        = 'ROLLUP_OPERATOR';
             break;
          case self::ORG_TITLE:
             $this->xmlaOrdinal = 0x11;
-            $this->name = 'ORG_TITLE';
+            $this->name        = 'ORG_TITLE';
             break;
          case self::CAPTION:
             $this->xmlaOrdinal = 0x21;
-            $this->name = 'CAPTION';
+            $this->name        = 'CAPTION';
             break;
          case self::CAPTION_SHORT:
             $this->xmlaOrdinal = 0x22;
-            $this->name = 'CAPTION_SHORT';
+            $this->name        = 'CAPTION_SHORT';
             break;
          case self::CAPTION_DESCRIPTION:
             $this->xmlaOrdinal = 0x23;
-            $this->name = 'CAPTION_DESCRIPTION';
+            $this->name        = 'CAPTION_DESCRIPTION';
             break;
          case self::CAPTION_ABREVIATION:
             $this->xmlaOrdinal = 0x24;
-            $this->name = 'CAPTION_ABREVIATION';
+            $this->name        = 'CAPTION_ABREVIATION';
             break;
          case self::WEB_URL:
             $this->xmlaOrdinal = 0x31;
-            $this->name = 'WEB_URL';
+            $this->name        = 'WEB_URL';
             break;
          case self::WEB_HTML:
             $this->xmlaOrdinal = 0x32;
-            $this->name = 'WEB_HTML';
+            $this->name        = 'WEB_HTML';
             break;
          case self::WEB_XML_OR_XSL:
             $this->xmlaOrdinal = 0x33;
-            $this->name = 'WEB_XML_OR_XSL';
+            $this->name        = 'WEB_XML_OR_XSL';
             break;
          case self::WEB_MAIL_ALIAS:
             $this->xmlaOrdinal = 0x34;
-            $this->name = 'WEB_MAIL_ALIAS';
+            $this->name        = 'WEB_MAIL_ALIAS';
             break;
          case self::ADDRESS:
             $this->xmlaOrdinal = 0x41;
-            $this->name = 'ADDRESS';
+            $this->name        = 'ADDRESS';
             break;
          case self::ADDRESS_STREET:
             $this->xmlaOrdinal = 0x42;
-            $this->name = 'ADDRESS_STREET';
+            $this->name        = 'ADDRESS_STREET';
             break;
          case self::ADDRESS_HOUSE:
             $this->xmlaOrdinal = 0x43;
-            $this->name = 'ADDRESS_HOUSE';
+            $this->name        = 'ADDRESS_HOUSE';
             break;
          case self::ADDRESS_CITY:
             $this->xmlaOrdinal = 0x44;
-            $this->name = 'ADDRESS_CITY';
+            $this->name        = 'ADDRESS_CITY';
             break;
          case self::ADDRESS_STATE_OR_PROVINCE:
             $this->xmlaOrdinal = 0x45;
-            $this->name = 'ADDRESS_STATE_OR_PROVINCE';
+            $this->name        = 'ADDRESS_STATE_OR_PROVINCE';
             break;
          case self::ADDRESS_ZIP:
             $this->xmlaOrdinal = 0x46;
-            $this->name = 'ADDRESS_ZIP';
+            $this->name        = 'ADDRESS_ZIP';
             break;
          case self::ADDRESS_QUARTER:
             $this->xmlaOrdinal = 0x47;
-            $this->name = 'ADDRESS_QUARTER';
+            $this->name        = 'ADDRESS_QUARTER';
             break;
          case self::ADDRESS_COUNTRY:
             $this->xmlaOrdinal = 0x48;
-            $this->name = 'ADDRESS_COUNTRY';
+            $this->name        = 'ADDRESS_COUNTRY';
             break;
          case self::ADDRESS_BUILDING:
             $this->xmlaOrdinal = 0x49;
-            $this->name = 'ADDRESS_BUILDING';
+            $this->name        = 'ADDRESS_BUILDING';
             break;
          case self::ADDRESS_ROOM:
             $this->xmlaOrdinal = 0x4A;
-            $this->name = 'ADDRESS_ROOM';
+            $this->name        = 'ADDRESS_ROOM';
             break;
          case self::ADDRESS_FLOOR:
             $this->xmlaOrdinal = 0x4B;
-            $this->name = 'ADDRESS_FLOOR';
+            $this->name        = 'ADDRESS_FLOOR';
             break;
          case self::ADDRESS_FAX:
             $this->xmlaOrdinal = 0x4C;
-            $this->name = 'ADDRESS_FAX';
+            $this->name        = 'ADDRESS_FAX';
             break;
          case self::ADDRESS_PHONE:
             $this->xmlaOrdinal = 0x4D;
-            $this->name = 'ADDRESS_PHONE';
+            $this->name        = 'ADDRESS_PHONE';
             break;
          case self::GEO_CENTROID_X:
             $this->xmlaOrdinal = 0x61;
-            $this->name = 'GEO_CENTROID_X';
+            $this->name        = 'GEO_CENTROID_X';
             break;
          case self::GEO_CENTROID_Y:
             $this->xmlaOrdinal = 0x62;
-            $this->name = 'GEO_CENTROID_Y';
+            $this->name        = 'GEO_CENTROID_Y';
             break;
          case self::GEO_CENTROID_Z:
             $this->xmlaOrdinal = 0x63;
-            $this->name = 'GEO_CENTROID_Z';
+            $this->name        = 'GEO_CENTROID_Z';
             break;
          case self::GEO_BOUNDARY_TOP:
             $this->xmlaOrdinal = 0x64;
-            $this->name = 'GEO_BOUNDARY_TOP';
+            $this->name        = 'GEO_BOUNDARY_TOP';
             break;
          case self::GEO_BOUNDARY_LEFT:
             $this->xmlaOrdinal = 0x65;
-            $this->name = 'GEO_BOUNDARY_LEFT';
+            $this->name        = 'GEO_BOUNDARY_LEFT';
             break;
          case self::GEO_BOUNDARY_BOTTOM:
             $this->xmlaOrdinal = 0x66;
-            $this->name = 'GEO_BOUNDARY_BOTTOM';
+            $this->name        = 'GEO_BOUNDARY_BOTTOM';
             break;
          case self::GEO_BOUNDARY_RIGHT:
             $this->xmlaOrdinal = 0x67;
-            $this->name = 'GEO_BOUNDARY_RIGHT';
+            $this->name        = 'GEO_BOUNDARY_RIGHT';
             break;
          case self::GEO_BOUNDARY_FRONT:
             $this->xmlaOrdinal = 0x68;
-            $this->name = 'GEO_BOUNDARY_FRONT';
+            $this->name        = 'GEO_BOUNDARY_FRONT';
             break;
          case self::GEO_BOUNDARY_REAR:
             $this->xmlaOrdinal = 0x69;
-            $this->name = 'GEO_BOUNDARY_REAR';
+            $this->name        = 'GEO_BOUNDARY_REAR';
             break;
          case self::GEO_BOUNDARY_POLYGON:
             $this->xmlaOrdinal = 0x6A;
-            $this->name = 'GEO_BOUNDARY_POLYGON';
+            $this->name        = 'GEO_BOUNDARY_POLYGON';
             break;
          case self::PHYSICAL_SIZE:
             $this->xmlaOrdinal = 0x71;
-            $this->name = 'PHYSICAL_SIZE';
+            $this->name        = 'PHYSICAL_SIZE';
             break;
          case self::PHYSICAL_COLOR:
             $this->xmlaOrdinal = 0x72;
-            $this->name = 'PHYSICAL_COLOR';
+            $this->name        = 'PHYSICAL_COLOR';
             break;
          case self::PHYSICAL_WEIGHT:
             $this->xmlaOrdinal = 0x73;
-            $this->name = 'PHYSICAL_WEIGHT';
+            $this->name        = 'PHYSICAL_WEIGHT';
             break;
          case self::PHYSICAL_HEIGHT:
             $this->xmlaOrdinal = 0x74;
-            $this->name = 'PHYSICAL_HEIGHT';
+            $this->name        = 'PHYSICAL_HEIGHT';
             break;
          case self::PHYSICAL_WIDTH:
             $this->xmlaOrdinal = 0x75;
-            $this->name = 'PHYSICAL_WIDTH';
+            $this->name        = 'PHYSICAL_WIDTH';
             break;
          case self::PHYSICAL_DEPTH:
             $this->xmlaOrdinal = 0x76;
-            $this->name = 'PHYSICAL_DEPTH';
+            $this->name        = 'PHYSICAL_DEPTH';
             break;
          case self::PHYSICAL_VOLUME:
             $this->xmlaOrdinal = 0x77;
-            $this->name = 'PHYSICAL_VOLUME';
+            $this->name        = 'PHYSICAL_VOLUME';
             break;
          case self::PHYSICAL_DENSITY:
             $this->xmlaOrdinal = 0x78;
-            $this->name = 'PHYSICAL_DENSITY';
+            $this->name        = 'PHYSICAL_DENSITY';
             break;
          case self::PERSON_FULL_NAME:
             $this->xmlaOrdinal = 0x82;
-            $this->name = 'PERSON_FULL_NAME';
+            $this->name        = 'PERSON_FULL_NAME';
             break;
          case self::PERSON_FIRST_NAME:
             $this->xmlaOrdinal = 0x83;
-            $this->name = 'PERSON_FIRST_NAME';
+            $this->name        = 'PERSON_FIRST_NAME';
             break;
          case self::PERSON_LAST_NAME:
             $this->xmlaOrdinal = 0x84;
-            $this->name = 'PERSON_LAST_NAME';
+            $this->name        = 'PERSON_LAST_NAME';
             break;
          case self::PERSON_MIDDLE_NAME:
             $this->xmlaOrdinal = 0x85;
-            $this->name = 'PERSON_MIDDLE_NAME';
+            $this->name        = 'PERSON_MIDDLE_NAME';
             break;
          case self::PERSON_DEMOGRAPHIC:
             $this->xmlaOrdinal = 0x86;
-            $this->name = 'PERSON_DEMOGRAPHIC';
+            $this->name        = 'PERSON_DEMOGRAPHIC';
             break;
          case self::PERSON_CONTACT:
             $this->xmlaOrdinal = 0x87;
-            $this->name = 'PERSON_CONTACT';
+            $this->name        = 'PERSON_CONTACT';
             break;
          case self::QTY_RANGE_LOW:
             $this->xmlaOrdinal = 0x91;
-            $this->name = 'QTY_RANGE_LOW';
+            $this->name        = 'QTY_RANGE_LOW';
             break;
          case self::QTY_RANGE_HIGH:
             $this->xmlaOrdinal = 0x92;
-            $this->name = 'QTY_RANGE_HIGH';
+            $this->name        = 'QTY_RANGE_HIGH';
             break;
          case self::FORMATTING_COLOR:
             $this->xmlaOrdinal = 0xA1;
-            $this->name = 'FORMATTING_COLOR';
+            $this->name        = 'FORMATTING_COLOR';
             break;
          case self::FORMATTING_ORDER:
             $this->xmlaOrdinal = 0xA2;
-            $this->name = 'FORMATTING_ORDER';
+            $this->name        = 'FORMATTING_ORDER';
             break;
          case self::FORMATTING_FONT:
             $this->xmlaOrdinal = 0xA3;
-            $this->name = 'FORMATTING_FONT';
+            $this->name        = 'FORMATTING_FONT';
             break;
          case self::FORMATTING_FONT_EFFECTS:
             $this->xmlaOrdinal = 0xA4;
-            $this->name = 'FORMATTING_FONT_EFFECTS';
+            $this->name        = 'FORMATTING_FONT_EFFECTS';
             break;
          case self::FORMATTING_FONT_SIZE:
             $this->xmlaOrdinal = 0xA5;
-            $this->name = 'FORMATTING_FONT_SIZE';
+            $this->name        = 'FORMATTING_FONT_SIZE';
             break;
          case self::FORMATTING_SUB_TOTAL:
             $this->xmlaOrdinal = 0xA6;
-            $this->name = 'FORMATTING_SUB_TOTAL';
+            $this->name        = 'FORMATTING_SUB_TOTAL';
             break;
          case self::DATE:
             $this->xmlaOrdinal = 0xB1;
-            $this->name = 'DATE';
+            $this->name        = 'DATE';
             break;
          case self::DATE_START:
             $this->xmlaOrdinal = 0xB2;
-            $this->name = 'DATE_START';
+            $this->name        = 'DATE_START';
             break;
          case self::DATE_ENDED:
             $this->xmlaOrdinal = 0xB3;
-            $this->name = 'DATE_ENDED';
+            $this->name        = 'DATE_ENDED';
             break;
          case self::DATE_CANCELED:
             $this->xmlaOrdinal = 0xB4;
-            $this->name = 'DATE_CANCELED';
+            $this->name        = 'DATE_CANCELED';
             break;
          case self::DATE_MODIFIED:
             $this->xmlaOrdinal = 0xB5;
-            $this->name = 'DATE_MODIFIED';
+            $this->name        = 'DATE_MODIFIED';
             break;
          case self::DATE_DURATION:
             $this->xmlaOrdinal = 0xB6;
-            $this->name = 'DATE_DURATION';
+            $this->name        = 'DATE_DURATION';
             break;
          case self::VERSION:
             $this->xmlaOrdinal = 0xC1;
-            $this->name = 'VERSION';
+            $this->name        = 'VERSION';
             break;
          default:
-            throw new InvalidArgumentException ( 'Unsupported property content type' );
+            throw new InvalidArgumentException ('Unsupported property content type');
       }
    }
 
@@ -383,92 +394,92 @@ class PropertyContentType implements IXMLAConstant
    /**
     * return array Return the datatype enumeration constants
     */
-   static public function getEnumConstants ( )
+   static public function getEnumConstants()
    {
       if ( !self::$constants )
       {
          // array of enums constants
-         self::$constants = array (
-            new PropertyContentType ( self::REGULAR ),
-            new PropertyContentType ( self::ID ),
-            new PropertyContentType ( self::RELATION_TO_PARENT ),
-            new PropertyContentType ( self::ROLLUP_OPERATOR ),
-            new PropertyContentType ( self::ORG_TITLE ),
-            new PropertyContentType ( self::CAPTION ),
-            new PropertyContentType ( self::CAPTION_SHORT ),
-            new PropertyContentType ( self::CAPTION_DESCRIPTION ),
-            new PropertyContentType ( self::CAPTION_ABREVIATION ),
-            new PropertyContentType ( self::WEB_URL ),
-            new PropertyContentType ( self::WEB_HTML ),
-            new PropertyContentType ( self::WEB_XML_OR_XSL ),
-            new PropertyContentType ( self::WEB_MAIL_ALIAS ),
-            new PropertyContentType ( self::ADDRESS ),
-            new PropertyContentType ( self::ADDRESS_STREET ),
-            new PropertyContentType ( self::ADDRESS_HOUSE ),
-            new PropertyContentType ( self::ADDRESS_CITY ),
-            new PropertyContentType ( self::ADDRESS_STATE_OR_PROVINCE ),
-            new PropertyContentType ( self::ADDRESS_ZIP ),
-            new PropertyContentType ( self::ADDRESS_QUARTER ),
-            new PropertyContentType ( self::ADDRESS_COUNTRY ),
-            new PropertyContentType ( self::ADDRESS_BUILDING ),
-            new PropertyContentType ( self::ADDRESS_ROOM ),
-            new PropertyContentType ( self::ADDRESS_FLOOR ),
-            new PropertyContentType ( self::ADDRESS_FAX ),
-            new PropertyContentType ( self::ADDRESS_PHONE ),
-            new PropertyContentType ( self::GEO_CENTROID_X ),
-            new PropertyContentType ( self::GEO_CENTROID_Y ),
-            new PropertyContentType ( self::GEO_CENTROID_Z ),
-            new PropertyContentType ( self::GEO_BOUNDARY_TOP ),
-            new PropertyContentType ( self::GEO_BOUNDARY_LEFT ),
-            new PropertyContentType ( self::GEO_BOUNDARY_BOTTOM ),
-            new PropertyContentType ( self::GEO_BOUNDARY_RIGHT ),
-            new PropertyContentType ( self::GEO_BOUNDARY_FRONT ),
-            new PropertyContentType ( self::GEO_BOUNDARY_REAR ),
-            new PropertyContentType ( self::GEO_BOUNDARY_POLYGON ),
-            new PropertyContentType ( self::PHYSICAL_SIZE ),
-            new PropertyContentType ( self::PHYSICAL_COLOR ),
-            new PropertyContentType ( self::PHYSICAL_WEIGHT ),
-            new PropertyContentType ( self::PHYSICAL_HEIGHT ),
-            new PropertyContentType ( self::PHYSICAL_WIDTH ),
-            new PropertyContentType ( self::PHYSICAL_DEPTH ),
-            new PropertyContentType ( self::PHYSICAL_VOLUME ),
-            new PropertyContentType ( self::PHYSICAL_DENSITY ),
-            new PropertyContentType ( self::PERSON_FULL_NAME ),
-            new PropertyContentType ( self::PERSON_FIRST_NAME ),
-            new PropertyContentType ( self::PERSON_LAST_NAME ),
-            new PropertyContentType ( self::PERSON_MIDDLE_NAME ),
-            new PropertyContentType ( self::PERSON_DEMOGRAPHIC ),
-            new PropertyContentType ( self::PERSON_CONTACT ),
-            new PropertyContentType ( self::QTY_RANGE_LOW ),
-            new PropertyContentType ( self::QTY_RANGE_HIGH ),
-            new PropertyContentType ( self::FORMATTING_COLOR ),
-            new PropertyContentType ( self::FORMATTING_ORDER ),
-            new PropertyContentType ( self::FORMATTING_FONT ),
-            new PropertyContentType ( self::FORMATTING_FONT_EFFECTS ),
-            new PropertyContentType ( self::FORMATTING_FONT_SIZE ),
-            new PropertyContentType ( self::FORMATTING_SUB_TOTAL ),
-            new PropertyContentType ( self::DATE ),
-            new PropertyContentType ( self::DATE_START ),
-            new PropertyContentType ( self::DATE_ENDED ),
-            new PropertyContentType ( self::DATE_CANCELED ),
-            new PropertyContentType ( self::DATE_MODIFIED ),
-            new PropertyContentType ( self::DATE_DURATION ),
-            new PropertyContentType ( self::VERSION )
+         self::$constants = array(
+            new PropertyContentType (self::REGULAR),
+            new PropertyContentType (self::ID),
+            new PropertyContentType (self::RELATION_TO_PARENT),
+            new PropertyContentType (self::ROLLUP_OPERATOR),
+            new PropertyContentType (self::ORG_TITLE),
+            new PropertyContentType (self::CAPTION),
+            new PropertyContentType (self::CAPTION_SHORT),
+            new PropertyContentType (self::CAPTION_DESCRIPTION),
+            new PropertyContentType (self::CAPTION_ABREVIATION),
+            new PropertyContentType (self::WEB_URL),
+            new PropertyContentType (self::WEB_HTML),
+            new PropertyContentType (self::WEB_XML_OR_XSL),
+            new PropertyContentType (self::WEB_MAIL_ALIAS),
+            new PropertyContentType (self::ADDRESS),
+            new PropertyContentType (self::ADDRESS_STREET),
+            new PropertyContentType (self::ADDRESS_HOUSE),
+            new PropertyContentType (self::ADDRESS_CITY),
+            new PropertyContentType (self::ADDRESS_STATE_OR_PROVINCE),
+            new PropertyContentType (self::ADDRESS_ZIP),
+            new PropertyContentType (self::ADDRESS_QUARTER),
+            new PropertyContentType (self::ADDRESS_COUNTRY),
+            new PropertyContentType (self::ADDRESS_BUILDING),
+            new PropertyContentType (self::ADDRESS_ROOM),
+            new PropertyContentType (self::ADDRESS_FLOOR),
+            new PropertyContentType (self::ADDRESS_FAX),
+            new PropertyContentType (self::ADDRESS_PHONE),
+            new PropertyContentType (self::GEO_CENTROID_X),
+            new PropertyContentType (self::GEO_CENTROID_Y),
+            new PropertyContentType (self::GEO_CENTROID_Z),
+            new PropertyContentType (self::GEO_BOUNDARY_TOP),
+            new PropertyContentType (self::GEO_BOUNDARY_LEFT),
+            new PropertyContentType (self::GEO_BOUNDARY_BOTTOM),
+            new PropertyContentType (self::GEO_BOUNDARY_RIGHT),
+            new PropertyContentType (self::GEO_BOUNDARY_FRONT),
+            new PropertyContentType (self::GEO_BOUNDARY_REAR),
+            new PropertyContentType (self::GEO_BOUNDARY_POLYGON),
+            new PropertyContentType (self::PHYSICAL_SIZE),
+            new PropertyContentType (self::PHYSICAL_COLOR),
+            new PropertyContentType (self::PHYSICAL_WEIGHT),
+            new PropertyContentType (self::PHYSICAL_HEIGHT),
+            new PropertyContentType (self::PHYSICAL_WIDTH),
+            new PropertyContentType (self::PHYSICAL_DEPTH),
+            new PropertyContentType (self::PHYSICAL_VOLUME),
+            new PropertyContentType (self::PHYSICAL_DENSITY),
+            new PropertyContentType (self::PERSON_FULL_NAME),
+            new PropertyContentType (self::PERSON_FIRST_NAME),
+            new PropertyContentType (self::PERSON_LAST_NAME),
+            new PropertyContentType (self::PERSON_MIDDLE_NAME),
+            new PropertyContentType (self::PERSON_DEMOGRAPHIC),
+            new PropertyContentType (self::PERSON_CONTACT),
+            new PropertyContentType (self::QTY_RANGE_LOW),
+            new PropertyContentType (self::QTY_RANGE_HIGH),
+            new PropertyContentType (self::FORMATTING_COLOR),
+            new PropertyContentType (self::FORMATTING_ORDER),
+            new PropertyContentType (self::FORMATTING_FONT),
+            new PropertyContentType (self::FORMATTING_FONT_EFFECTS),
+            new PropertyContentType (self::FORMATTING_FONT_SIZE),
+            new PropertyContentType (self::FORMATTING_SUB_TOTAL),
+            new PropertyContentType (self::DATE),
+            new PropertyContentType (self::DATE_START),
+            new PropertyContentType (self::DATE_ENDED),
+            new PropertyContentType (self::DATE_CANCELED),
+            new PropertyContentType (self::DATE_MODIFIED),
+            new PropertyContentType (self::DATE_DURATION),
+            new PropertyContentType (self::VERSION)
          );
       }
 
       return self::$constants;
    }
 
-   public function xmlaName ( )
+   public function xmlaName()
    {
-      return 'MD_PROPTYPE_'.$this->constant;
+      return 'MD_PROPTYPE_' . $this->constant;
    }
 
    /**
     * Human readable description of a Datatype instance.
     */
-   public function getDescription ( )
+   public function getDescription()
    {
       return null;
    }
@@ -476,7 +487,7 @@ class PropertyContentType implements IXMLAConstant
    /**
     * Unique identifier of a Datatype instance.
     */
-   public function xmlaOrdinal ( )
+   public function xmlaOrdinal()
    {
       return $this->xmlaOrdinal;
    }
@@ -484,15 +495,17 @@ class PropertyContentType implements IXMLAConstant
    /**
     * @return Dictionary of all values
     */
-   static public function getDictionary ( )
+   static public function getDictionary()
    {
       if ( !self::$dictionary )
-         self::$dictionary = new Dictionary ( 'OLAP4PHP\Metadata\PropertyContentType' );
+      {
+         self::$dictionary = new Dictionary ('OLAP4PHP\Metadata\PropertyContentType');
+      }
 
       return self::$dictionary;
    }
 
-   public function isTime ( )
+   public function isTime()
    {
       switch ( $this->constant )
       {
@@ -506,9 +519,9 @@ class PropertyContentType implements IXMLAConstant
          case self::TIME_MINUTES:
          case self::TIME_SECONDS:
          case self::TIME_UNDEFINED:
-             return true;
+            return true;
          default:
-             return false;
+            return false;
       }
    }
-}
\ No newline at end of file
+}
diff --git a/metadata/PropertyType.php b/metadata/PropertyType.php
index ae2c4a0..4c940d0 100644
--- a/metadata/PropertyType.php
+++ b/metadata/PropertyType.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -31,10 +31,10 @@ namespace OLAP4PHP\Metadata;
 class PropertyType implements IXMLAConstant
 {
    // Enumeration constants
-   const MEMBER   = 'MEMBER';
-   const CELL     = 'CELL';
-   const SYSTEM   = 'SYSTEM';
-   const BLOB     = 'BLOB';
+   const MEMBER = 'MEMBER';
+   const CELL   = 'CELL';
+   const SYSTEM = 'SYSTEM';
+   const BLOB   = 'BLOB';
 
    // What constant do we rep ?
    private $constant;
@@ -46,7 +46,7 @@ class PropertyType implements IXMLAConstant
    /**
     * Constructor
     */
-   public function __construct ( $constant )
+   public function __construct( $constant )
    {
       $this->constant = $constant;
 
@@ -80,11 +80,11 @@ class PropertyType implements IXMLAConstant
           * Identifies a property which contains a binary large object (blob).
           */
          case self::BLOB:
-            $this->xmlaOrdinal =  8;
+            $this->xmlaOrdinal = 8;
             break;
 
          default:
-            throw new InvalidArgumentException ( 'Unsupported property type' );
+            throw new InvalidArgumentException ('Unsupported property type');
       }
    }
 
@@ -92,31 +92,31 @@ class PropertyType implements IXMLAConstant
    /**
     * return array Return the datatype enumeration constants
     */
-   public function getEnumConstants ( )
+   public function getEnumConstants()
    {
       if ( !self::$constants )
       {
          // array of enums constants
-         self::$constants = array (
-            new PropertyType ( self::MEMBER ),
-            new PropertyType ( self::CELL ),
-            new PropertyType ( self::SYSTEM ),
-            new PropertyType ( self::BLOB )
+         self::$constants = array(
+            new PropertyType (self::MEMBER),
+            new PropertyType (self::CELL),
+            new PropertyType (self::SYSTEM),
+            new PropertyType (self::BLOB)
          );
       }
 
       return self::$constants;
    }
 
-   public function xmlaName ( )
+   public function xmlaName()
    {
-      return 'MD_PROPTYPE_'.$this->constant;
+      return 'MD_PROPTYPE_' . $this->constant;
    }
 
    /**
     * Human readable description of a Datatype instance.
     */
-   public function getDescription ( )
+   public function getDescription()
    {
       return null;
    }
@@ -124,7 +124,7 @@ class PropertyType implements IXMLAConstant
    /**
     * Unique identifier of a Datatype instance.
     */
-   public function xmlaOrdinal ( )
+   public function xmlaOrdinal()
    {
       return $this->xmlaOrdinal;
    }
@@ -132,11 +132,13 @@ class PropertyType implements IXMLAConstant
    /**
     * @return Dictionary of all values
     */
-   static public function getDictionary ( )
+   static public function getDictionary()
    {
       if ( !self::$dictionary )
-         self::$dictionary = new Dictionary ( $this );
+      {
+         self::$dictionary = new Dictionary ($this);
+      }
 
       return self::$dictionary;
    }
-}
\ No newline at end of file
+}
diff --git a/metadata/StandardMemberProperty.php b/metadata/StandardMemberProperty.php
index a89b141..a7f3db4 100644
--- a/metadata/StandardMemberProperty.php
+++ b/metadata/StandardMemberProperty.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -65,13 +65,13 @@ class StandardMemberProperty implements IProperty, IEnum
    private $internal;
    private $name;
    private $type;
-   
+
    private static $constants;
-   
+
    /**
     * Constructor
     */
-   protected function __construct ( $constant )
+   protected function __construct( $constant )
    {
       $this->constant = $constant;
 
@@ -82,398 +82,402 @@ class StandardMemberProperty implements IProperty, IEnum
           * holds the name of the current catalog.
           */
          case self::CATALOG_NAME:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
-               "Optional. The name of the catalog to which this member belongs. ".
-               "NULL if the provider does not support catalogs.";
-            $this->name = 'CATALOG_NAME';
+               "Optional. The name of the catalog to which this member belongs. " .
+                  "NULL if the provider does not support catalogs.";
+            $this->name        = 'CATALOG_NAME';
             break;
 
          /**
-         * Definition of the property which
-         * holds the name of the current schema.
-         */
+          * Definition of the property which
+          * holds the name of the current schema.
+          */
          case self::SCHEMA_NAME:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
-               "Optional. The name of the schema to which this member belongs. ".
-               "NULL if the provider does not support schemas.";
-            $this->name = 'SCHEMA_NAME';
+               "Optional. The name of the schema to which this member belongs. " .
+                  "NULL if the provider does not support schemas.";
+            $this->name        = 'SCHEMA_NAME';
             break;
 
          /**
-         * Definition of the property which
-         * holds the name of the current cube.
-         */
+          * Definition of the property which
+          * holds the name of the current cube.
+          */
          case self::CUBE_NAME:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
                "Required. Name of the cube to which this member belongs.";
-            $this->name = 'CUBE_NAME';
+            $this->name        = 'CUBE_NAME';
             break;
 
          /**
-         * Definition of the property which
-         * holds the unique name of the current dimension.
-         */
+          * Definition of the property which
+          * holds the unique name of the current dimension.
+          */
          case self::DIMENSION_UNIQUE_NAME:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
-               "Required. Unique name of the dimension to which this member ".
-               "belongs. For providers that generate unique names by ".
-               "qualification, each component of this name is delimited.";
-            $this->name = 'DIMENSION_UNIQUE_NAME';
+               "Required. Unique name of the dimension to which this member " .
+                  "belongs. For providers that generate unique names by " .
+                  "qualification, each component of this name is delimited.";
+            $this->name        = 'DIMENSION_UNIQUE_NAME';
             break;
 
          /**
-         * Definition of the property which
-         * holds the unique name of the current hierarchy.
-         */
+          * Definition of the property which
+          * holds the unique name of the current hierarchy.
+          */
          case self::HIERARCHY_UNIQUE_NAME:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
-               "Required. Unique name of the hierarchy. If the member belongs to ".
-               "more than one hierarchy, there is one row for each hierarchy ".
-               "to which it belongs. For providers that generate unique names ".
-               "by qualification, each component of this name is delimited.";
-            $this->name = 'HIERARCHY_UNIQUE_NAME';
+               "Required. Unique name of the hierarchy. If the member belongs to " .
+                  "more than one hierarchy, there is one row for each hierarchy " .
+                  "to which it belongs. For providers that generate unique names " .
+                  "by qualification, each component of this name is delimited.";
+            $this->name        = 'HIERARCHY_UNIQUE_NAME';
             break;
 
          /**
-         * Definition of the property which
-         * holds the unique name of the current level.
-         */
+          * Definition of the property which
+          * holds the unique name of the current level.
+          */
          case self::LEVEL_UNIQUE_NAME:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
-               "Required. Unique name of the level to which the member belongs. ".
-               "For providers that generate unique names by qualification, ".
-               "each component of this name is delimited.";
-            $this->name = 'LEVEL_UNIQUE_NAME';
+               "Required. Unique name of the level to which the member belongs. " .
+                  "For providers that generate unique names by qualification, " .
+                  "each component of this name is delimited.";
+            $this->name        = 'LEVEL_UNIQUE_NAME';
             break;
 
          /**
-         * Definition of the property which
-         * holds the ordinal of the current level.
-         */
+          * Definition of the property which
+          * holds the ordinal of the current level.
+          */
          case self::LEVEL_NUMBER:
-            $this->type = Datatype::getEnum ( Datatype::UNSIGNED_INTEGER );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::UNSIGNED_INTEGER );
+            $this->internal    = false;
             $this->description =
-               "Required. The distance of the member from the root of the ".
-               "hierarchy. The root level is zero.";
-            $this->name = 'LEVEL_NUMBER';
+               "Required. The distance of the member from the root of the " .
+                  "hierarchy. The root level is zero.";
+            $this->name        = 'LEVEL_NUMBER';
             break;
 
          /**
-         * Definition of the property which
-         * holds the ordinal of the current member.
-         */
+          * Definition of the property which
+          * holds the ordinal of the current member.
+          */
          case self::MEMBER_ORDINAL:
-            $this->type = Datatype::getEnum ( Datatype::UNSIGNED_INTEGER );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::UNSIGNED_INTEGER );
+            $this->internal    = false;
             $this->description =
-               "Required. Ordinal number of the member. Sort rank of the member ".
-               "when members of this dimension are sorted in their natural ".
-               "sort order. If providers do not have the concept of natural ".
-               "ordering, this should be the rank when sorted by MEMBER_NAME.";
-            $this->name = 'MEMBER_ORDINAL';
+               "Required. Ordinal number of the member. Sort rank of the member " .
+                  "when members of this dimension are sorted in their natural " .
+                  "sort order. If providers do not have the concept of natural " .
+                  "ordering, this should be the rank when sorted by MEMBER_NAME.";
+            $this->name        = 'MEMBER_ORDINAL';
             break;
 
          /**
-         * Definition of the property which
-         * holds the name of the current member.
-         */
+          * Definition of the property which
+          * holds the name of the current member.
+          */
          case self::MEMBER_NAME:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
                "Required. Name of the member.";
-            $this->name = 'MEMBER_NAME';
+            $this->name        = 'MEMBER_NAME';
             break;
 
          /**
-         * Definition of the property which
-         * holds the unique name of the current member.
-         */
+          * Definition of the property which
+          * holds the unique name of the current member.
+          */
          case self::MEMBER_UNIQUE_NAME:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
-               "Required. Unique name of the member. For providers that generate ".
-               "unique names by qualification, each component of this name is ".
-               "delimited.";
-            $this->name = 'MEMBER_UNIQUE_NAME';
+               "Required. Unique name of the member. For providers that generate " .
+                  "unique names by qualification, each component of this name is " .
+                  "delimited.";
+            $this->name        = 'MEMBER_UNIQUE_NAME';
             break;
 
          /**
-         * Definition of the property which
-         * holds the type of the member.
-         */
+          * Definition of the property which
+          * holds the type of the member.
+          */
          case self::MEMBER_TYPE:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
-               "Required. Type of the member. Can be one of the following values: ".
-               "MDMEMBER_Datatype.TYPE_REGULAR, MDMEMBER_Datatype.TYPE_ALL, ".
-               "MDMEMBER_Datatype.TYPE_FORMULA, MDMEMBER_Datatype.TYPE_MEASURE, ".
-               "MDMEMBER_Datatype.TYPE_UNKNOWN. MDMEMBER_Datatype.TYPE_FORMULA ".
-               "takes precedence over MDMEMBER_Datatype.TYPE_MEASURE. ".
-               "Therefore, if there is a formula (calculated) member on the ".
-               "Measures dimension, it is listed as ".
-               "MDMEMBER_Datatype.TYPE_FORMULA.";
-            $this->name = 'MEMBER_TYPE';
+               "Required. Type of the member. Can be one of the following values: " .
+                  "MDMEMBER_Datatype.TYPE_REGULAR, MDMEMBER_Datatype.TYPE_ALL, " .
+                  "MDMEMBER_Datatype.TYPE_FORMULA, MDMEMBER_Datatype.TYPE_MEASURE, " .
+                  "MDMEMBER_Datatype.TYPE_UNKNOWN. MDMEMBER_Datatype.TYPE_FORMULA " .
+                  "takes precedence over MDMEMBER_Datatype.TYPE_MEASURE. " .
+                  "Therefore, if there is a formula (calculated) member on the " .
+                  "Measures dimension, it is listed as " .
+                  "MDMEMBER_Datatype.TYPE_FORMULA.";
+            $this->name        = 'MEMBER_TYPE';
             break;
 
          /**
-         * Definition of the property which
-         * holds the GUID of the member
-         */
+          * Definition of the property which
+          * holds the GUID of the member
+          */
          case self::MEMBER_GUID:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
                "Optional. Member GUID. NULL if no GUID exists.";
-            $this->name = 'MEMBER_GUID';
+            $this->name        = 'MEMBER_GUID';
             break;
 
          /**
-         * Definition of the property which
-         * holds the label or caption associated with the member, or the
-         * member's name if no caption is defined.
-         */
+          * Definition of the property which
+          * holds the label or caption associated with the member, or the
+          * member's name if no caption is defined.
+          */
          case self::MEMBER_CAPTION:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
-               "Required. A label or caption associated with the member. Used ".
-               "primarily for display purposes. If a caption does not exist, ".
-               "MEMBER_NAME is returned.";
-            $this->name = 'MEMBER_CAPTION';
+               "Required. A label or caption associated with the member. Used " .
+                  "primarily for display purposes. If a caption does not exist, " .
+                  "MEMBER_NAME is returned.";
+            $this->name        = 'MEMBER_CAPTION';
             break;
 
          /**
-         * Definition of the property which holds the
-         * number of children this member has.
-         */
+          * Definition of the property which holds the
+          * number of children this member has.
+          */
          case self::CHILDREN_CARDINALITY:
-            $this->type = Datatype::getEnum ( Datatype::UNSIGNED_INTEGER );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::UNSIGNED_INTEGER );
+            $this->internal    = false;
             $this->description =
-               "Required. Number of children that the member has. This can be an ".
-               "estimate, so consumers should not rely on this to be the exact ".
-               "count. Providers should return the best estimate possible.";
-            $this->name = 'CHILDREN_CARDINALITY';
+               "Required. Number of children that the member has. This can be an " .
+                  "estimate, so consumers should not rely on this to be the exact " .
+                  "count. Providers should return the best estimate possible.";
+            $this->name        = 'CHILDREN_CARDINALITY';
             break;
 
          /**
-         * Definition of the property which holds the
-         * distance from the root of the hierarchy of this member's parent.
-         */
+          * Definition of the property which holds the
+          * distance from the root of the hierarchy of this member's parent.
+          */
          case self::PARENT_LEVEL:
-           $this->type = Datatype::getEnum ( Datatype::UNSIGNED_INTEGER );
-           $this->internal = false;
-           "Required. The distance of the member's parent from the root level ".
-           "of the hierarchy. The root level is zero.";
-           $this->name = 'PARENT_LEVEL';
-           break;
+            $this->type     = Datatype::getEnum( Datatype::UNSIGNED_INTEGER );
+            $this->internal = false;
+            "Required. The distance of the member's parent from the root level " .
+               "of the hierarchy. The root level is zero.";
+            $this->name = 'PARENT_LEVEL';
+            break;
 
          /**
-         * Definition of the property which holds the
-         * Name of the current catalog.
-         */
+          * Definition of the property which holds the
+          * Name of the current catalog.
+          */
          case self::PARENT_UNIQUE_NAME:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
             $this->description =
-               "Required. Unique name of the member's parent. NULL is returned ".
-               "for any members at the root level. For providers that generate ".
-               "unique names by qualification, each component of this name is ".
-               "delimited.";
-            $this->name = 'PARENT_UNIQUE_NAME';
+               "Required. Unique name of the member's parent. NULL is returned " .
+                  "for any members at the root level. For providers that generate " .
+                  "unique names by qualification, each component of this name is " .
+                  "delimited.";
+            $this->name        = 'PARENT_UNIQUE_NAME';
             break;
 
          /**
-         * Definition of the property which holds the
-         * number of parents that this member has. Generally 1, or 0
-         * for root members.
-         */
+          * Definition of the property which holds the
+          * number of parents that this member has. Generally 1, or 0
+          * for root members.
+          */
          case self::PARENT_COUNT:
-            $this->type = Datatype::getEnum ( Datatype::UNSIGNED_INTEGER );
-            $this->internal = false;
-            $this->description = 
+            $this->type        = Datatype::getEnum( Datatype::UNSIGNED_INTEGER );
+            $this->internal    = false;
+            $this->description =
                "Required. Number of parents that this member has.";
-            $this->name = 'PARENT_COUNT';
+            $this->name        = 'PARENT_COUNT';
             break;
 
          /**
-         * Definition of the property which holds the
-         * description of this member.
-         */
+          * Definition of the property which holds the
+          * description of this member.
+          */
          case self::DESCRIPTION:
-            $this->type = Datatype::getEnum ( Datatype::STRING );
-            $this->internal = false;
-            $this->description = 
+            $this->type        = Datatype::getEnum( Datatype::STRING );
+            $this->internal    = false;
+            $this->description =
                "Optional. A human-readable description of the member.";
-            $this->name = 'DESCRIPTION';
+            $this->name        = 'DESCRIPTION';
             break;
 
          /**
-         * Definition of the internal property which holds the
-         * name of the system property which determines whether to show a member
-         * (especially a measure or calculated member) in a user interface such
-         * as JPivot.
-         */
+          * Definition of the internal property which holds the
+          * name of the system property which determines whether to show a member
+          * (especially a measure or calculated member) in a user interface such
+          * as JPivot.
+          */
          case self::VISIBLE:
-            $this->type = Datatype::getEnum ( Datatype::BOOLEAN );
-            $this->internal = true;
+            $this->type        = Datatype::getEnum( Datatype::BOOLEAN );
+            $this->internal    = true;
             $this->description = null;
-            $this->name = 'VISIBLE';
+            $this->name        = 'VISIBLE';
             break;
 
          /**
-         * Definition of the internal property which holds the
-         * value of the member key in the original data type. MEMBER_KEY is for
-         * backward-compatibility.  MEMBER_KEY has the same value as KEY0 for
-         * non-composite keys, and MEMBER_KEY property is null for composite
-         * keys.
-         */
+          * Definition of the internal property which holds the
+          * value of the member key in the original data type. MEMBER_KEY is for
+          * backward-compatibility.  MEMBER_KEY has the same value as KEY0 for
+          * non-composite keys, and MEMBER_KEY property is null for composite
+          * keys.
+          */
          case self::MEMBER_KEY:
-            $this->type = Datatype::getEnum ( Datatype::VARIANT );
-            $this->internal = true;
+            $this->type        = Datatype::getEnum( Datatype::VARIANT );
+            $this->internal    = true;
             $this->description =
                "Optional. The value of the member key. Null for composite keys.";
-            $this->name = 'MEMBER_KEY';
+            $this->name        = 'MEMBER_KEY';
             break;
 
          /**
-         * Definition of the boolean property that indicates whether
-         * a member is a placeholder member for an empty position in a
-         * dimension hierarchy.
-         */
+          * Definition of the boolean property that indicates whether
+          * a member is a placeholder member for an empty position in a
+          * dimension hierarchy.
+          */
          case self::IS_PLACEHOLDERMEMBER:
-            $this->type = Datatype::getEnum ( Datatype::BOOLEAN );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::BOOLEAN );
+            $this->internal    = false;
             $this->description =
-               "Required. Whether the member is a placeholder member for an empty ".
-               "position in a dimension hierarchy.";
-            $this->name = 'IS_PLACEHOLDERMEMBER';
+               "Required. Whether the member is a placeholder member for an empty " .
+                  "position in a dimension hierarchy.";
+            $this->name        = 'IS_PLACEHOLDERMEMBER';
             break;
 
          /**
-         * Definition of the property that indicates whether the member is a
-         * data member.
-         */
+          * Definition of the property that indicates whether the member is a
+          * data member.
+          */
          case self::IS_DATAMEMBER:
-            $this->type = Datatype::getEnum ( Datatype::BOOLEAN );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::BOOLEAN );
+            $this->internal    = false;
             $this->description =
                "Required. whether the member is a data member";
-            $this->name = 'IS_DATAMEMBER';
+            $this->name        = 'IS_DATAMEMBER';
             break;
 
          /**
-         * Definition of the property which
-         * holds the level depth of a member.
-         *
-         * <p>Caution: Level depth of members in parent-child hierarchy isn't
-         * from their levels.  It's calculated from the underlying data
-         * dynamically.
-         */
+          * Definition of the property which
+          * holds the level depth of a member.
+          *
+          * <p>Caution: Level depth of members in parent-child hierarchy isn't
+          * from their levels.  It's calculated from the underlying data
+          * dynamically.
+          */
          case self::DEPTH:
-            $this->type = Datatype::getEnum ( Datatype::UNSIGNED_INTEGER );
-            $this->internal = true;
+            $this->type        = Datatype::getEnum( Datatype::UNSIGNED_INTEGER );
+            $this->internal    = true;
             $this->description =
                "The level depth of a member";
-            $this->name = 'DEPTH';
+            $this->name        = 'DEPTH';
             break;
 
          /**
-         * Definition of the property which
-         * holds the DISPLAY_INFO required by XML/A.
-         *
-         * <p>Caution: This property's value is calculated based on a specified
-         * MDX query, so its value is dynamic at runtime.
-         */
+          * Definition of the property which
+          * holds the DISPLAY_INFO required by XML/A.
+          *
+          * <p>Caution: This property's value is calculated based on a specified
+          * MDX query, so its value is dynamic at runtime.
+          */
          case self::DISPLAY_INFO:
-            $this->type = Datatype::getEnum ( Datatype::UNSIGNED_INTEGER );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::UNSIGNED_INTEGER );
+            $this->internal    = false;
             $this->description =
                "Display instruction of a member for XML/A";
-            $this->name = 'DISPLAY_INFO';
+            $this->name        = 'DISPLAY_INFO';
             break;
 
          /**
-         * Definition of the property which
-         * holds the value of a cell. Is usually numeric (since most measures
-         * are numeric) but is occasionally another type.
-         */
+          * Definition of the property which
+          * holds the value of a cell. Is usually numeric (since most measures
+          * are numeric) but is occasionally another type.
+          */
          case self::VALUE:
-            $this->type = Datatype::getEnum ( Datatype::VARIANT );
-            $this->internal = false;
+            $this->type        = Datatype::getEnum( Datatype::VARIANT );
+            $this->internal    = false;
             $this->description =
                "The unformatted value of the cell.";
-            $this->name = 'VALUE';
+            $this->name        = 'VALUE';
             break;
 
          default:
-            throw new InvalidArgumentException ( 'Unsupported standard member property.' );
+            throw new InvalidArgumentException ('Unsupported standard member property.');
       }
    }
 
 
-   static public function getEnum ( $constant )
+   static public function getEnum( $constant )
    {
       if ( !self::$constants )
-         self::getEnumConstants ( );
+      {
+         self::getEnumConstants();
+      }
 
-      if ( ! isset ( self::$constants [ $constant ] ) )
-         throw new \InvalidArgumentException ( 'Invalid constant.' );
+      if ( !isset (self::$constants [$constant]) )
+      {
+         throw new \InvalidArgumentException ('Invalid constant.');
+      }
 
-      return self::$constants [ $constant ];
+      return self::$constants [$constant];
    }
 
 
    /**
     * return array Return the datatype enumeration constants
     */
-   static public function getEnumConstants ( )
+   static public function getEnumConstants()
    {
       if ( !self::$constants )
       {
          // array of enums constants
-         self::$constants = array (
-            new StandardMemberProperty ( self::CATALOG_NAME ),
-            new StandardMemberProperty ( self::SCHEMA_NAME ),
-            new StandardMemberProperty ( self::CUBE_NAME ),
-            new StandardMemberProperty ( self::DIMENSION_UNIQUE_NAME ),
-            new StandardMemberProperty ( self::HIERARCHY_UNIQUE_NAME ),
-            new StandardMemberProperty ( self::LEVEL_UNIQUE_NAME ),
-            new StandardMemberProperty ( self::LEVEL_NUMBER ),
-            new StandardMemberProperty ( self::MEMBER_ORDINAL ),
-            new StandardMemberProperty ( self::MEMBER_NAME ),
-            new StandardMemberProperty ( self::MEMBER_UNIQUE_NAME ),
-            new StandardMemberProperty ( self::MEMBER_TYPE ),
-            new StandardMemberProperty ( self::MEMBER_GUID ),
-            new StandardMemberProperty ( self::MEMBER_CAPTION ),
-            new StandardMemberProperty ( self::CHILDREN_CARDINALITY ),
-            new StandardMemberProperty ( self::PARENT_LEVEL ),
-            new StandardMemberProperty ( self::PARENT_UNIQUE_NAME ),
-            new StandardMemberProperty ( self::PARENT_COUNT ),
-            new StandardMemberProperty ( self::DESCRIPTION ),
-            new StandardMemberProperty ( self::VISIBLE ),
-            new StandardMemberProperty ( self::MEMBER_KEY ),
-            new StandardMemberProperty ( self::IS_PLACEHOLDERMEMBER ),
-            new StandardMemberProperty ( self::IS_DATAMEMBER ),
-            new StandardMemberProperty ( self::VALUE ),
-            new StandardMemberProperty ( self::DEPTH ),
-            new StandardMemberProperty ( self::DISPLAY_INFO )
+         self::$constants = array(
+            new StandardMemberProperty (self::CATALOG_NAME),
+            new StandardMemberProperty (self::SCHEMA_NAME),
+            new StandardMemberProperty (self::CUBE_NAME),
+            new StandardMemberProperty (self::DIMENSION_UNIQUE_NAME),
+            new StandardMemberProperty (self::HIERARCHY_UNIQUE_NAME),
+            new StandardMemberProperty (self::LEVEL_UNIQUE_NAME),
+            new StandardMemberProperty (self::LEVEL_NUMBER),
+            new StandardMemberProperty (self::MEMBER_ORDINAL),
+            new StandardMemberProperty (self::MEMBER_NAME),
+            new StandardMemberProperty (self::MEMBER_UNIQUE_NAME),
+            new StandardMemberProperty (self::MEMBER_TYPE),
+            new StandardMemberProperty (self::MEMBER_GUID),
+            new StandardMemberProperty (self::MEMBER_CAPTION),
+            new StandardMemberProperty (self::CHILDREN_CARDINALITY),
+            new StandardMemberProperty (self::PARENT_LEVEL),
+            new StandardMemberProperty (self::PARENT_UNIQUE_NAME),
+            new StandardMemberProperty (self::PARENT_COUNT),
+            new StandardMemberProperty (self::DESCRIPTION),
+            new StandardMemberProperty (self::VISIBLE),
+            new StandardMemberProperty (self::MEMBER_KEY),
+            new StandardMemberProperty (self::IS_PLACEHOLDERMEMBER),
+            new StandardMemberProperty (self::IS_DATAMEMBER),
+            new StandardMemberProperty (self::VALUE),
+            new StandardMemberProperty (self::DEPTH),
+            new StandardMemberProperty (self::DISPLAY_INFO)
          );
       }
 
@@ -483,7 +487,7 @@ class StandardMemberProperty implements IProperty, IEnum
    /**
     * return string human readable description of the member property
     */
-   public function getDescription ( )
+   public function getDescription()
    {
       return $this->description;
    }
@@ -491,7 +495,7 @@ class StandardMemberProperty implements IProperty, IEnum
    /**
     * return string
     */
-   public function name ( )
+   public function name()
    {
       return $this->name;
    }
@@ -499,28 +503,28 @@ class StandardMemberProperty implements IProperty, IEnum
    /**
     * @return ContentType
     */
-   public function getContentType ( )
+   public function getContentType()
    {
    }
 
    /**
     * @return DataType
     */
-   public function getDataType ( )
+   public function getDataType()
    {
    }
 
    /**
     * @return string
     */
-   public function getCaption ( )
+   public function getCaption()
    {
    }
 
    /**
     * @return string
     */
-   public function getUniqueName ( )
+   public function getUniqueName()
    {
    }
 
@@ -528,9 +532,9 @@ class StandardMemberProperty implements IProperty, IEnum
    /**
     * @return boolean
     */
-   public function isVisible ( )
+   public function isVisible()
    {
-      
+
    }
 
-}
\ No newline at end of file
+}
diff --git a/olap/Axis.php b/olap/Axis.php
index ac5c3c9..5aec692 100644
--- a/olap/Axis.php
+++ b/olap/Axis.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -42,37 +42,37 @@ class Axis implements IAxis
    const SECTIONS = 4;
 
 
-   public function __construct ( $ordinal )
+   public function __construct( $ordinal )
    {
       $this->ordinal = $ordinal;
    }
 
 
-   public function axisOrdinal ( )
+   public function axisOrdinal()
    {
       return $this->ordinal;
    }
 
 
-   public function getCaption ( )
+   public function getCaption()
    {
-      return $this->name ( );
+      return $this->name();
    }
 
 
-   public function isFilter ( )
+   public function isFilter()
    {
-      return ( $this->ordinal == Axis::FILTER ) ? true : false;
+      return ($this->ordinal == Axis::FILTER) ? true : false;
    }
 
 
-   public function name ( )
+   public function name()
    {
-      return 'AXIS('.$this->ordinal.')';
+      return 'AXIS(' . $this->ordinal . ')';
    }
 
-   static public function getEnum ( $constant )
+   static public function getEnum( $constant )
    {
-      return new Axis ( $constant );
+      return new Axis ($constant);
    }
-}
\ No newline at end of file
+}
diff --git a/olap/IAxis.php b/olap/IAxis.php
index 5f1bbf8..4909cc2 100644
--- a/olap/IAxis.php
+++ b/olap/IAxis.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,24 +33,24 @@ interface IAxis
    /**
     * @return int
     */
-   public function axisOrdinal ( );
+   public function axisOrdinal();
 
 
    /**
     * @return string
     */
-   public function getCaption ( );
+   public function getCaption();
 
 
    /**
     * @return boolean
     */
-   public function isFilter ( );
+   public function isFilter();
 
 
    /**
     * @return string
     */
-   public function name ( );
+   public function name();
 
-}
\ No newline at end of file
+}
diff --git a/olap/ICell.php b/olap/ICell.php
index a6769f8..74d981e 100644
--- a/olap/ICell.php
+++ b/olap/ICell.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,50 +33,50 @@ interface ICell
    /**
     * @return ICellSet
     */
-   public function getCellSet ( );
+   public function getCellSet();
 
    /**
     * @return array integer
     */
-   public function getCoordinateList ( );
+   public function getCoordinateList();
 
    /**
     * @return string
     */
-   public function getErrorText ( );
+   public function getErrorText();
 
    /**
     * @return string
     */
-   public function getFormattedValue ( );
+   public function getFormattedValue();
 
    /**
     * @return int
     */
-   public function getOrdinal ( );
+   public function getOrdinal();
 
    /**
     * @return object
     */
-   public function getPropertyValue ( $property );
+   public function getPropertyValue( $property );
 
    /**
     * @return object
     */
-   public function getValue ( );
+   public function getValue();
 
    /**
     * @return boolean
     */
-   public function isEmpty ( );
+   public function isEmpty();
 
    /**
     * @return boolean
     */
-   public function isError ( );
+   public function isError();
 
    /**
     * @return boolean
     */
-   public function isNull ( );
-}
\ No newline at end of file
+   public function isNull();
+}
diff --git a/olap/ICellSet.php b/olap/ICellSet.php
index c55c7d3..c507915 100644
--- a/olap/ICellSet.php
+++ b/olap/ICellSet.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -34,53 +34,53 @@ interface ICellSet
    /**
     * @return int
     */
-   public function coordinatesToOrdinal ( array $coordinates );
+   public function coordinatesToOrdinal( array $coordinates );
 
 
    /**
     * @return array ICellSetAxis
     */
-   public function getAxes ( );
+   public function getAxes();
 
 
    /**
     * @return ICell
     */
-   public function getCellByOrdinal ( $ordinal );
+   public function getCellByOrdinal( $ordinal );
 
 
    /**
     * @return ICell
     */
-   public function getCellByCoordinates ( array $coordinates );
+   public function getCellByCoordinates( array $coordinates );
 
 
    /**
     * @return ICell
     */
-   public function getCellByPositions ( array $positions );
+   public function getCellByPositions( array $positions );
 
 
    /**
     * @return ICellSetAxis
     */
-   public function getFilterAxis ( );
+   public function getFilterAxis();
 
 
    /**
     * @return ICellSetMetaData
     */
-   public function getMetaData ( );
+   public function getMetaData();
 
 
    /**
     * @return IOlapStatement
     */
-   public function getStatement ( );
+   public function getStatement();
 
 
    /**
     * @return array int
     */
-   public function ordinalToCoordinates ( $ordinal );
+   public function ordinalToCoordinates( $ordinal );
 }
diff --git a/olap/ICellSetAxis.php b/olap/ICellSetAxis.php
index 576d20c..f4e4950 100644
--- a/olap/ICellSetAxis.php
+++ b/olap/ICellSetAxis.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -34,30 +34,30 @@ interface ICellSetAxis
    /**
     * @return ICellSetAxisMetaData
     */
-   public function getAxisMetaData ( );
+   public function getAxisMetaData();
 
 
    /**
     * @return IAxis
     */
-   public function getAxisOrdinal ( );
+   public function getAxisOrdinal();
 
 
    /**
     * @return ICellSet
     */
-   public function getCellSet ( );
+   public function getCellSet();
 
 
    /**
     * @return int
     */
-   public function getPositionCount ( );
+   public function getPositionCount();
 
 
    /**
     * @return array IPosition
     */
-   public function getPositions ( );
+   public function getPositions();
 
-}
\ No newline at end of file
+}
diff --git a/olap/ICellSetAxisMetaData.php b/olap/ICellSetAxisMetaData.php
index 629ebfe..5c9ff9d 100644
--- a/olap/ICellSetAxisMetaData.php
+++ b/olap/ICellSetAxisMetaData.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -34,18 +34,18 @@ interface ICellSetAxisMetaData
    /**
     * @return array IAxis
     */
-   public function getAxisOrdinal ( );
+   public function getAxisOrdinal();
 
 
    /**
     * @return array IHierarchy
     */
-   public function getHierarchies ( );
+   public function getHierarchies();
 
 
    /**
     * @return array IProperty
     */
-   public function getProperties ( );
+   public function getProperties();
 
-}
\ No newline at end of file
+}
diff --git a/olap/ICellSetMetaData.php b/olap/ICellSetMetaData.php
index f3fea59..e6b4103 100644
--- a/olap/ICellSetMetaData.php
+++ b/olap/ICellSetMetaData.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -34,23 +34,23 @@ interface ICellSetMetaData
    /**
     * @return array ICellSetAxisMetaData
     */
-   public function getAxesMetaData ( );
+   public function getAxesMetaData();
 
 
    /**
     * @return array IProperty
     */
-   public function getCellProperties ( );
+   public function getCellProperties();
 
 
    /**
     * @return ICube
     */
-   public function getCube ( );
+   public function getCube();
 
 
    /**
     * @return ICellSetAxisMetaData
     */
-   public function getFilterAxisMetaData ( );
-}
\ No newline at end of file
+   public function getFilterAxisMetaData();
+}
diff --git a/olap/IOLAPConnection.php b/olap/IOLAPConnection.php
index 43b05d7..f0a5481 100644
--- a/olap/IOLAPConnection.php
+++ b/olap/IOLAPConnection.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -34,37 +34,37 @@ interface IOLAPConnection
    /*
     * @return array ICatalog
     */
-   public function getCatalogs ( );
+   public function getCatalogs();
 
 
    /*
     * @return string
     */
-   public function getCatalog ( );
+   public function getCatalog();
 
-   public function getDataSourceInfo ( );
+   public function getDataSourceInfo();
 
-   public function getURI ( );
+   public function getURI();
 
 
    /*
     * @return array IOlapDatabaseMetaData
     */
-   public function getMetaData ( );
+   public function getMetaData();
 
 
    /*
     * @return ISchema
     */
-   public function getSchema ( );
+   public function getSchema();
 
 
    /*
     * @param string $catalog
     */
-   public function setCatalog ( $catalog );
+   public function setCatalog( $catalog );
 
-   public function setDataSourceInfo ( $dataSourceInfo );
+   public function setDataSourceInfo( $dataSourceInfo );
 
    public function setURI( $uri );
 }
diff --git a/olap/IOLAPDatabaseMetaData.php b/olap/IOLAPDatabaseMetaData.php
index 75b6bd1..51462a8 100644
--- a/olap/IOLAPDatabaseMetaData.php
+++ b/olap/IOLAPDatabaseMetaData.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -48,10 +48,10 @@ interface IOLAPDatabaseMetaData
    public function getSupportedCellSetListenerGranularities();
 
    public function getActions(
-      $catalog,
-      $schemaPattern,
-      $cubeNamePattern,
-      $actionNamePattern );
+      $catalog = null,
+      $schemaPattern = null,
+      $cubeNamePattern = null,
+      $actionNamePattern = null );
 
    public function getDatasources();
 
@@ -62,66 +62,66 @@ interface IOLAPDatabaseMetaData
       $propertyNamePattern );
 
    public function getProperties(
-      $catalog,
-      $schemaPattern,
-      $cubeNamePattern,
-      $dimensionUniqueName,
-      $hierarchyUniqueName,
-      $levelUniqueName,
-      $memberUniqueName,
-      $propertyNamePattern );
+      $catalog = null,
+      $schemaPattern = null,
+      $cubeNamePattern = null,
+      $dimensionUniqueName = null,
+      $hierarchyUniqueName = null,
+      $levelUniqueName = null,
+      $memberUniqueName = null,
+      $propertyNamePattern = null );
 
    public function getMdxKeywords();
 
    public function getCubes(
-      $catalog,
-      $schemaPattern,
-      $cubeNamePattern );
+      $catalog = null,
+      $schemaPattern = null,
+      $cubeNamePattern = null );
 
    public function getDimensions(
-      $catalog,
-      $schemaPattern,
-      $cubeNamePattern,
-      $dimensionNamePattern );
+      $catalog = null,
+      $schemaPattern = null,
+      $cubeNamePattern = null,
+      $dimensionNamePattern = null );
 
    public function getOlapFunctions(
-      $functionNamePattern );
+      $functionNamePattern = null );
 
    public function getHierarchies(
-      $catalog,
-      $schemaPattern,
-      $cubeNamePattern,
-      $dimensionUniqueName,
-      $hierarchyNamePattern );
+      $catalog = null,
+      $schemaPattern = null,
+      $cubeNamePattern = null,
+      $dimensionUniqueName = null,
+      $hierarchyNamePattern = null );
 
    public function getLevels(
-      $catalog,
-      $schemaPattern,
-      $cubeNamePattern,
-      $dimensionUniqueName,
-      $hierarchyUniqueName,
-      $levelNamePattern );
+      $catalog = null,
+      $schemaPattern = null,
+      $cubeNamePattern = null,
+      $dimensionUniqueName = null,
+      $hierarchyUniqueName = null,
+      $levelNamePattern = null );
 
    public function getMeasures(
-      $catalog,
-      $schemaPattern,
-      $cubeNamePattern,
-      $measureNamePattern,
-      $measureUniqueName );
+      $catalog = null,
+      $schemaPattern = null,
+      $cubeNamePattern = null,
+      $measureNamePattern = null,
+      $measureUniqueName = null );
 
    public function getMembers(
-      $catalog,
-      $schemaPattern,
-      $cubeNamePattern,
-      $dimensionUniqueName,
-      $hierarchyUniqueName,
-      $levelUniqueName,
-      $memberUniqueName,
-      array $treeOps );
+      $catalog = null,
+      $schemaPattern = null,
+      $cubeNamePattern = null,
+      $dimensionUniqueName = null,
+      $hierarchyUniqueName = null,
+      $levelUniqueName = null,
+      $memberUniqueName = null,
+      array $treeOps = array() );
 
    public function getSets(
-      $catalog,
-      $schemaPattern,
-      $cubeNamePattern,
-      $setNamePattern );
-}
\ No newline at end of file
+      $catalog = null,
+      $schemaPattern = null,
+      $cubeNamePattern = null,
+      $setNamePattern = null );
+}
diff --git a/olap/IOLAPStatement.php b/olap/IOLAPStatement.php
index 5be2cd8..784087c 100644
--- a/olap/IOLAPStatement.php
+++ b/olap/IOLAPStatement.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,9 +33,10 @@ interface IOLAPStatement
 {
 
    public function __construct( IOLAPConnection $connection );
+
    /**
     * @return string ICellSet
     */
-   public function executeOlapQuery ( $mdx );
-   
+   public function executeOlapQuery( $mdx );
+
 }
diff --git a/olap/IPosition.php b/olap/IPosition.php
index f25fdd6..a19bd8e 100644
--- a/olap/IPosition.php
+++ b/olap/IPosition.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -36,12 +36,12 @@ interface IPosition
    /**
     * @return array IMember
     */
-   public function getMembers ( );
+   public function getMembers();
 
 
    /**
     * @return int
     */
-   public function getOrdinal ( );
+   public function getOrdinal();
 
-}
\ No newline at end of file
+}
diff --git a/olap/OLAPException.php b/olap/OLAPException.php
index 4fabc88..f8abb5d 100644
--- a/olap/OLAPException.php
+++ b/olap/OLAPException.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -31,5 +31,5 @@ namespace OLAP4PHP\OLAP;
  */
 class OLAPException extends \Exception
 {
-   
-}
\ No newline at end of file
+
+}
diff --git a/provider/caching/IXMLACache.php b/provider/caching/IXMLACache.php
index 0a2eaaa..108be1d 100644
--- a/provider/caching/IXMLACache.php
+++ b/provider/caching/IXMLACache.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -27,9 +27,9 @@ namespace OLAP4PHP\Provider\Caching;
 
 /**
  * Provides an interface to interacting with caching drivers within olap4php.
- * 
+ *
  * All caching drivers must implement this interface
- * 
+ *
  */
 interface IXMLACache
 {
@@ -38,13 +38,13 @@ interface IXMLACache
     * parameter can be used to control when the value is considered expired in the cache.
     */
    public function set( $key, $value, $expiration = null );
-   
+
    /**
     * Returns the item that was stored in the cache under the given key. This
     * returns the value stored in the cache or FALSE otherwise
     */
    public function get( $key );
-   
+
    /**
     * Deletes the key from the cache. Once the item has been marked as deleted, it
     * can no longer be accessed in the cache
diff --git a/provider/caching/drivers/MCache.php b/provider/caching/drivers/MCache.php
index 8328277..2ed8866 100644
--- a/provider/caching/drivers/MCache.php
+++ b/provider/caching/drivers/MCache.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,7 +33,7 @@ use OLAP4PHP\Provider\Caching\IXMLACache;
  * @author paulb
  */
 class MCache extends \Memcached implements IXMLACache
-{   
+{
    /**
     * Will store the value within the cache under the specified key. The expiration
     * parameter can be used to control when the value is considered expired in the cache.
@@ -42,7 +42,7 @@ class MCache extends \Memcached implements IXMLACache
    {
       return parent::set( $key, $value, $expiration );
    }
-   
+
    /**
     * Returns the item that was stored in the cache under the given key. This
     * returns the value stored in the cache or FALSE otherwise
@@ -51,7 +51,7 @@ class MCache extends \Memcached implements IXMLACache
    {
       return parent::get( $key );
    }
-   
+
    /**
     * Deletes the key from the cache. Once the item has been marked as deleted, it
     * can no longer be accessed in the cache
@@ -60,7 +60,7 @@ class MCache extends \Memcached implements IXMLACache
    {
       return parent::delete( $key );
    }
-   
+
    //TODO:
    // Should expose a hasValue method which will get the value and return the getResult
    // Code() value. This will cache the value locally if found, since logically, the
diff --git a/provider/xmla/IXMLAMember.php b/provider/xmla/IXMLAMember.php
index 3841ffa..04af700 100644
--- a/provider/xmla/IXMLAMember.php
+++ b/provider/xmla/IXMLAMember.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -40,23 +40,23 @@ interface IXMLAMember extends IMember
    /**
     * @return ICube
     */
-   public function getCube ();
+   public function getCube();
 
 
    /**
     * @return IOLAPConnection
     */
-   public function getConnection ( );
+   public function getConnection();
 
 
    /**
     * @return ICatalog
     */
-   public function getCatalog ( );
+   public function getCatalog();
 
 
    /**
     * @return array
     */
-   public function getPropertyValueMap ( );
-}
\ No newline at end of file
+   public function getPropertyValueMap();
+}
diff --git a/provider/xmla/XMLACatalog.php b/provider/xmla/XMLACatalog.php
index e41c788..997e7f1 100644
--- a/provider/xmla/XMLACatalog.php
+++ b/provider/xmla/XMLACatalog.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -49,15 +49,15 @@ class XMLACatalog implements ICatalog
     * Constructor
     *
     * @param XMLADatabaseMetaData $databaseMetaData
-    * @param string $name
+    * @param string               $name
     */
-   public function __construct ( XMLADatabaseMetadata $databaseMetaData, $name )
+   public function __construct( XMLADatabaseMetadata $databaseMetaData, $name )
    {
-      assert ( $databaseMetaData != NULL );
-      assert ( $name != NULL );
+      assert( $databaseMetaData != NULL );
+      assert( $name != NULL );
 
       $this->databaseMetadata = $databaseMetaData;
-      $this->name = $name;
+      $this->name             = $name;
 
       // From olap4j:
       //   Fetching the schemas is a tricky part. There are no XMLA requests to
@@ -70,14 +70,14 @@ class XMLACatalog implements ICatalog
       //   
       // Lazy loading again
       $this->schemas = new LazyMetadataList(
-              new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_CUBES ),
-              new XMLAConnectionContext( $this->databaseMetadata->getConnection(), $this->databaseMetadata, $this, NULL, NULL, NULL, NULL, NULL ),
-              new XMLACatalogSchemaHandler( $this->name ) );
+         new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_CUBES),
+         new XMLAConnectionContext($this->databaseMetadata->getConnection(), $this->databaseMetadata, $this, NULL, NULL, NULL, NULL, NULL),
+         new XMLACatalogSchemaHandler($this->name));
    }
 
    public function hashCode()
    {
-      if ( empty( $this->hash ) )
+      if ( empty($this->hash) )
       {
          $this->hash = XMLAUtil::javaStringHashCode( $this->name );
       }
@@ -99,7 +99,7 @@ class XMLACatalog implements ICatalog
    /**
     * @return XMLADatabaseMetaData
     */
-   public function getMetaData ( )
+   public function getMetaData()
    {
       return $this->databaseMetadata;
    }
@@ -108,7 +108,7 @@ class XMLACatalog implements ICatalog
    /**
     * @return string
     */
-   public function getName ( )
+   public function getName()
    {
       return $this->name;
    }
@@ -117,8 +117,8 @@ class XMLACatalog implements ICatalog
    /**
     * @return LaztMetadataList
     */
-   public function getSchemas ( )
+   public function getSchemas()
    {
       return $this->schemas;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLACell.php b/provider/xmla/XMLACell.php
index ff5647d..8cc5617 100644
--- a/provider/xmla/XMLACell.php
+++ b/provider/xmla/XMLACell.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -45,75 +45,83 @@ class XMLACell implements ICell
     * Construtor
     *
     * @param XMLACellSet $cellset
-    * @param integer $ordinal
-    * @param mixed $value
-    * @param string $formattedValue
-    * @param array $propertyValues
+    * @param integer     $ordinal
+    * @param mixed       $value
+    * @param string      $formattedValue
+    * @param array       $propertyValues
     */
-   public function __construct (
-        XMLACellSet $cellSet,
-        $ordinal,
-        $value,
-        $formattedValue,
-        $propertyValues )
-    {
-       $this->cellSet = $cellSet;
-       $this->formattedValue = $formattedValue;
-       $this->ordinal = $ordinal;
-       $this->propertyValues = $propertyValues;
-       $this->value = $value;
-    }
-
-
-   public function getCellSet ( )
+   public function __construct(
+      XMLACellSet $cellSet,
+      $ordinal,
+      $value,
+      $formattedValue,
+      $propertyValues )
+   {
+      $this->cellSet        = $cellSet;
+      $this->formattedValue = $formattedValue;
+      $this->ordinal        = $ordinal;
+      $this->propertyValues = $propertyValues;
+      $this->value          = $value;
+   }
+
+
+   public function getCellSet()
    {
       return $this->cellSet;
    }
 
-   public function getCoordinateList ( )
+   public function getCoordinateList()
    {
-      return $this->cellSet->ordinalToCoordinates ( $this->ordinal );
+      return $this->cellSet->ordinalToCoordinates( $this->ordinal );
    }
 
-   public function getErrorText ( )
+   public function getErrorText()
    {
       return null;
    }
 
-   public function getFormattedValue ( )
+   public function getFormattedValue()
    {
       return $this->formattedValue;
    }
 
-   public function getOrdinal ( )
+   public function getOrdinal()
    {
       return $this->ordinal;
    }
 
-   public function getPropertyValue ( $property )
+   public function getPropertyValue( $property )
    {
-      if ( isset ( $this->propertyValues [ $property ] ) )
-         return $this->propertyValues [ $property ];
+      if ( isset ($this->propertyValues [$property]) )
+      {
+         return $this->propertyValues [$property];
+      }
+
+      return null;
    }
 
-   public function getValue ( )
+   public function getValue()
    {
       return $this->value;
    }
 
-   public function isEmpty ( )
+   public function isEmpty()
    {
-      return $this->isNull ( );
+      return $this->isNull();
    }
 
-   public function isError ( )
+   public function isError()
    {
       return false;
    }
 
-   public function isNull ( )
+   public function isNull()
    {
       if ( $this->value === null )
+      {
          return true;
+      }
+
+      return false;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLACellProperty.php b/provider/xmla/XMLACellProperty.php
index 94a334e..3b8b26a 100644
--- a/provider/xmla/XMLACellProperty.php
+++ b/provider/xmla/XMLACellProperty.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -41,46 +41,46 @@ class XMLACellProperty implements IProperty, INamed
    private $tag;
    private $propertyName;
 
-   public function __construct (
-        $tag,
-        $propertyName )
+   public function __construct(
+      $tag,
+      $propertyName )
    {
-      $this->tag = $tag;
+      $this->tag          = $tag;
       $this->propertyName = $propertyName;
    }
 
-   public function getDatatype ( )
+   public function getDatatype()
    {
-      return DataType::getEnum ( DataType::STRING );
+      return DataType::getEnum( DataType::STRING );
    }
 
-   public function getType ( )
+   public function getType()
    {
-      return PropertyType::getEnum ( PropertyType::CELL );
+      return PropertyType::getEnum( PropertyType::CELL );
    }
 
-   public function getName ( )
+   public function getName()
    {
       return $this->propertyName;
    }
 
-   public function getUniqueName ( )
+   public function getUniqueName()
    {
       return $this->propertyName;
    }
 
-   public function getCaption ( )
+   public function getCaption()
    {
       return $this->propertyName;
    }
 
-   public function getDescription ( )
+   public function getDescription()
    {
       return "";
    }
 
-   public function getContentType ( )
+   public function getContentType()
    {
-      return PropertyContentType::getEnum ( PropertyContentType::REGULAR );
+      return PropertyContentType::getEnum( PropertyContentType::REGULAR );
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLACellSet.php b/provider/xmla/XMLACellSet.php
index e99e734..fde3d49 100644
--- a/provider/xmla/XMLACellSet.php
+++ b/provider/xmla/XMLACellSet.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -29,7 +29,7 @@ namespace OLAP4PHP\Provider\XMLA;
 use OLAP4PHP\OLAP\ICell;
 use OLAP4PHP\OLAP\ICellSet;
 use OLAP4PHP\OLAP\IOLAPStatement;
-use SeeWind\OLAP\MetaData\ICube;
+use OLAP4PHP\Metadata\ICube;
 
 // Classes / Objects
 use \Exception;
@@ -73,45 +73,49 @@ class XMLACellSet implements ICellSet
    private $metaData;
 
    /**
-    *@var XMLAStatement  Stores statement (query) associated with the cell set (result)
+    * @var XMLAStatement  Stores statement (query) associated with the cell set (result)
     */
    private $statement;
 
    /**
     * @var array
     */
-   static private $standardProperties = array ( 'UName', 'Caption', 'LName', 'LNum', 'DisplayInfo' );
+   static private $standardProperties = array( 'UName', 'Caption', 'LName', 'LNum', 'DisplayInfo' );
 
    /**
     * @brief XMLA CellSet implementation
+    *
     * @param $statement
+    *
     * @throws OLAPException
     */
-   public function __construct ( IOLAPStatement $statement )
+   public function __construct( IOLAPStatement $statement )
    {
-      if ( ! $statement instanceof XMLAStatement )
-         throw new OLAPException ( 'Unexpected OLAP statement implementation.' );
+      if ( !$statement instanceof XMLAStatement )
+      {
+         throw new OLAPException ('Unexpected OLAP statement implementation.');
+      }
 
-      $this->cellMap = array ( );
+      $this->cellMap   = array();
       $this->statement = $statement;
    }
 
 
    /*
-    * @param DOMDocument $response Response document from XMLA execute request. The document is used to
-    *  populate the set object.
-    *
-    * @throws OLAPException
-    */
-   public function populate ( DOMDocument $response )
+   * @param DOMDocument $response Response document from XMLA execute request. The document is used to
+   *  populate the set object.
+   *
+   * @throws OLAPException
+   */
+   public function populate( DOMDocument $response )
    {
       $envelope = $response->documentElement;
 
-      assert ( $envelope->localName == 'Envelope' );
-      assert ( $envelope->namespaceURI == XMLAUtil::SOAP_NS );
+      assert( $envelope->localName == 'Envelope' );
+      assert( $envelope->namespaceURI == XMLAUtil::SOAP_NS );
 
-      $body  = XMLAUtil::findChild ( $envelope, XMLAUtil::SOAP_NS, 'Body' );
-      $fault = XMLAUtil::findChild ( $body, XMLAUtil::SOAP_NS, 'Fault' );
+      $body  = XMLAUtil::findChild( $envelope, XMLAUtil::SOAP_NS, 'Body' );
+      $fault = XMLAUtil::findChild( $body, XMLAUtil::SOAP_NS, 'Fault' );
 
       // Process all faults
       //
@@ -123,13 +127,13 @@ class XMLACellSet implements ICellSet
             $log->error( __CLASS__, "Query Generated SOAP Fault" );
             $log->debug( __CLASS__, $response->saveXML() );
          }
-         throw new OLAPException ( 'Query Fault: ' . $fault->textContent ); // TODO add pretty exception
+         throw new OLAPException ('Query Fault: ' . $fault->textContent); // TODO add pretty exception
       }
 
       // Process execute response
       //
-      $executeResponse = XMLAUtil::findChild ( $body, XMLAUtil::XMLA_NS, 'ExecuteResponse' );
-      $returnElement   = XMLAUtil::findChild ( $executeResponse, XMLAUtil::XMLA_NS, 'return' );
+      $executeResponse = XMLAUtil::findChild( $body, XMLAUtil::XMLA_NS, 'ExecuteResponse' );
+      $returnElement   = XMLAUtil::findChild( $executeResponse, XMLAUtil::XMLA_NS, 'return' );
       // <root> has children
       //   <xsd:schema/>
       //   <OlapInfo>
@@ -152,49 +156,49 @@ class XMLACellSet implements ICellSet
       //      <Cell/>
       //      ...
       //   </CellData>
-      $root = XMLAUtil::findChild ( $returnElement, XMLAUtil::MDDATASET_NS, 'root' );
+      $root = XMLAUtil::findChild( $returnElement, XMLAUtil::MDDATASET_NS, 'root' );
 
       // Process response meta data
       //
-      $this->metaData = $this->createMetaData ( $root );
+      $this->metaData = $this->createMetaData( $root );
 
-      $axesNode = XMLAUtil::findChild ( $root, XMLAUtil::MDDATASET_NS, 'Axes' );
+      $axesNode = XMLAUtil::findChild( $root, XMLAUtil::MDDATASET_NS, 'Axes' );
 
       // First pass, gather up a list of member unique names to fetch
       // all at once.
       //
       //final MetadataReader metadataReader = metaData.cube.getMetadataReader();
-      $memberMap = array ( );
-      $uniqueNames = array ( );
+      $memberMap   = array();
+      $uniqueNames = array();
 
-      foreach ( XMLAUtil::findChildren ( $axesNode, XMLAUtil::MDDATASET_NS, 'Axis' ) as $axisNode )
+      foreach ( XMLAUtil::findChildren( $axesNode, XMLAUtil::MDDATASET_NS, 'Axis' ) as $axisNode )
       {
-         $tuplesNode = XMLAUtil::findChild ( $axisNode, XMLAUtil::MDDATASET_NS, 'Tuples' );
+         $tuplesNode = XMLAUtil::findChild( $axisNode, XMLAUtil::MDDATASET_NS, 'Tuples' );
 
-         foreach ( XMLAUtil::findChildren ( $tuplesNode, XMLAUtil::MDDATASET_NS, 'Tuple' ) as $tupleNode )
+         foreach ( XMLAUtil::findChildren( $tuplesNode, XMLAUtil::MDDATASET_NS, 'Tuple' ) as $tupleNode )
          {
-            foreach ( XMLAUtil::findChildren ( $tupleNode, XMLAUtil::MDDATASET_NS, 'Member' ) as $memberNode )
+            foreach ( XMLAUtil::findChildren( $tupleNode, XMLAUtil::MDDATASET_NS, 'Member' ) as $memberNode )
             {
-               $uniqueNames [] = XMLAUtil::stringElement ( $memberNode, 'UName' );
+               $uniqueNames [] = XMLAUtil::stringElement( $memberNode, 'UName' );
             }
          }
       }
 
       // Fetch all members on all axes. Hopefully it can all be done in one
       // round trip, or they are in cache already.
-      $metadataReader = $this->metaData->getCube ( )->getMetadataReader ( );
-      $metadataReader->lookupMembersByUniqueName ( $uniqueNames, $memberMap );
+      $metadataReader = $this->metaData->getCube()->getMetadataReader();
+      $metadataReader->lookupMembersByUniqueName( $uniqueNames, $memberMap );
 
       // Second pass, populate the axis.
-      foreach ( XMLAUtil::findChildren ( $axesNode, XMLAUtil::MDDATASET_NS, 'Axis' ) as $axisNode )
+      foreach ( XMLAUtil::findChildren( $axesNode, XMLAUtil::MDDATASET_NS, 'Axis' ) as $axisNode )
       {
-         $axisName      = $axisNode->getAttribute ( 'name' );
-         $axis          = $this->lookupAxis ( $axisName );
-         $positions     = array ( );
-         $cellSetAxis   = new XMLACellSetAxis ( $this, $axis, $positions );
+         $axisName      = $axisNode->getAttribute( 'name' );
+         $axis          = $this->lookupAxis( $axisName );
+         $positions     = array();
+         $cellSetAxis   = new XMLACellSetAxis ($this, $axis, $positions);
          $axisPositions = $cellSetAxis->getPositions();
 
-         if ( $axis->isFilter ( ) ) // The filter axis is special
+         if ( $axis->isFilter() ) // The filter axis is special
          {
             $this->filterAxis = $cellSetAxis;
          }
@@ -203,53 +207,55 @@ class XMLACellSet implements ICellSet
             $this->axisList [] = $cellSetAxis;
          }
 
-         $tuplesNode = XMLAUtil::findChild ( $axisNode, XMLAUtil::MDDATASET_NS, 'Tuples' );
+         $tuplesNode = XMLAUtil::findChild( $axisNode, XMLAUtil::MDDATASET_NS, 'Tuples' );
 
-         foreach ( XMLAUtil::findChildren ( $tuplesNode, XMLAUtil::MDDATASET_NS, 'Tuple' ) as $tupleNode )
+         foreach ( XMLAUtil::findChildren( $tuplesNode, XMLAUtil::MDDATASET_NS, 'Tuple' ) as $tupleNode )
          {
-            $members = array ( );
+            $members = array();
 
-            foreach ( XMLAUtil::findChildren ( $tupleNode, XMLAUtil::MDDATASET_NS, 'Member' ) as $memberNode )
+            foreach ( XMLAUtil::findChildren( $tupleNode, XMLAUtil::MDDATASET_NS, 'Member' ) as $memberNode )
             {
-               $hierarchyName = $memberNode->getAttribute ( 'Hierarchy' );
-               $uname         = XMLAUtil::stringElement ( $memberNode, 'UName' );
-               $member        = ( isset ( $memberMap [ $uname ] ) ) ? $memberMap [ $uname ] : null;
+               $hierarchyName = $memberNode->getAttribute( 'Hierarchy' );
+               $uname         = XMLAUtil::stringElement( $memberNode, 'UName' );
+               $member        = (isset ($memberMap [$uname])) ? $memberMap [$uname] : null;
 
                if ( $member == null ) // Is the member not defined in the cube ?
                {
-                  $caption   = XMLAUtil::stringElement ( $memberNode, 'Caption' );
+                  $caption   = XMLAUtil::stringElement( $memberNode, 'Caption' );
                   $lnum      = XMLAUtil::integerElement( $memberNode, 'LNum' ); // should we int type check this
-                  $hierarchy = $this->lookupHierarchy ( $this->metaData->getCube ( ), $hierarchyName );
-                  $level     = $hierarchy->getLevels ( )->get ( $lnum );
+                  $hierarchy = $this->lookupHierarchy( $this->metaData->getCube(), $hierarchyName );
+                  $level     = $hierarchy->getLevels()->get( $lnum );
 
                   $member = new XMLAMemberUndefined (
-                      $this, $level, $hierarchy, $lnum, $caption, $uname);
-                  
+                     $this, $level, $hierarchy, $lnum, $caption, $uname);
+
                }
 
-               $propertyValues = array ( );
-               foreach ( XMLAUtil::childElements ( $memberNode ) as $childNode )
+               $propertyValues = array();
+               foreach ( XMLAUtil::childElements( $memberNode ) as $childNode )
                {
                   $property = $cellSetAxis
-                                 ->getAxisMetaData ()
-                                    ->lookupProperty (
-                                       $hierarchyName,
-                                       $childNode->localName );
+                     ->getAxisMetaData()
+                     ->lookupProperty(
+                     $hierarchyName,
+                     $childNode->localName );
 
                   if ( $property != null )
                   {
-                      $value = $childNode->textContent;
-                      $propertyValues [ $property ] = $value;
+                     $value                                       = $childNode->textContent;
+                     $propertyValues [$property->getUniqueName()] = $value;
                   }
                }
 
-               if ( count ( $propertyValues ) )
-                  $member = new XMLAPositionMember ( $member, $propertyValues );
+               if ( count( $propertyValues ) )
+               {
+                  $member = new XMLAPositionMember ($member, $propertyValues);
+               }
 
                $members [] = $member;
             }
 
-            $axisPositions[] = new XMLAPosition ( $members, count ( $axisPositions ) );
+            $axisPositions[] = new XMLAPosition ($members, count( $axisPositions ));
          }
       }
 
@@ -259,91 +265,100 @@ class XMLACellSet implements ICellSet
       if ( $this->filterAxis == null )
       {
          $this->filterAxis =
-             new XMLACellSetAxis (
-                 $this,
-                 Axis::getEnum ( Axis::FILTER ),
-                 array ( new XMLAPosition ( array ( ), 0 ) ) );
+            new XMLACellSetAxis (
+               $this,
+               Axis::getEnum( Axis::FILTER ),
+               array( new XMLAPosition (array(), 0) ));
       }
 
-      $cellDataNode = XMLAUtil::findChild ( $root, XMLAUtil::MDDATASET_NS, 'CellData' );
-      foreach ( XMLAUtil::findChildren ( $cellDataNode, XMLAUtil::MDDATASET_NS, 'Cell' ) as $cell )
+      $cellDataNode = XMLAUtil::findChild( $root, XMLAUtil::MDDATASET_NS, 'CellData' );
+      foreach ( XMLAUtil::findChildren( $cellDataNode, XMLAUtil::MDDATASET_NS, 'Cell' ) as $cell )
       {
-         $propertyValues = array ( );
-         $cellOrdinal    = $cell->getAttribute ( 'CellOrdinal' );
-         $value          = $this->getTypedValue ( $cell );
-         $formattedValue = XMLAUtil::stringElement ( $cell, 'FmtValue' );
-         $formatString   = XMLAUtil::stringElement ( $cell, 'FormatString' );
+         $propertyValues = array();
+         $cellOrdinal    = $cell->getAttribute( 'CellOrdinal' );
+         $value          = $this->getTypedValue( $cell );
+         $formattedValue = XMLAUtil::stringElement( $cell, 'FmtValue' );
+         $formatString   = XMLAUtil::stringElement( $cell, 'FormatString' );
 
-         foreach ( XMLAUtil::childElements ( $cell ) as $element )
+         foreach ( XMLAUtil::childElements( $cell ) as $element )
          {
-            $property = $this->metaData->getCellPropertiesByTag ( $element->localName );
+            $property = $this->metaData->getCellPropertiesByTag( $element->localName );
             if ( $property != null )
             {
-               $this->propertyValues [ $property ] = $element->textContent;
+               $this->propertyValues [$property->getUniqueName()] = $element->textContent;
             }
          }
 
-         $this->cellMap [ $cellOrdinal ] =
+         $this->cellMap [$cellOrdinal] =
             new XMLACell (
                $this,
                $cellOrdinal,
                $value,
                $formattedValue,
-               $propertyValues );
+               $propertyValues);
       }
    }
 
 
    /**
     * @param DOMElement $cell
-    * 
+    *
     * @throws OLAPException
     */
-   private function getTypedValue ( DOMElement $cell )
+   private function getTypedValue( DOMElement $cell )
    {
-      $element = XMLAUtil::findChild ( $cell, XMLAUtil::MDDATASET_NS, 'Value' );
+      $element = XMLAUtil::findChild( $cell, XMLAUtil::MDDATASET_NS, 'Value' );
       if ( $element == null ) // Cell is null.
+      {
          return null;
+      }
 
       // The object type is contained in xsi:type attribute.
-      $type = $element->attributes->getNamedItem ( 'xsi:type' );
+      $type = $element->attributes->getNamedItem( 'xsi:type' );
       try
       {
          switch ( $type )
          {
-            case 'xsd:int':     return XMLAUtil::integerElement ( $cell, 'Value' );
-            case 'xsd:double':  return XMLAUtil::doubleElement ( $cell, 'Value' );
-            case 'xsd:float':   return XMLAUtil::floatElement ( $cell, 'Value' );
-            case 'xsd:long':    return XMLAUtil::longElement ( $cell, 'Value' );
-            case 'xsd:boolean': return XMLAUtil::booleanElement ( $cell, 'Value' );
-            default:            return XMLAUtil::stringElement ( $cell, 'Value' );
+            case 'xsd:int':
+               return XMLAUtil::integerElement( $cell, 'Value' );
+            case 'xsd:double':
+               return XMLAUtil::doubleElement( $cell, 'Value' );
+            case 'xsd:float':
+               return XMLAUtil::floatElement( $cell, 'Value' );
+            case 'xsd:long':
+               return XMLAUtil::longElement( $cell, 'Value' );
+            case 'xsd:boolean':
+               return XMLAUtil::booleanElement( $cell, 'Value' );
+            default:
+               return XMLAUtil::stringElement( $cell, 'Value' );
          }
       }
       catch ( Exception $e )
       {
          throw new OLAPException (
-            'Error while casting a cell value to the correct php type for'.
-            ' its XSD type '.$type
+            'Error while casting a cell value to the correct php type for' .
+               ' its XSD type ' . $type
          );
       }
    }
 
-   
+
    /**
     *
     * @param array $coordinates
+    *
     * @return type
     * @throws InvalidArgumentException
-    * @throws OutOfBoundsException 
+    * @throws OutOfBoundsException
     */
-   public function coordinatesToOrdinal ( array $coordinates )
+   public function coordinatesToOrdinal( array $coordinates )
    {
-      $axes = $this->getAxes ( );
-      if ( count ( $coordinates ) != count ( $axes ) )
+      $axes = $this->getAxes();
+      if ( count( $coordinates ) != count( $axes ) )
       {
          throw new InvalidArgumentException (
-            'Coordinates have different dimension '.count ( $coordinates ).
-            ' than axes '.count ( $axes ) );
+            'Coordinates have different dimension ' . count( $coordinates ) .
+               ' than axes ' . count( $axes ));
       }
 
       $modulo  = 1;
@@ -352,164 +367,168 @@ class XMLACellSet implements ICellSet
 
       foreach ( $axes as $axis )
       {
-         $coordinate = $coordinates [ $k++ ];
-         if ( !is_integer ( $coordinate ) ||
-              $coordinate < 0 ||
-              $coordinate >= $axis->getPositionCount ( ) )
+         $coordinate = $coordinates [$k++];
+         if ( !is_integer( $coordinate ) ||
+            $coordinate < 0 ||
+            $coordinate >= $axis->getPositionCount()
+         )
          {
             throw new OutOfBoundsException (
-               "Coordinate ".$coordinate.
-               " of axis ".$k.
-               " is out of range (".
-               $this->getBoundsAsString ( ).")" );
+               "Coordinate " . $coordinate .
+                  " of axis " . $k .
+                  " is out of range (" .
+                  $this->getBoundsAsString() . ")");
          }
 
          $ordinal += $coordinate * $modulo;
-         $modulo *= $axis->getPositionCount ( );
+         $modulo *= $axis->getPositionCount();
       }
 
       return $ordinal;
    }
 
-   public function getAxes ( )
+   public function getAxes()
    {
       $copyAxisList = $this->axisList;
       return $copyAxisList;
    }
 
 
-   public function getCellByOrdinal ( $ordinal )
+   public function getCellByOrdinal( $ordinal )
    {
-      return $this->getCellInternal ( $ordinal );
+      return $this->getCellInternal( $ordinal );
    }
 
 
-   public function getCellByCoordinates ( array $coordinates )
+   public function getCellByCoordinates( array $coordinates )
    {
-      return $this->getCellInternal ( $this->coordinatesToOrdinal ( $coordinates ) );
+      return $this->getCellInternal( $this->coordinatesToOrdinal( $coordinates ) );
    }
 
 
-   public function getCellByPositions ( array $positions )
+   public function getCellByPositions( array $positions )
    {
-      if ( count ( $positions) != count ( $this->getAxes ( ) ) )
+      if ( count( $positions ) != count( $this->getAxes() ) )
       {
          throw new InvalidArgumentException (
-            "Cell coordinates should have dimension ".count ( $this->getAxes ( ) ) );
+            "Cell coordinates should have dimension " . count( $this->getAxes() ));
       }
 
-      $coords = array ( );
+      $coords = array();
       foreach ( $positions as $position )
       {
-         if ( ! $position instanceof XMLAPosition )
-            throw new InvalidArgumentException ( "Invalid position specified." );
+         if ( !$position instanceof XMLAPosition )
+         {
+            throw new InvalidArgumentException ("Invalid position specified.");
+         }
 
-         $coords [] = $position->getOrdinal ( );
+         $coords [] = $position->getOrdinal();
       }
-  
+
       return $this->getCellByCoordinates( $coords ); //getCell(coords);
    }
 
 
-   public function getFilterAxis ( )
+   public function getFilterAxis()
    {
       return $this->filterAxis;
    }
 
 
-   public function getMetaData ( )
+   public function getMetaData()
    {
       return $this->metaData;
    }
 
 
-   public function getStatement ( )
+   public function getStatement()
    {
       return $this->statement;
    }
 
 
-   public function ordinalToCoordinates ( $ordinal )
+   public function ordinalToCoordinates( $ordinal )
    {
-      $axes = $this->getAxes ( );
-      $list = array ( );
+      $axes   = $this->getAxes();
+      $list   = array();
       $modulo = 1;
 
       foreach ( $axes as $axis )
       {
          $prevModulo = $modulo;
-         $modulo *= $axis->getPositionCount ( );
+         $modulo *= $axis->getPositionCount();
          $list [] = (($ordinal % $modulo) / $prevModulo);
       }
 
       if ( $ordinal < 0 || $ordinal >= $modulo )
       {
          throw new OutOfBoundsException (
-             'Cell ordinal ('. ordinal .
-             ') lies outside CellSet bounds (' .
-             $this->getBoundsAsString ( ) . ')'
+            'Cell ordinal (' . $ordinal .
+               ') lies outside CellSet bounds (' .
+               $this->getBoundsAsString() . ')'
          );
       }
 
       return $list;
    }
-   
+
    public function getColumnAsArray( $columnOrdinal = 0 )
    {
       $result = array();
-      
+
       $axes = $this->getAxes();
       if ( count( $axes ) < 2 )
       {
          // query without columns, just return the 1 series
-         $axis = $axes [ 0 ];
+         $axis = $axes [0];
          for ( $x = 0; $x < $axis->getPositionCount(); $x++ )
          {
-            $cell = $this->getCellByCoordinates( array( $x ) );
+            $cell     = $this->getCellByCoordinates( array( $x ) );
             $result[] = $cell->getFormattedValue();
          }
       }
       else
       {
-         $rows = $axes[ AXIS::ROWS ];
-         $cols = $axes[ AXIS::COLUMNS ];
-         
+         $rows = $axes[AXIS::ROWS];
+         $cols = $axes[AXIS::COLUMNS];
+
          if ( $columnOrdinal >= $cols->getPositionCount() )
          {
-            throw new \OutOfBoundsException( "Column $columnOrdinal is out of bounds." );
+            throw new \OutOfBoundsException("Column $columnOrdinal is out of bounds.");
          }
-         
+
          for ( $x = 0; $x < $rows->getPositionCount(); $x++ )
          {
-            $cell = $this->getCellByCoordinates( array( $columnOrdinal, $x ) );
+            $cell     = $this->getCellByCoordinates( array( $columnOrdinal, $x ) );
             $result[] = $cell->getFormattedValue();
          }
       }
-      
+
       return $result;
    }
 
    /**
     * @param $root Response root element.
+    *
     * @throws OLAPException
     */
-   private function createMetaData ( DOMElement $root )
+   private function createMetaData( DOMElement $root )
    {
-      $olapInfo     = XMLAUtil::findChild ( $root, XMLAUtil::MDDATASET_NS, "OlapInfo" );
-      $cubeInfo     = XMLAUtil::findChild ( $olapInfo, XMLAUtil::MDDATASET_NS, "CubeInfo" );
-      $cubeNode     = XMLAUtil::findChild ( $cubeInfo, XMLAUtil::MDDATASET_NS, "Cube" );
-      $cubeNameNode = XMLAUtil::findChild ( $cubeNode, XMLAUtil::MDDATASET_NS, "CubeName" );
-      $cubeName     = XMLAUtil::gatherText ( $cubeNameNode );
+      $olapInfo     = XMLAUtil::findChild( $root, XMLAUtil::MDDATASET_NS, "OlapInfo" );
+      $cubeInfo     = XMLAUtil::findChild( $olapInfo, XMLAUtil::MDDATASET_NS, "CubeInfo" );
+      $cubeNode     = XMLAUtil::findChild( $cubeInfo, XMLAUtil::MDDATASET_NS, "Cube" );
+      $cubeNameNode = XMLAUtil::findChild( $cubeNode, XMLAUtil::MDDATASET_NS, "CubeName" );
+      $cubeName     = XMLAUtil::gatherText( $cubeNameNode );
 
       // REVIEW: If there are multiple cubes with the same name, we should
       // qualify by catalog and schema. Currently we just take the first.
       $cube =
-         $this->lookupCube (
-             $this->statement->getConnection ( )->getMetadata ( ),
-             $cubeName );
+         $this->lookupCube(
+            $this->statement->getConnection()->getMetadata(),
+            $cubeName );
       if ( $cube == null )
       {
-         throw new OLAPException ( "Internal error: cube '$cubeName' not found." );
+         throw new OLAPException ("Internal error: cube '$cubeName' not found.");
       }
       // REVIEW: We should not modify the connection. It is not safe, because
       // connection might be shared between multiple statements with different
@@ -519,79 +538,81 @@ class XMLACellSet implements ICellSet
       //   cellSet.getMetaData().getCube().getSchema().getCatalog().getName())
       //
       // before doing metadata queries.
-      $this->statement->getConnection ( )->setCatalog (
-         $cube->getSchema ( )->getCatalog ( )->getName ( ) );
-      
-      $axesInfo = XMLAUtil::findChild ( $olapInfo, XMLAUtil::MDDATASET_NS, "AxesInfo" );
-      $axisInfos = XMLAUtil::findChildren ( $axesInfo, XMLAUtil::MDDATASET_NS, "AxisInfo" );
-      $axisMetaDataList = array ( );
+      $this->statement->getConnection()->setCatalog(
+         $cube->getSchema()->getCatalog()->getName() );
+
+      $axesInfo           = XMLAUtil::findChild( $olapInfo, XMLAUtil::MDDATASET_NS, "AxesInfo" );
+      $axisInfos          = XMLAUtil::findChildren( $axesInfo, XMLAUtil::MDDATASET_NS, "AxisInfo" );
+      $axisMetaDataList   = array();
       $filterAxisMetaData = null;
 
       foreach ( $axisInfos as $axisInfo )
       {
-         $axisName = $axisInfo->getAttribute ( 'name' );
-         $axis = $this->lookupAxis ( $axisName );
-         $hierarchyInfos = XMLAUtil::findChildren ( $axisInfo, XMLAUtil::MDDATASET_NS, 'HierarchyInfo' );
-         $hierarchyList = array ( );
+         $axisName       = $axisInfo->getAttribute( 'name' );
+         $axis           = $this->lookupAxis( $axisName );
+         $hierarchyInfos = XMLAUtil::findChildren( $axisInfo, XMLAUtil::MDDATASET_NS, 'HierarchyInfo' );
+         $hierarchyList  = array();
 
          /*
-         <OlapInfo>
-             <AxesInfo>
-                 <AxisInfo name="Axis0">
-                     <HierarchyInfo name="Customers">
-                         <UName name="[Customers].[MEMBER_UNIQUE_NAME]"/>
-                         <Caption name="[Customers].[MEMBER_CAPTION]"/>
-                         <LName name="[Customers].[LEVEL_UNIQUE_NAME]"/>
-                         <LNum name="[Customers].[LEVEL_NUMBER]"/>
-                         <DisplayInfo name="[Customers].[DISPLAY_INFO]"/>
-                     </HierarchyInfo>
-                 </AxisInfo>
-                 ...
-             </AxesInfo>
-             <CellInfo>
-                 <Value name="VALUE"/>
-                 <FmtValue name="FORMATTED_VALUE"/>
-                 <FormatString name="FORMAT_STRING"/>
-             </CellInfo>
-         </OlapInfo>
-          */
-         $propertyList = array ( );
+        <OlapInfo>
+            <AxesInfo>
+                <AxisInfo name="Axis0">
+                    <HierarchyInfo name="Customers">
+                        <UName name="[Customers].[MEMBER_UNIQUE_NAME]"/>
+                        <Caption name="[Customers].[MEMBER_CAPTION]"/>
+                        <LName name="[Customers].[LEVEL_UNIQUE_NAME]"/>
+                        <LNum name="[Customers].[LEVEL_NUMBER]"/>
+                        <DisplayInfo name="[Customers].[DISPLAY_INFO]"/>
+                    </HierarchyInfo>
+                </AxisInfo>
+                ...
+            </AxesInfo>
+            <CellInfo>
+                <Value name="VALUE"/>
+                <FmtValue name="FORMATTED_VALUE"/>
+                <FormatString name="FORMAT_STRING"/>
+            </CellInfo>
+        </OlapInfo>
+         */
+         $propertyList = array();
          foreach ( $hierarchyInfos as $hierarchyInfo )
          {
-            $hierarchyName    = $hierarchyInfo->getAttribute ( 'name' );
-            $hierarchy        = $this->lookupHierarchy ( $cube, $hierarchyName );
+            $hierarchyName    = $hierarchyInfo->getAttribute( 'name' );
+            $hierarchy        = $this->lookupHierarchy( $cube, $hierarchyName );
             $hierarchyList [] = $hierarchy;
 
             foreach ( XMLAUtil::childElements( $hierarchyInfo ) as $childNode )
             {
-                 $tag = $childNode->localName;
-                 if ( in_array ( $tag, self::$standardProperties ) )
-                     continue;
-
-                 $propertyUniqueName = $childNode->getAttribute ( 'name' );
-                 $property =
-                     new XMLACellSetMemberProperty (
-                         $propertyUniqueName,
-                         $hierarchy,
-                         $tag 
-                     );
-
-                 $propertyList [] = $property;
-             }
+               $tag = $childNode->localName;
+               if ( in_array( $tag, self::$standardProperties ) )
+               {
+                  continue;
+               }
+
+               $propertyUniqueName = $childNode->getAttribute( 'name' );
+               $property           =
+                  new XMLACellSetMemberProperty (
+                     $propertyUniqueName,
+                     $hierarchy,
+                     $tag
+                  );
+
+               $propertyList [] = $property;
+            }
          }
 
          $axisMetaData =
             new XMLACellSetAxisMetaData (
-                 $this->statement->getConnection ( ),
-                 $axis,
-                 $hierarchyList,
-                 $propertyList 
+               $this->statement->getConnection(),
+               $axis,
+               $hierarchyList,
+               $propertyList
             );
 
-         if ( $axis->isFilter ( ) )
+         if ( $axis->isFilter() )
          {
             $filterAxisMetaData = $axisMetaData;
-         } 
+         }
          else
          {
             $axisMetaDataList [] = $axisMetaData;
@@ -601,48 +622,48 @@ class XMLACellSet implements ICellSet
       if ( $filterAxisMetaData == null )
       {
          $filterAxisMetaData =
-             new XMLACellSetAxisMetaData (
-               $this->statement->getConnection ( ),
-                 Axis::getEnum ( Axis::FILTER ),
-                 array ( ),
-                 array ( )
-             );
+            new XMLACellSetAxisMetaData (
+               $this->statement->getConnection(),
+               Axis::getEnum( Axis::FILTER ),
+               array(),
+               array()
+            );
       }
 
-      $cellInfo = XMLAUtil::findChild ( $olapInfo, XMLAUtil::MDDATASET_NS, 'CellInfo' );
-      $cellProperties = array ( );
+      $cellInfo       = XMLAUtil::findChild( $olapInfo, XMLAUtil::MDDATASET_NS, 'CellInfo' );
+      $cellProperties = array();
 
-      foreach ( XMLAUtil::childElements ( $cellInfo ) as $element )
+      foreach ( XMLAUtil::childElements( $cellInfo ) as $element )
       {
          $cellProperties [] =
-             new XMLACellProperty (
+            new XMLACellProperty (
                $element->localName,
-               $element->getAttribute ( 'name' ) );
+               $element->getAttribute( 'name' ));
       }
 
       return
          new XMLACellSetMetaData (
-                $this->statement,
-                $cube,
-                $filterAxisMetaData,
-                $axisMetaDataList,
-                $cellProperties );
+            $this->statement,
+            $cube,
+            $filterAxisMetaData,
+            $axisMetaDataList,
+            $cellProperties);
    }
 
 
-   private function lookupCube ( XMLADatabaseMetaData $databaseMetaData, $cubeName )
+   private function lookupCube( XMLADatabaseMetaData $databaseMetaData, $cubeName )
    {
       $catalog = $databaseMetaData->getCatalogObjects()->get( $this->statement->getConnection()->getCatalog() );
-      foreach ( $catalog->getSchemas ( ) as $schema )
+      foreach ( $catalog->getSchemas() as $schema )
       {
-         foreach ( $schema->getCubes ( ) as $cube )
+         foreach ( $schema->getCubes() as $cube )
          {
-            if ( $cubeName == $cube->getName ( ) )
+            if ( $cubeName == $cube->getName() )
             {
                return $cube;
             }
 
-            if ( $cubeName == '['.$cube->getName ( ).']' )
+            if ( $cubeName == '[' . $cube->getName() . ']' )
             {
                return $cube;
             }
@@ -654,10 +675,11 @@ class XMLACellSet implements ICellSet
 
 
    /**
-    * @param $axisName 
+    * @param $axisName
+    *
     * @throws OLAPException
     */
-   private function lookupAxis ( $axisName )
+   private function lookupAxis( $axisName )
    {
       if ( substr( $axisName, 0, 4 ) == 'Axis' )
       {
@@ -666,83 +688,85 @@ class XMLACellSet implements ICellSet
       }
       else
       {
-         return Axis::getEnum ( Axis::FILTER );
+         return Axis::getEnum( Axis::FILTER );
       }
-  
-      assert ( false ); // should never get here
+
+      assert( false ); // should never get here
    }
 
 
    /**
-     * Looks up a hierarchy in a cube with a given name or, failing that, a
-     * given unique name. Throws if not found.
-     *
-     * @param ICube $cube
-     * @param string $hierarchyName Name (or unique name) of hierarchy.
-     * @return IHierarchy
-     * @throws OLAPException on error
-     */
-    private function lookupHierarchy ( XMLACube $cube, $hierarchyName )
-    {
-       $hierarchy = $cube->getHierarchies ( )->get ( $hierarchyName );
-       if ( $hierarchy == null )
-       {
-          foreach ( $cube->getHierarchies ( ) as $hierarchy1 )
-          {
-             if ( $hierarchy1->getUniqueName ( ) == $hierarchyName )
-             {
-                $hierarchy = $hierarchy1;
-                break;
-             }
-          }
-
-          if ( $hierarchy == null )
-          {
-             throw new OLAPException (
-               "Internal error: hierarchy '".$hierarchyName.
-               "' not found in cube '".$cube->getName ( )."'"
-             );
-          }
-       }
-
-       return $hierarchy;
-    }
+    * Looks up a hierarchy in a cube with a given name or, failing that, a
+    * given unique name. Throws if not found.
+    *
+    * @param ICube  $cube
+    * @param string $hierarchyName Name (or unique name) of hierarchy.
+    *
+    * @return IHierarchy
+    * @throws OLAPException on error
+    */
+   private function lookupHierarchy( XMLACube $cube, $hierarchyName )
+   {
+      $hierarchy = $cube->getHierarchies()->get( $hierarchyName );
+      if ( $hierarchy == null )
+      {
+         foreach ( $cube->getHierarchies() as $hierarchy1 )
+         {
+            if ( $hierarchy1->getUniqueName() == $hierarchyName )
+            {
+               $hierarchy = $hierarchy1;
+               break;
+            }
+         }
+
+         if ( $hierarchy == null )
+         {
+            throw new OLAPException (
+               "Internal error: hierarchy '" . $hierarchyName .
+                  "' not found in cube '" . $cube->getName() . "'"
+            );
+         }
+      }
+
+      return $hierarchy;
+   }
 
 
    /**
-     * Returns a cell given its ordinal.
-     *
-     * @param integer $ordinal The cell's ordinal
-     * @return XMLACell
-     * @throws OutOfBoundsException if ordinal is not in range
-     */
-    private function getCellInternal ( $ordinal )
-    {
-       $cell = isset ( $this->cellMap [ $ordinal ] )
-          ? $this->cellMap [ $ordinal ]
-          : null;
-
-       if ( $cell == null )
-       {
-          if ( $ordinal < 0 || $ordinal >= $this->maxOrdinal ( ) )
-          {
-             throw new OutOfBoundsException ( );
-          }
-          else
-          {
-             // Cell is within bounds, but is not held in the cache because
-             // it has no value. Manufacture a cell with an empty value.
-             return new XMLACell (
-                $this,
-                $ordinal,
-                null,
-                '',
-                array ( )
-             );
-          }
-       }
-
-       return $cell;
+    * Returns a cell given its ordinal.
+    *
+    * @param integer $ordinal The cell's ordinal
+    *
+    * @return XMLACell
+    * @throws OutOfBoundsException if ordinal is not in range
+    */
+   private function getCellInternal( $ordinal )
+   {
+      $cell = isset ($this->cellMap [$ordinal])
+         ? $this->cellMap [$ordinal]
+         : null;
+
+      if ( $cell == null )
+      {
+         if ( $ordinal < 0 || $ordinal >= $this->maxOrdinal() )
+         {
+            throw new OutOfBoundsException ();
+         }
+         else
+         {
+            // Cell is within bounds, but is not held in the cache because
+            // it has no value. Manufacture a cell with an empty value.
+            return new XMLACell (
+               $this,
+               $ordinal,
+               null,
+               '',
+               array()
+            );
+         }
+      }
+
+      return $cell;
    }
 
 
@@ -752,12 +776,12 @@ class XMLACellSet implements ICellSet
     *
     * @return integer Ordinal of last cell in cell set.
     */
-   private function maxOrdinal ( )
+   private function maxOrdinal()
    {
       $modulo = 1;
       foreach ( $this->axisList as $cellSetAxis )
       {
-         $modulo *= $cellSetAxis->getPositionCount ( );
+         $modulo *= $cellSetAxis->getPositionCount();
       }
 
       return $modulo;
@@ -770,19 +794,21 @@ class XMLACellSet implements ICellSet
     *
     * @return description of cell set bounds
     */
-   private function getBoundsAsString ( )
+   private function getBoundsAsString()
    {
       $buf = null;
-      $k = 0;
+      $k   = 0;
 
-      foreach ( $this->getAxes ( ) as $axis )
+      foreach ( $this->getAxes() as $axis )
       {
          if ( $k++ > 0 )
+         {
             $buf .= ", ";
+         }
 
-         $buf .= $axis->getPositionCount ( );
+         $buf .= $axis->getPositionCount();
       }
 
       return $buf;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLACellSetAxis.php b/provider/xmla/XMLACellSetAxis.php
index 9f263df..e91e533 100644
--- a/provider/xmla/XMLACellSetAxis.php
+++ b/provider/xmla/XMLACellSetAxis.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -47,31 +47,31 @@ class XMLACellSetAxis extends ArrayObject implements ICellSetAxis
 
    /**
     * @param ICellSet $cellSet
-    * @param IAxis $axis
-    * @param array IPosition $positions
+    * @param IAxis    $axis
+    * @param          array IPosition $positions
     */
-   public function __construct ( XMLACellSet $cellSet, Axis $axis, array $positions )
+   public function __construct( XMLACellSet $cellSet, Axis $axis, array $positions )
    {
-      $this->cellSet       = $cellSet;
-      $this->axis          = $axis;
-      $this->positions     = new ArrayObject( $positions );
+      $this->cellSet   = $cellSet;
+      $this->axis      = $axis;
+      $this->positions = new ArrayObject($positions);
    }
 
 
    /**
     * @return XMLACellSetAxisMetaData
     */
-   public function getAxisMetaData ( )
+   public function getAxisMetaData()
    {
-      $cellSetMetaData = $this->cellSet->getMetaData ( );
-      if ( $this->axis->isFilter ( ) )
+      $cellSetMetaData = $this->cellSet->getMetaData();
+      if ( $this->axis->isFilter() )
       {
-         return $cellSetMetaData->getFilterAxisMetaData ( );
+         return $cellSetMetaData->getFilterAxisMetaData();
       }
       else
       {
-         $axesMetaData = $cellSetMetaData->getAxesMetaData ( );
-         return $axesMetaData [ $this->axis->axisOrdinal ( ) ];
+         $axesMetaData = $cellSetMetaData->getAxesMetaData();
+         return $axesMetaData [$this->axis->axisOrdinal()];
       }
    }
 
@@ -79,16 +79,16 @@ class XMLACellSetAxis extends ArrayObject implements ICellSetAxis
    /**
     * @return IAxis
     */
-   public function getAxisOrdinal ( )
+   public function getAxisOrdinal()
    {
-      return $this->axis->axisOrdinal ( );
+      return $this->axis->axisOrdinal();
    }
 
 
    /**
     * @return XMLACellSet
     */
-   public function getCellSet ( )
+   public function getCellSet()
    {
       return $this->cellSet;
    }
@@ -97,7 +97,7 @@ class XMLACellSetAxis extends ArrayObject implements ICellSetAxis
    /**
     * @return int
     */
-   public function getPositionCount ( )
+   public function getPositionCount()
    {
       return $this->getPositions()->count();
    }
@@ -106,7 +106,7 @@ class XMLACellSetAxis extends ArrayObject implements ICellSetAxis
    /**
     * @return array XMLAPosition
     */
-   public function getPositions ( )
+   public function getPositions()
    {
       return $this->positions;
    }
@@ -140,4 +140,4 @@ class XMLACellSetAxis extends ArrayObject implements ICellSetAxis
    {
       return $this->getPositions()->offsetUnset( $offset );
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLACellSetAxisMetaData.php b/provider/xmla/XMLACellSetAxisMetaData.php
index 641a0c6..bfdfc81 100644
--- a/provider/xmla/XMLACellSetAxisMetaData.php
+++ b/provider/xmla/XMLACellSetAxisMetaData.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -55,11 +55,11 @@ class XMLACellSetAxisMetaData implements ICellSetAxisMetaData
     * Constructor
     *
     * @param XMLAConnection $connection
-    * @param Axis $axis
-    * @param array hierarchies
-    * @param array $properties
+    * @param Axis           $axis
+    * @param                array hierarchies
+    * @param array          $properties
     */
-   public function __construct ( 
+   public function __construct(
       XMLAConnection $connection,
       Axis  $axis,
       array $hierarchies,
@@ -73,15 +73,15 @@ class XMLACellSetAxisMetaData implements ICellSetAxisMetaData
    /**
     * @return array IAxis
     */
-   public function getAxisOrdinal ( )
+   public function getAxisOrdinal()
    {
-      return $this->axis->axisOrdinal ( );
+      return $this->axis->axisOrdinal();
    }
 
    /**
     * @return array IHierarchy
     */
-   public function getHierarchies ( )
+   public function getHierarchies()
    {
       return $this->hierarchies;
    }
@@ -89,7 +89,7 @@ class XMLACellSetAxisMetaData implements ICellSetAxisMetaData
    /**
     * @return array IProperty
     */
-   public function getProperties ( )
+   public function getProperties()
    {
       return $this->hierarchies;
    }
@@ -102,7 +102,7 @@ class XMLACellSetAxisMetaData implements ICellSetAxisMetaData
     *
     * @return XMLACellSetMemberProperty
     */
-   public function lookupProperty ( $hierarchyName, $tag )
+   public function lookupProperty( $hierarchyName, $tag )
    {
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLACellSetMemberProperty.php b/provider/xmla/XMLACellSetMemberProperty.php
index 4e7f086..ca067a8 100644
--- a/provider/xmla/XMLACellSetMemberProperty.php
+++ b/provider/xmla/XMLACellSetMemberProperty.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -29,7 +29,6 @@ namespace OLAP4PHP\Provider\XMLA;
 use OLAP4PHP\Metadata\IProperty;
 
 
-
 /**
  * @brief XMLA Cell Set Member Property Implementation
  */
@@ -41,11 +40,11 @@ class XMLACellSetMemberProperty implements IProperty
 
 
    /**
-    * @param string $uniqueName
+    * @param string        $uniqueName
     * @param XMLAHierarchy $hierarchy
-    * @param string $name
+    * @param string        $name
     */
-   public function __construct ( $uniqueName, XMLAHierarchy $hierarchy, $name )
+   public function __construct( $uniqueName, XMLAHierarchy $hierarchy, $name )
    {
       $this->uniqueName = $uniqueName;
       $this->hierarchy  = $hierarchy;
@@ -56,7 +55,7 @@ class XMLACellSetMemberProperty implements IProperty
    /**
     * @return ContentType
     */
-   public function getContentType ( )
+   public function getContentType()
    {
    }
 
@@ -64,14 +63,14 @@ class XMLACellSetMemberProperty implements IProperty
    /**
     * @return DataType
     */
-   public function getDataType ( )
+   public function getDataType()
    {
    }
 
    /**
     * @return string
     */
-   public function getCaption ( )
+   public function getCaption()
    {
    }
 
@@ -79,7 +78,7 @@ class XMLACellSetMemberProperty implements IProperty
    /**
     * @return string
     */
-   public function getDescription ( )
+   public function getDescription()
    {
    }
 
@@ -87,8 +86,8 @@ class XMLACellSetMemberProperty implements IProperty
    /**
     * @return string
     */
-   public function getUniqueName ( )
+   public function getUniqueName()
    {
       return $this->uniqueName;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLACellSetMetaData.php b/provider/xmla/XMLACellSetMetaData.php
index 69616f3..b7fcfd7 100644
--- a/provider/xmla/XMLACellSetMetaData.php
+++ b/provider/xmla/XMLACellSetMetaData.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -47,22 +47,22 @@ class XMLACellSetMetaData implements ICellSetMetaData
     * Constructor
     *
     * @param XMLAStatement $statement
-    * @param XMLACube $cube
-    * @param XMLACellSetAxisMetaData
-    * @param array $axisMetaDataList
-    * @param array $cellProperties
+    * @param XMLACube      $cube
+    * @param               XMLACellSetAxisMetaData
+    * @param array         $axisMetaDataList
+    * @param array         $cellProperties
     */
-   public function __construct ( 
+   public function __construct(
       XMLAStatement $statement,
       XMLACube $cube,
       XMLACellSetAxisMetaData $filterAxisMetaData,
       array $axisMetaDataList,
       array $cellProperties )
    {
-      $this->cube = $cube;
+      $this->cube               = $cube;
       $this->filterAxisMetaData = $filterAxisMetaData;
-      $this->axisMetaDataList = $axisMetaDataList;
-      $this->propertiesByTag = array ( );
+      $this->axisMetaDataList   = $axisMetaDataList;
+      $this->propertiesByTag    = array();
 
       foreach ( $cellProperties as $cellProperty )
       {
@@ -84,7 +84,7 @@ class XMLACellSetMetaData implements ICellSetMetaData
    /**
     * @return array ICellSetAxisMetaData
     */
-   public function getAxesMetaData ( )
+   public function getAxesMetaData()
    {
       return $this->axisMetaDataList;
    }
@@ -92,24 +92,24 @@ class XMLACellSetMetaData implements ICellSetMetaData
    /**
     * @return array IProperty
     */
-   public function getCellProperties ( )
+   public function getCellProperties()
    {
    }
 
    /**
-    * @return array 
+    * @return array
     */
-   public function getCellPropertiesByTag ( $tag )
+   public function getCellPropertiesByTag( $tag )
    {
-      return isset ( $this->propertiesByTag [ $tag ] )
-         ? $this->propertiesByTag [ $tag ]
+      return isset ($this->propertiesByTag [$tag])
+         ? $this->propertiesByTag [$tag]
          : null;
    }
 
    /**
     * @return ICube
     */
-   public function getCube ( )
+   public function getCube()
    {
       return $this->cube;
    }
@@ -118,8 +118,8 @@ class XMLACellSetMetaData implements ICellSetMetaData
    /**
     * @return ICellSetAxisMetaData
     */
-   public function getFilterAxisMetaData ( )
+   public function getFilterAxisMetaData()
    {
       return $this->filterAxisMetaData;
-   } 
-}
\ No newline at end of file
+   }
+}
diff --git a/provider/xmla/XMLAConnection.php b/provider/xmla/XMLAConnection.php
index 26a23bb..a19c7d3 100644
--- a/provider/xmla/XMLAConnection.php
+++ b/provider/xmla/XMLAConnection.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -46,10 +46,10 @@ use OLAP4PHP\OLAP\OLAPException;
 class XMLAConnection implements IOLAPConnection
 {
    ///! Properties Array - Catalog key
-   const PROP_CATALOG      = 'catalog';
+   const PROP_CATALOG = 'catalog';
 
    ///! Properties Array - Data Source Info key
-   const PROP_DATASOURCE   = 'dataSource';
+   const PROP_DATASOURCE = 'dataSource';
 
    ///! OLAP Catalog to query
    private $catalog;
@@ -89,26 +89,26 @@ class XMLAConnection implements IOLAPConnection
     * @var Logger
     */
    private $logger;
-   
+
    /**
     * Flag to indicate if we want to enable performance logging. This flag is
     * only set when calling the setLogger method.
-    * 
+    *
     * @var boolean
     */
    private $logPerformance;
-   
+
    /**
     * An object which implements the IXMLACache interface
-    * 
-    * @var IXMLACache 
+    *
+    * @var IXMLACache
     */
    private $cache;
-   
+
    /**
     * An array of object level cached data. This local cache will be used to avoid
     * any external cached hits.
-    * 
+    *
     * @var array
     */
    private $localCache = array();
@@ -131,57 +131,57 @@ class XMLAConnection implements IOLAPConnection
     *    XmlaConnection::PROP_DATASOURCE  => 'Provider=Mondrian;DataSource=MondrianFoodMart;'
     * );
     *
-    * @param string $url - URL of the XMLA SOAP Endpoint
-    * @param array $properties - An array of connection properties
+    * @param string $url        - URL of the XMLA SOAP Endpoint
+    * @param array  $properties - An array of connection properties
     */
    public function __construct( $url, array $properties = array() )
    {
       $this->setURI( $url );
-      if ( isset( $properties[self::PROP_CATALOG] ) ) $this->setCatalog ( $properties[self::PROP_CATALOG] );
-      if ( isset( $properties[self::PROP_DATASOURCE] ) ) $this->setdataSourceInfo ( $properties[self::PROP_DATASOURCE] );
-      $this->databaseMetaData = new XMLADatabaseMetaData( $this );
+      if ( isset($properties[self::PROP_CATALOG]) ) $this->setCatalog( $properties[self::PROP_CATALOG] );
+      if ( isset($properties[self::PROP_DATASOURCE]) ) $this->setdataSourceInfo( $properties[self::PROP_DATASOURCE] );
+      $this->databaseMetaData = new XMLADatabaseMetaData($this);
    }
 
 
    /**
     * @brief Set the logger to be used. As well as sets if we want to log performance
-    * numbers in olap execution.
+    *        numbers in olap execution.
     *
     * @param Logger $logger A logger
     */
-   public function setLogger ( Logger $logger, $logPerformance = false )
+   public function setLogger( Logger $logger, $logPerformance = false )
    {
-      $this->logger = $logger;
+      $this->logger         = $logger;
       $this->logPerformance = $logPerformance;
    }
 
    /**
     * Specifies if we have performance logging enabled. This will log performance
     * information on olap classes that support the usage of this flag.
-    * 
+    *
     * @return boolean Flag to indicate if you want to have performance logging on
     */
    public function getLogPerformance()
    {
       return $this->logPerformance;
    }
-   
+
    /**
     * Set the cache used on this connection
-    * 
-    * @param IXMLACache $cache 
+    *
+    * @param IXMLACache $cache
     */
    public function setCache( IXMLACache $cache )
    {
       $this->cache = $cache;
    }
-   
+
    /**
     * Returns the cache used for this connection
-    * 
+    *
     * @return IXMLACache An object implementing the IXMLACache interface
     */
-   public function getCache( )
+   public function getCache()
    {
       return $this->cache;
    }
@@ -190,7 +190,7 @@ class XMLAConnection implements IOLAPConnection
     *
     * @return NamedList
     */
-   public function getCatalogs ( )
+   public function getCatalogs()
    {
       return $this->databaseMetaData->getCatalogObjects();
    }
@@ -201,7 +201,7 @@ class XMLAConnection implements IOLAPConnection
     *
     * @return string
     */
-   public function getCatalog ( )
+   public function getCatalog()
    {
       // REVIEW: All this logic to deduce and check catalog name should be
       // done on initialization (construction, or setCatalog), not here. This
@@ -210,29 +210,29 @@ class XMLAConnection implements IOLAPConnection
       {
          // This means that no particular catalog name
          // was specified by the user.
-         $catalogs = $this->getCatalogs ( );
+         $catalogs = $this->getCatalogs();
 
-         if ( $catalogs->size ( ) == 0 )
+         if ( $catalogs->size() == 0 )
          {
-            throw new OLAPException ( 'There is no catalog available.' );
+            throw new OLAPException ('There is no catalog available.');
          }
          else
          {
-            $this->catalog = $catalogs->get ( 0 )->getName ( );
+            $this->catalog = $catalogs->get( 0 )->getName();
          }
       }
       else
       {
          // We must verify that the requested catalog name exists in the metadata.
-         $catalog = $this->getCatalogs ( )->get ( $this->catalog );
-         
+         $catalog = $this->getCatalogs()->get( $this->catalog );
+
          if ( $catalog != null )
          {
-            $this->catalog = $catalog->getName ( );
+            $this->catalog = $catalog->getName();
          }
          else
          {
-            throw new OLAPException ( 'There is no catalog named '.$this->catalog.' available.' );
+            throw new OLAPException ('There is no catalog named ' . $this->catalog . ' available.');
          }
       }
 
@@ -244,7 +244,7 @@ class XMLAConnection implements IOLAPConnection
     *
     * @return string The Data Source Info string
     */
-   public function getDataSourceInfo ( )
+   public function getDataSourceInfo()
    {
       return $this->dataSourceInfo;
    }
@@ -254,7 +254,7 @@ class XMLAConnection implements IOLAPConnection
     *
     * @return string The SOAP XMLA Endpoint URI
     */
-   public function getURI ( )
+   public function getURI()
    {
       return $this->uri;
    }
@@ -263,7 +263,7 @@ class XMLAConnection implements IOLAPConnection
    /**
     * @return XMLADatabaseMetaData
     */
-   public function getMetaData ( )
+   public function getMetaData()
    {
       return $this->databaseMetaData;
    }
@@ -272,7 +272,7 @@ class XMLAConnection implements IOLAPConnection
    /**
     * @return Logger
     */
-   public function getLogger ( )
+   public function getLogger()
    {
       return $this->logger;
    }
@@ -282,11 +282,11 @@ class XMLAConnection implements IOLAPConnection
     *
     * @return XMLASchema
     */
-   public function getSchema ( )
+   public function getSchema()
    {
-      if ( empty( $this->schema ) )
+      if ( empty($this->schema) )
       {
-         $catalog = $this->databaseMetaData->getCatalogObjects()->get( $this->getCatalog() );
+         $catalog      = $this->databaseMetaData->getCatalogObjects()->get( $this->getCatalog() );
          $this->schema = $catalog->getSchemas()->get( 0 );
       }
 
@@ -298,7 +298,7 @@ class XMLAConnection implements IOLAPConnection
     *
     * @param string $catalog - The OLAP Catalog name
     */
-   public function setCatalog ( $catalog )
+   public function setCatalog( $catalog )
    {
       $this->catalog = $catalog;
    }
@@ -308,7 +308,7 @@ class XMLAConnection implements IOLAPConnection
     *
     * @param string $dataSourceInfo - The Data Source Info string
     */
-   public function setDataSourceInfo ( $dataSourceInfo )
+   public function setDataSourceInfo( $dataSourceInfo )
    {
       $this->dataSourceInfo = $dataSourceInfo;
    }
@@ -318,7 +318,7 @@ class XMLAConnection implements IOLAPConnection
     *
     * @param string $uri - The SOAP XMLA Endpoint URI
     */
-   public function setURI ( $uri )
+   public function setURI( $uri )
    {
       $this->uri = $uri;
    }
@@ -330,6 +330,7 @@ class XMLAConnection implements IOLAPConnection
     * conventions with olap4j
     *
     * @param string $xmla
+    *
     * @return DOMDocument SOAP XMLA Response Data
     */
    public function submit( $xmla )
@@ -369,6 +370,7 @@ class XMLAConnection implements IOLAPConnection
     * @brief Formats and XMLA string or DOMDocument for a SOAP Request
     *
     * @param DOMDocument $xmlData - DOMDocument or XML String
+    *
     * @return string Formatted XMLA SOAP Request
     */
    private function formatSoapRequest( $xmlData )
@@ -412,18 +414,19 @@ class XMLAConnection implements IOLAPConnection
    /**
     * @brief POST data to a URL
     *
-    * @param string $url - URL to POST $data to
-    * @param string $data - Data to post (binary-safe)
+    * @param string $url              - URL to POST $data to
+    * @param string $data             - Data to post (binary-safe)
     * @param string $optional_headers - Additional HTTP Headers, separated by \n
+    *
     * @return string Returned Data from $url
     */
    private function doPostRequest( $url, $data, $optional_headers = NULL )
    {
       //echo "DEBUG DATA: " . PHP_EOL . $data;
       $params = array( 'http' => array(
-              'method' => 'POST',
-              'content' => $data
-              ) );
+         'method'  => 'POST',
+         'content' => $data
+      ) );
 
       if ( $optional_headers !== NULL )
       {
@@ -434,22 +437,24 @@ class XMLAConnection implements IOLAPConnection
       {
          $this->stream = stream_context_create( $params );
       }
-      else if ( !stream_context_set_option( $this->stream, $params ) )
-      {
-         throw new OLAPException( 'Cannot updated stream context parameters.' );
+      else {
+         if ( !stream_context_set_option( $this->stream, $params ) )
+         {
+            throw new OLAPException('Cannot updated stream context parameters.');
+         }
       }
 
       $this->fp = fopen( $url, 'rb', FALSE, $this->stream );
 
       if ( !$this->fp )
       {
-         throw new OLAPException( "Cannot connect with $url" );
+         throw new OLAPException("Cannot connect with $url");
       }
 
       $response = stream_get_contents( $this->fp );
       if ( $response === FALSE )
       {
-         throw new OLAPException( "Problem reading data from $url" );
+         throw new OLAPException("Problem reading data from $url");
       }
 
       fclose( $this->fp );
@@ -464,88 +469,93 @@ class XMLAConnection implements IOLAPConnection
     *
     * This is invoked when building XMLACellSet
     *
-    * @param NamedList $list - reference
+    * @param NamedList             $list - reference
     * @param XMLAConnectionContext $context
-    * @param XMLAMetaDataRequest $metadataRequest
-    * @param IXMLAMetadataHandler $handler
-    * @param array $restrictions
+    * @param XMLAMetaDataRequest   $metadataRequest
+    * @param IXMLAMetadataHandler  $handler
+    * @param array                 $restrictions
     *
     * @return array
     *
     * @throws OLAPException
     */
-   function populateList ( NamedList $list,
-                           XMLAConnectionContext $context,
-                           XMLAMetadataRequest $metadataRequest,
-                           $handler,
-                           array $restrictions )
-   {                 
-      $request = $this->generateRequest ( $context, $metadataRequest, $restrictions );
-         $root = $this->executeMetadataRequest ( $request, $metadataRequest->isCachable() );
-                  
-         //print 'Connection: before foreach' . PHP_EOL;
-         foreach ( XMLAUtil::childElements ( $root ) as $element )
+   function populateList( NamedList $list,
+                          XMLAConnectionContext $context,
+                          XMLAMetadataRequest $metadataRequest,
+                          $handler,
+                          array $restrictions )
+   {
+      $request = $this->generateRequest( $context, $metadataRequest, $restrictions );
+      $root    = $this->executeMetadataRequest( $request, $metadataRequest->isCachable() );
+
+      //print 'Connection: before foreach' . PHP_EOL;
+      foreach ( XMLAUtil::childElements( $root ) as $element )
+      {
+         if ( $element->localName == 'row' )
          {
-            if ( $element->localName == 'row' )
-            {
-               $handler->handle ( $element, $context, $list );
-            }
+            $handler->handle( $element, $context, $list );
          }
-
-         //print 'Connection: before sortList' . PHP_EOL;
-         //print '$handler class: ' . get_class( $handler ) . PHP_EOL;
-         $handler->sortList ( $list );
       }
-      
-               
+
+      //print 'Connection: before sortList' . PHP_EOL;
+      //print '$handler class: ' . get_class( $handler ) . PHP_EOL;
+      $handler->sortList( $list );
+   }
+
+
    /**
-     * Executes an XMLA metadata request and returns the root element of the
-     * response.
-     *
-     * @param $request XMLA request string
-     * @return DOMElement Root element of the response
-     * @throws OLAPException on error
-     */
-   public function executeMetadataRequest ( $request, $cachable = true )
+    * Executes an XMLA metadata request and returns the root element of the
+    * response.
+    *
+    * @param $request XMLA request string
+    *
+    * @return DOMElement Root element of the response
+    * @throws OLAPException on error
+    */
+   public function executeMetadataRequest( $request, $cachable = true )
    {
       // check the cache for data before executing the meta data request
       $requestHash = crc32( $request );
-      
-      if( array_key_exists( $requestHash, $this->localCache ) )
-      {         
-         return $this->localCache[ $requestHash ];
-      }
-      else if( $cachable && $this->cache != null && ( ( $cachedResponseXML = $this->cache->get( $requestHash ) ) != false ) )
+
+      if ( array_key_exists( $requestHash, $this->localCache ) )
       {
-         if ( $this->logger && $this->debug )
-         {
-            $this->logger->debug ( __CLASS__, '********************** Cache hit **********************' );
-         }
-         
-         $doc = new \DOMDocument();
-         $doc->loadXML( $cachedResponseXML );
+         return $this->localCache[$requestHash];
       }
-      else
-      {
-         if ( $this->logger && $this->debug )
+      else {
+         if ( $cachable && $this->cache != null && (($cachedResponseXML = $this->cache->get( $requestHash )) != false) )
          {
-            $this->logger->debug ( __CLASS__, '********************** SENDING REQUEST **********************' );
-            $this->logger->debug ( __CLASS__, $request );
+            if ( $this->logger && $this->debug )
+            {
+               $this->logger->debug( __CLASS__, '********************** Cache hit **********************' );
+            }
+
+            $doc = new \DOMDocument();
+            $doc->loadXML( $cachedResponseXML );
          }
+         else
+         {
+            if ( $this->logger && $this->debug )
+            {
+               $this->logger->debug( __CLASS__, '********************** SENDING REQUEST **********************' );
+               $this->logger->debug( __CLASS__, $request );
+            }
 
-         $doc = $this->sendXMLA ( $request );
+            $doc = $this->sendXMLA( $request );
+
+            if ( $this->logger && $this->debug )
+            {
+               $this->logger->debug( __CLASS__, '******* RECEIVED RESPONSE *******' );
+               $this->logger->debug( __CLASS__, $doc->saveXML() );
+            }
+
+            $cachableXML = $doc->saveXML();
+
+            if ( $cachable && $this->cache != null )
+            {
+               $this->cache->set( $requestHash, $cachableXML );
+            }
 
-         if ( $this->logger && $this->debug )
-         {
-            $this->logger->debug ( __CLASS__, '******* RECEIVED RESPONSE *******' );
-            $this->logger->debug ( __CLASS__, $doc->saveXML ( ) );
          }
-         
-         $cachableXML = $doc->saveXML();
-         
-         if( $cachable && $this->cache != null )
-            $this->cache->set( $requestHash, $cachableXML );
-         
       }
 
       // <SOAP-ENV:Envelope>
@@ -565,36 +575,38 @@ class XMLAConnection implements IOLAPConnection
       //   System.out.println("** SERVER RESPONSE :");
       //   System.out.println(XmlaOlap4jUtil.toString(doc, true));
       //}
-      assert ( $envelope->localName == 'Envelope' );
-      assert ( $envelope->namespaceURI == XMLAUtil::SOAP_NS );
-      $body = XMLAUtil::findChild ( $envelope, XMLAUtil::SOAP_NS, 'Body' );
-      $fault = XMLAUtil::findChild ( $body, XMLAUtil::SOAP_NS, 'Fault' );
+      assert( $envelope->localName == 'Envelope' );
+      assert( $envelope->namespaceURI == XMLAUtil::SOAP_NS );
+      $body  = XMLAUtil::findChild( $envelope, XMLAUtil::SOAP_NS, 'Body' );
+      $fault = XMLAUtil::findChild( $body, XMLAUtil::SOAP_NS, 'Fault' );
 
       if ( $fault != null )
       {
          // had an error, need to invalidate the cached item so we don't end up
          // caching invalid data
-         if( $cachable && $this->cache != null )
+         if ( $cachable && $this->cache != null )
+         {
             $this->cache->delete( $requestHash );
-         
+         }
+
          /*
-         <SOAP-ENV:Fault>
-            <faultcode>SOAP-ENV:Client.00HSBC01</faultcode>
-            <faultstring>XMLA connection datasource not found</faultstring>
-            <faultactor>Mondrian</faultactor>
-            <detail>
-                <XA:error xmlns:XA="http://mondrian.sourceforge.net">
-                    <code>00HSBC01</code>
-                    <desc>The Mondrian XML: Mondrian Error:Internal
-                        error: no catalog named 'LOCALDB'</desc>
-                </XA:error>
-            </detail>
-         </SOAP-ENV:Fault>
-          */
+        <SOAP-ENV:Fault>
+           <faultcode>SOAP-ENV:Client.00HSBC01</faultcode>
+           <faultstring>XMLA connection datasource not found</faultstring>
+           <faultactor>Mondrian</faultactor>
+           <detail>
+               <XA:error xmlns:XA="http://mondrian.sourceforge.net">
+                   <code>00HSBC01</code>
+                   <desc>The Mondrian XML: Mondrian Error:Internal
+                       error: no catalog named 'LOCALDB'</desc>
+               </XA:error>
+           </detail>
+        </SOAP-ENV:Fault>
+         */
          // TODO: log doc to logfile
-         $fault = $fault->ownerDocument->saveXML ( $fault );
+         $fault = $fault->ownerDocument->saveXML( $fault );
          //$request = $request->ownerDocument->saveXML ( $request );
-         throw new OLAPException ( 'XMLA provider gave exception: '.$fault.' Request ['.$request.']' );
+         throw new OLAPException ('XMLA provider gave exception: ' . $fault . ' Request [' . $request . ']');
          //throw getHelper().createException(
          //    "XMLA provider gave exception: "
          //    + XmlaOlap4jUtil.prettyPrint(fault)
@@ -603,13 +615,13 @@ class XMLAConnection implements IOLAPConnection
          //    + request);
       }
 
-      $discoverResponse = XMLAUtil::findChild ( $body, XMLAUtil::XMLA_NS, 'DiscoverResponse' );
-      $returnElement = XMLAUtil::findChild ( $discoverResponse, XMLAUtil::XMLA_NS, 'return' );
-      $rootElement = XMLAUtil::findChild ( $returnElement, XMLAUtil::ROWSET_NS, 'root' );
-      
+      $discoverResponse = XMLAUtil::findChild( $body, XMLAUtil::XMLA_NS, 'DiscoverResponse' );
+      $returnElement    = XMLAUtil::findChild( $discoverResponse, XMLAUtil::XMLA_NS, 'return' );
+      $rootElement      = XMLAUtil::findChild( $returnElement, XMLAUtil::ROWSET_NS, 'root' );
+
       // cache this element locally for future retrieval
-      $this->localCache[ $requestHash ] = $rootElement;
-      
+      $this->localCache[$requestHash] = $rootElement;
+
       return $rootElement;
    }
 
@@ -617,37 +629,37 @@ class XMLAConnection implements IOLAPConnection
    /**
     *
     * @param XMLAConnectionContext $context
-    * @param XMLAMetadataRequest $metadataRequest
-    * @param array $restrictions
+    * @param XMLAMetadataRequest   $metadataRequest
+    * @param array                 $restrictions
     *
     * @throws
     */
-   public function generateRequest ( XMLAConnectionContext $context,
-                                     XMLAMetadataRequest $metadataRequest,
-                                     array $restrictions )
+   public function generateRequest( XMLAConnectionContext $context,
+                                    XMLAMetadataRequest $metadataRequest,
+                                    array $restrictions )
    {
       $content = "Data";
-      $buf = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n".
-      /*$buf = "<?xml version=\"1.0\"?>\n".*/
-             "<SOAP-ENV:Envelope\n".
-             "    xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\n".
-             "    SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n".
-             "  <SOAP-ENV:Body>\n".
-             "    <Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\"\n".
-             "        SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n".
-             "    <RequestType>";
-      $buf .= $metadataRequest->getName ( );
-      $buf .= "</RequestType>\n".
-              "    <Restrictions>\n".
-              "      <RestrictionList>\n";
+      $buf     = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" .
+         /*$buf = "<?xml version=\"1.0\"?>\n".*/
+         "<SOAP-ENV:Envelope\n" .
+         "    xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\n" .
+         "    SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n" .
+         "  <SOAP-ENV:Body>\n" .
+         "    <Discover xmlns=\"urn:schemas-microsoft-com:xml-analysis\"\n" .
+         "        SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">\n" .
+         "    <RequestType>";
+      $buf .= $metadataRequest->getName();
+      $buf .= "</RequestType>\n" .
+         "    <Restrictions>\n" .
+         "      <RestrictionList>\n";
 
       $restrictedCatalogName = null;
-      if ( ! empty ( $restrictions ) )
+      if ( !empty ($restrictions) )
       {
          foreach ( $restrictions as $restriction => $value )
          {
             $buf .= "<$restriction>";
-            $buf .= htmlspecialchars ( $value );
+            $buf .= htmlspecialchars( $value );
             $buf .= "</$restriction>";
 
             // To remind ourselves to generate a <Catalog> restriction
@@ -659,37 +671,39 @@ class XMLAConnection implements IOLAPConnection
          }
       }
 
-      $buf .= "      </RestrictionList>\n".
-              "    </Restrictions>\n".
-              "    <Properties>\n".
-              "      <PropertyList>\n";
+      $buf .= "      </RestrictionList>\n" .
+         "    </Restrictions>\n" .
+         "    <Properties>\n" .
+         "      <PropertyList>\n";
 
       // Add the datasource node only if this request requires it.
-      if ( $metadataRequest->requiresDatasourceName ( ) )
+      if ( $metadataRequest->requiresDatasourceName() )
       {
-         $buf .= ( "        <DataSourceInfo>" );
-         $buf .= htmlspecialchars ( $context->xmlaConnection->getDataSourceInfo ( ) );
-         $buf .= ( "</DataSourceInfo>" );
+         $buf .= ("        <DataSourceInfo>");
+         $buf .= htmlspecialchars( $context->xmlaConnection->getDataSourceInfo() );
+         $buf .= ("</DataSourceInfo>");
       }
 
       $requestCatalogName = null;
       if ( $restrictedCatalogName != null
-           && strlen ( $restrictedCatalogName ) > 0 )
+         && strlen( $restrictedCatalogName ) > 0
+      )
       {
          $requestCatalogName = $restrictedCatalogName;
       }
 
       // If the request requires catalog name, and one wasn't specified in the
       // restrictions, use the connection's current catalog.
-      if ($context->xmlaCatalog != null )
+      if ( $context->xmlaCatalog != null )
       {
-         $requestCatalogName = $context->xmlaCatalog->getName ( );
+         $requestCatalogName = $context->xmlaCatalog->getName();
       }
 
       if ( $requestCatalogName == null
-           && $metadataRequest->requiresCatalogName ( ) )
+         && $metadataRequest->requiresCatalogName()
+      )
       {
-         $requestCatalogName = $context->xmlaConnection->getCatalog ( );
+         $requestCatalogName = $context->xmlaConnection->getCatalog();
       }
 
       // Add the catalog node only if this request has specified it as a
@@ -704,22 +718,23 @@ class XMLAConnection implements IOLAPConnection
       // For high level objects like data source and catalog, the catalog
       // restriction does not make sense.
       if ( $requestCatalogName != null
-           && $metadataRequest->allowsCatalogName ( ) )
+         && $metadataRequest->allowsCatalogName()
+      )
       {
          $buf .= PHP_EOL . "        <Catalog>";
-         $buf .= htmlspecialchars ( $requestCatalogName );
+         $buf .= htmlspecialchars( $requestCatalogName );
          $buf .= "</Catalog>\n";
       }
 
       $buf .= PHP_EOL . "        <Content>";
-      $buf .= htmlspecialchars ( $content );
+      $buf .= htmlspecialchars( $content );
       $buf .=
-         "</Content>\n".
-         "      </PropertyList>\n".
-         "    </Properties>\n".
-         "    </Discover>\n".
-         "</SOAP-ENV:Body>\n".
-         "</SOAP-ENV:Envelope>";
+         "</Content>\n" .
+            "      </PropertyList>\n" .
+            "    </Properties>\n" .
+            "    </Discover>\n" .
+            "</SOAP-ENV:Body>\n" .
+            "</SOAP-ENV:Envelope>";
 
       return $buf;
    }
diff --git a/provider/xmla/XMLAConnectionContext.php b/provider/xmla/XMLAConnectionContext.php
index 4b02cb9..55de670 100644
--- a/provider/xmla/XMLAConnectionContext.php
+++ b/provider/xmla/XMLAConnectionContext.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -83,16 +83,16 @@ class XMLAConnectionContext
    /**
     * Creates a Context.
     *
-    * @param XMLAConnection Connection (must not be null)
+    * @param XMLAConnection       Connection (must not be null)
     * @param XMLADatabaseMetaData DatabaseMetaData (may be null)
-    * @param XMLACatalog Catalog (may be null if DatabaseMetaData is null)
-    * @param XMLASchema Schema (may be null if Catalog is null)
-    * @param XMLACube Cube (may be null if Schema is null)
-    * @param XMLADimension Dimension (may be null if Cube is null)
-    * @param XMLAHierarchy Hierarchy (may be null if Dimension is null)
-    * @param XMLALevel Level (may be null if Hierarchy is null)
+    * @param XMLACatalog          Catalog (may be null if DatabaseMetaData is null)
+    * @param XMLASchema           Schema (may be null if Catalog is null)
+    * @param XMLACube             Cube (may be null if Schema is null)
+    * @param XMLADimension        Dimension (may be null if Cube is null)
+    * @param XMLAHierarchy        Hierarchy (may be null if Dimension is null)
+    * @param XMLALevel            Level (may be null if Hierarchy is null)
     */
-   public function __construct (
+   public function __construct(
       XMLAConnection $connection,
       XMLADatabaseMetaData $databaseMetaData = NULL,
       XMLACatalog $catalog = NULL,
@@ -102,13 +102,13 @@ class XMLAConnectionContext
       XMLAHierarchy $hierarchy = NULL,
       XMLALevel $level = NULL )
    {
-      assert (
-            ( $databaseMetaData != null || $catalog == null )
-         && ( $catalog != null || $schema == null )
-         && ( $schema != null || $cube == null )
-         && ( $cube != null || $dimension == null )
-         && ( $dimension != null || $hierarchy == null )
-         && ( $hierarchy != null || $level == null ) );
+      assert(
+         ($databaseMetaData != null || $catalog == null)
+            && ($catalog != null || $schema == null)
+            && ($schema != null || $cube == null)
+            && ($cube != null || $dimension == null)
+            && ($dimension != null || $hierarchy == null)
+            && ($hierarchy != null || $level == null) );
 
       $this->xmlaConnection       = $connection;
       $this->xmlaDatabaseMetaData = $databaseMetaData;
@@ -118,33 +118,33 @@ class XMLAConnectionContext
       $this->xmlaDimension        = $dimension;
       $this->xmlaHierarchy        = $hierarchy;
       $this->xmlaLevel            = $level;
-      $this->logger = $connection->getLogger ( );
+      $this->logger               = $connection->getLogger();
    }
 
 
    /**
     * Shorthand way to create a Context at Cube level or finer.
     *
-    * @param XMLACube Cube (must not be null)
+    * @param XMLACube      Cube (must not be null)
     * @param XMLADimension Dimension (may be null)
     * @param XMLAHierarchy Hierarchy (may be null if Dimension is null)
-    * @param XMLALevel Level (may be null if Hierarchy is null)
+    * @param XMLALevel     Level (may be null if Hierarchy is null)
     */
-   static public function createAtGranule ( 
+   static public function createAtGranule(
       XMLACube $cube,
       XMLADimension $dimension = NULL,
       XMLAHierarchy $hierarchy = NULL,
       XMLALevel $level = NULL )
    {
       return new XMLAConnectionContext (
-         $cube->getSchema ( )->getCatalog ( )->getMetadata ()->getConnection ( ),
-         $cube->getSchema ( )->getCatalog ( )->getMetadata (),
-         $cube->getSchema ( )->getCatalog ( ),
-         $cube->getSchema ( ),
+         $cube->getSchema()->getCatalog()->getMetadata()->getConnection(),
+         $cube->getSchema()->getCatalog()->getMetadata(),
+         $cube->getSchema()->getCatalog(),
+         $cube->getSchema(),
          $cube,
          $dimension,
          $hierarchy,
-         $level );
+         $level);
    }
 
    /**
@@ -152,19 +152,19 @@ class XMLAConnectionContext
     *
     * @param XMLALevel Level (must not be null)
     */
-   static public function createAtLevel ( XMLALevel $level )
+   static public function createAtLevel( XMLALevel $level )
    {
-      return XMLAConnectionContext::createAtGranule (
-         $level->getHierarchy ( )->getDimension ( )->getCube ( ),
-         $level->getHierarchy ( )->getDimension ( ),
-         $level->getHierarchy ( ),
+      return XMLAConnectionContext::createAtGranule(
+         $level->getHierarchy()->getDimension()->getCube(),
+         $level->getHierarchy()->getDimension(),
+         $level->getHierarchy(),
          $level );
    }
 
    /**
     * @return XMLACube
     */
-   public function getCube ( DOMElement $row )
+   public function getCube( DOMElement $row )
    {
       if ( $this->xmlaCube != null ) return $this->xmlaCube;
 
@@ -174,25 +174,25 @@ class XMLAConnectionContext
    /**
     * @return XMLADimension
     */
-   public function getDimension ( DOMElement $row )
+   public function getDimension( DOMElement $row )
    {
       if ( $this->xmlaDimension != null )
       {
          return $this->xmlaDimension;
       }
 
-      $dimensionUniqueName = XMLAUtil::stringElement ( $row, 'DIMENSION_UNIQUE_NAME' );
-      $dimensionsByUname = $this->getCube ( $row )->dimensionsByUname;
-      $dimension = isset ( $dimensionsByUname [ $dimensionUniqueName ] )
-                     ? $dimensionsByUname [ $dimensionUniqueName ]
-                     : null;
+      $dimensionUniqueName = XMLAUtil::stringElement( $row, 'DIMENSION_UNIQUE_NAME' );
+      $dimensionsByUname   = $this->getCube( $row )->dimensionsByUname;
+      $dimension           = isset ($dimensionsByUname [$dimensionUniqueName])
+         ? $dimensionsByUname [$dimensionUniqueName]
+         : null;
 
       // Apparently, the code has requested a member that is
       // not queried for yet.
       if ( $dimension == null )
       {
-         $dimensionName = XMLAUtil::stringElement ( $row, 'DIMENSION_NAME' );
-          return $this->getCube ( $row )->dimensions->get ( $dimensionName );
+         $dimensionName = XMLAUtil::stringElement( $row, 'DIMENSION_NAME' );
+         return $this->getCube( $row )->getDimensions()->get( $dimensionName );
       }
       return $dimension;
    }
@@ -200,31 +200,33 @@ class XMLAConnectionContext
    /**
     * @return XMLAHierarhcy
     */
-   public function getHierarchy ( DOMElement $row )
+   public function getHierarchy( DOMElement $row )
    {
-      if ( $this->xmlaHierarchy != null)
-          return $this->xmlaHierarchy;
+      if ( $this->xmlaHierarchy != null )
+      {
+         return $this->xmlaHierarchy;
+      }
 
-      $hierarchyUniqueName = XMLAUtil::stringElement ( $row, 'HIERARCHY_UNIQUE_NAME' );
-      $hierarchiesByUname = $this->getCube ( $row )->hierarchiesByUname;
-      $hierarchy = isset ( $hierarchiesByUname [ $hierarchyUniqueName ] )
-                     ? $hierarchiesByUname [ $hierarchyUniqueName ]
-                     : null;
+      $hierarchyUniqueName = XMLAUtil::stringElement( $row, 'HIERARCHY_UNIQUE_NAME' );
+      $hierarchiesByUname  = $this->getCube( $row )->hierarchiesByUname;
+      $hierarchy           = isset ($hierarchiesByUname [$hierarchyUniqueName])
+         ? $hierarchiesByUname [$hierarchyUniqueName]
+         : null;
 
       if ( $hierarchy == null )
       {
-          // Apparently, the code has requested a member that is
-          // not queried for yet. We must force the initialization
-          // of the dimension tree first.
-          $dimensionUniqueName = XMLAUtil::stringElement ( $row, 'DIMENSION_UNIQUE_NAME' );
-          $dimensionName = Olap4jUtil::parseUniqueName ( $dimensionUniqueName )->get ( 0 );
-          $dimension = $this->getCube ( row )->getDimensions ( )->get ( $dimensionName );
-          $dimension->getHierarchies ( )->size ( );
-          // Now we attempt to resolve again
-          $hierarchiesByUname = $this->getCube ( $row )->hierarchiesByUname;
-          $hierarchy = isset ( $hierarchiesByUname [ $hierarchyUniqueName ] )
-                          ? $hierarchiesByUname [ $hierarchyUniqueName ]
-                          : null;
+         // Apparently, the code has requested a member that is
+         // not queried for yet. We must force the initialization
+         // of the dimension tree first.
+         $dimensionUniqueName = XMLAUtil::stringElement( $row, 'DIMENSION_UNIQUE_NAME' );
+         $dimensionName       = XMLAUtil::parseUniqueName( $dimensionUniqueName )->get( 0 );
+         $dimension           = $this->getCube( $row )->getDimensions()->get( $dimensionName );
+         $dimension->getHierarchies()->size();
+         // Now we attempt to resolve again
+         $hierarchiesByUname = $this->getCube( $row )->hierarchiesByUname;
+         $hierarchy          = isset ($hierarchiesByUname [$hierarchyUniqueName])
+            ? $hierarchiesByUname [$hierarchyUniqueName]
+            : null;
       }
 
       return $hierarchy;
@@ -233,35 +235,35 @@ class XMLAConnectionContext
    /**
     * @return XMLALevel Level (must not be null)
     */
-   public function getLevel ( DOMElement $row )
+   public function getLevel( DOMElement $row )
    {
       if ( $this->xmlaLevel != null )
       {
          return $this->xmlaLevel;
       }
-      $levelUniqueName = XMLAUtil::stringElement ( $row, 'LEVEL_UNIQUE_NAME' );
-      $levelsByUname = $this->getCube ( $row )->levelsByUname;
-      $level = isset ( $levelsByUname [ $levelUniqueName ] )
-                  ? $levelsByUname [ $levelUniqueName ]
-                  : null;
+      $levelUniqueName = XMLAUtil::stringElement( $row, 'LEVEL_UNIQUE_NAME' );
+      $levelsByUname   = $this->getCube( $row )->levelsByUname;
+      $level           = isset ($levelsByUname [$levelUniqueName])
+         ? $levelsByUname [$levelUniqueName]
+         : null;
 
       if ( $level == null )
       {
          // Apparently, the code has requested a member that has
          // not been queried yet. We must force the initialization
          // of the dimension tree first.
-         $dimensionUniqueName = XMLAUtil::stringElement ( $row, 'DIMENSION_UNIQUE_NAME' );
-         $parsedUniqueName = Util::parseUniqueName ( $dimensionUniqueName );
-         $dimensionName = $parsedUniqueName[ 0 ];
+         $dimensionUniqueName = XMLAUtil::stringElement( $row, 'DIMENSION_UNIQUE_NAME' );
+         $parsedUniqueName    = XMLAUtil::parseUniqueName( $dimensionUniqueName );
+         $dimensionName       = $parsedUniqueName[0];
          //print $dimensionName;
-         $dimension = $this->getCube ( $row )->getDimensions ( )->get ( $dimensionName );
-         foreach ( $dimension->getHierarchies ( ) as $hierarchy )
+         $dimension = $this->getCube( $row )->getDimensions()->get( $dimensionName );
+         foreach ( $dimension->getHierarchies() as $hierarchy )
          {
-            $hierarchy->getLevels ( )->size ( );
+            $hierarchy->getLevels()->size();
          }
 
          // Now we attempt to resolve again
-         $level = $this->getCube ( $row )->levelsByUname [ $levelUniqueName ];
+         $level = $this->getCube( $row )->levelsByUname [$levelUniqueName];
       }
       return $level;
    }
@@ -269,14 +271,14 @@ class XMLAConnectionContext
    /**
     * @return XMLACatalog
     */
-   public function getCatalog ( DOMElement $row )
+   public function getCatalog( DOMElement $row )
    {
       if ( $this->xmlaCatalog != null )
       {
          return $this->xmlaCatalog;
       }
 
-      $catalogName = XMLAUtil::stringElement ( $row, 'CATALOG_NAME' );
-      return $this->xmlaConnection->getCatalogs ( )->get ( $catalogName );
+      $catalogName = XMLAUtil::stringElement( $row, 'CATALOG_NAME' );
+      return $this->xmlaConnection->getCatalogs()->get( $catalogName );
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLACube.php b/provider/xmla/XMLACube.php
index 76d009f..5386bba 100644
--- a/provider/xmla/XMLACube.php
+++ b/provider/xmla/XMLACube.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -57,67 +57,68 @@ class XMLACube implements ICube, INamed
    private $hierarchies;
 
    public $hierarchiesByUname = array();
-   public $levelsByUname = array ();
+   public $levelsByUname = array();
    public $dimensionsByUname = array();
 
    /**
     * Constructor
     *
     * @param XMLASchema Schema
-    * @param string name Name
-    * @param string description Description
+    * @param string     name Name
+    * @param string     description Description
+    *
     * @throws OLAPException
     */
-   public function __construct ( XMLASchema $schema, $name, $description )
+   public function __construct( XMLASchema $schema, $name, $description )
    {
-      assert ( $schema != null );
-      assert ( $name != null );
-      assert ( $description != null );
+      assert( $schema != null );
+      assert( $name != null );
+      assert( $description != null );
 
-      $this->schema = $schema;
-      $this->name = $name;
-      $this->description = $description;
+      $this->schema         = $schema;
+      $this->name           = $name;
+      $this->description    = $description;
       $this->metadataReader =
          new XMLACachingMetadataReader (
-                new XMLAMetadataReader ( $this ),
-                $this->measuresMap );
-      
-      $connection = $schema->getCatalog ( )->getMetaData( )->getConnection ( );
-      $context = XMLAConnectionContext::createAtGranule ( $this, null, null, null );
-
-      $restrictions = array (
-         'CATALOG_NAME' => $schema->getCatalog ( )->getName( ),
-         'SCHEMA_NAME'  => $schema->getName ( ),
-         'CUBE_NAME'    => $this->getName ( )
+            new XMLAMetadataReader ($this),
+            $this->measuresMap);
+
+      $connection = $schema->getCatalog()->getMetaData()->getConnection();
+      $context    = XMLAConnectionContext::createAtGranule( $this, null, null, null );
+
+      $restrictions = array(
+         'CATALOG_NAME' => $schema->getCatalog()->getName(),
+         'SCHEMA_NAME'  => $schema->getName(),
+         'CUBE_NAME'    => $this->getName()
       );
 
       $this->dimensions = new LazyMetadataList (
-         new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_DIMENSIONS ),
+         new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_DIMENSIONS),
          $context,
-         new XMLADimensionHandler ( $this ),
-         $restrictions );
+         new XMLADimensionHandler ($this),
+         $restrictions);
 
       // populate measures up front; a measure is needed in every query
       $this->measures = new NamedList();
-      $connection->populateList (
+      $connection->populateList(
          $this->measures,
          $context,
-         new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_MEASURES ),
-         new XMLAMeasureHandler ( $this->getDimensions ( )->get ( 'Measures' ) ),
+         new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_MEASURES),
+         new XMLAMeasureHandler ($this->getDimensions()->get( 'Measures' )),
          $restrictions );
 
       for ( $i = 0; $i < $this->measures->size(); $i++ )
       {
-         $measure = $this->measures->get( $i );
+         $measure                                      = $this->measures->get( $i );
          $this->measuresMap[$measure->getUniqueName()] = $measure;
       }
 
-     // populate named sets
-     $this->namedSets = new LazyMetadataList (
-         new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_SETS ),
+      // populate named sets
+      $this->namedSets = new LazyMetadataList (
+         new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_SETS),
          $context,
-         new XMLANamedSetHandler ( ),
-         $restrictions );
+         new XMLANamedSetHandler (),
+         $restrictions);
    }
 
    /**
@@ -162,12 +163,12 @@ class XMLACube implements ICube, INamed
     */
    public function getHierarchies()
    {
-      if ( empty ( $this->hierarchies ) )
+      if ( empty ($this->hierarchies) )
       {
          $this->hierarchies = new NamedList();
          foreach ( $this->dimensions as $dimension )
          {
-            $this->hierarchies->addAll( $dimension->getHierarchies ( ) );
+            $this->hierarchies->addAll( $dimension->getHierarchies() );
          }
       }
 
@@ -196,7 +197,7 @@ class XMLACube implements ICube, INamed
       //
       // in olap4j, see QueryDimension and QueryAxis
       //
-      throw new OLAPException( 'XMLACube::lookupMember not implemented' );
+      throw new OLAPException('XMLACube::lookupMember not implemented');
    }
 
    public function lookupMembers( array $treeOps, array $nameParts )
@@ -206,13 +207,13 @@ class XMLACube implements ICube, INamed
       //
       // in olap4j, see QueryDimension and QueryAxis
       //
-      throw new OLAPException( 'XMLACube::lookupMember not implemented' );
+      throw new OLAPException('XMLACube::lookupMember not implemented');
    }
 
    /**
     * @return IXMLAMetaDataReader
     */
-   public function getMetadataReader ( )
+   public function getMetadataReader()
    {
       return $this->metadataReader;
    }
diff --git a/provider/xmla/XMLADatabaseMetaData.php b/provider/xmla/XMLADatabaseMetaData.php
index 26f22b7..fa932b1 100644
--- a/provider/xmla/XMLADatabaseMetaData.php
+++ b/provider/xmla/XMLADatabaseMetaData.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -53,15 +53,15 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
       $this->xmlaConnection = $xmlaConnection;
       // @todo - implements catalogs from olap4j
       $this->catalogs = new LazyMetadataList(
-              new XMLAMetadataRequest( XMLAMetadataRequest::DBSCHEMA_CATALOGS ),
-              new XMLAConnectionContext( $this->xmlaConnection, $this, NULL, NULL, NULL, NULL, NULL, NULL ),
-              new XMLACatalogHandler(),
-              NULL );
+         new XMLAMetadataRequest(XMLAMetadataRequest::DBSCHEMA_CATALOGS),
+         new XMLAConnectionContext($this->xmlaConnection, $this, NULL, NULL, NULL, NULL, NULL, NULL),
+         new XMLACatalogHandler(),
+         NULL);
    }
 
    /**
     * @brief Returns an list of OLAP Catalog objects
-    * 
+    *
     * @return LazyMetadataList
     */
    public function getCatalogObjects()
@@ -71,15 +71,15 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
 
    private function getMetadata( XMLAMetadataRequest $metadataRequest, array $patternValues = array() )
    {
-      $context = new XMLAConnectionContext( $this->xmlaConnection );
+      $context = new XMLAConnectionContext($this->xmlaConnection);
 
-      $predicateList = array();
+      $predicateList    = array();
       $compiledPatterns = array();
       foreach ( $patternValues as $key => $value )
       {
          $column = $metadataRequest->getColumn( $key );
-         if ( $column === NULL ) throw new OLAPException( "Metadata Request {$metadataRequest->getName()} does not support column $key" );
-         if ( empty( $value ) ) continue;
+         if ( $column === NULL ) throw new OLAPException("Metadata Request {$metadataRequest->getName()} does not support column $key");
+         if ( empty($value) ) continue;
 
          if ( $value instanceof Wildcard )
          {
@@ -100,7 +100,7 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
       }
 
       $requestString = $this->xmlaConnection->generateRequest( $context, $metadataRequest, $compiledPatterns );
-      $root = $this->xmlaConnection->executeMetadataRequest( $requestString, $metadataRequest->isCachable() );
+      $root          = $this->xmlaConnection->executeMetadataRequest( $requestString, $metadataRequest->isCachable() );
 
       $rowList = array();
       foreach ( $root->childNodes as $row )
@@ -127,15 +127,15 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
       // @todo return olap4jConnection.factory.newFixedResultSet(olap4jConnection, headerList, rowList);
       //return;
 
-      return new ResultSet( $headerList, $rowList );
+      return new ResultSet($headerList, $rowList);
    }
 
    public function wildcard( $string )
    {
-      if ( empty( $string ) ) return NULL;
-      return new Wildcard( $string );
+      if ( empty($string) ) return NULL;
+      return new Wildcard($string);
    }
-   
+
    public function getURL()
    {
       return $this->xmlaConnection->getURI();
@@ -172,7 +172,7 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getSchemas()
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::DBSCHEMA_SCHEMATA ) );
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::DBSCHEMA_SCHEMATA) );
    }
 
    /**
@@ -181,7 +181,7 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getCatalogs()
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::DBSCHEMA_CATALOGS ) );
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::DBSCHEMA_CATALOGS) );
    }
 
    public function getConnection()
@@ -195,13 +195,13 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getActions( $catalog = NULL, $schemaPattern = NULL, $cubeNamePattern = NULL, $actionNamePattern = NULL )
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_ACTIONS ),
-              array(
-                  "CATALOG_NAME" => $catalog,
-                  "SCHEMA_NAME" => $this->wildcard( $schemaPattern ),
-                  "CUBE_NAME" => $this->wildcard( $cubeNamePattern ),
-                  "ACTION_NAME" => $this->wildcard( $actionNamePattern )
-              ) );
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_ACTIONS),
+                                 array(
+                                    "CATALOG_NAME" => $catalog,
+                                    "SCHEMA_NAME"  => $this->wildcard( $schemaPattern ),
+                                    "CUBE_NAME"    => $this->wildcard( $cubeNamePattern ),
+                                    "ACTION_NAME"  => $this->wildcard( $actionNamePattern )
+                                 ) );
    }
 
    /**
@@ -210,7 +210,7 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getDatasources()
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::DISCOVER_DATASOURCES ) );
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::DISCOVER_DATASOURCES) );
    }
 
    /**
@@ -219,7 +219,7 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getLiterals()
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::DISCOVER_LITERALS ) );
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::DISCOVER_LITERALS) );
    }
 
    /**
@@ -228,7 +228,7 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getDatabaseProperties( $dataSourceName, $propertyNamePattern )
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::DISCOVER_PROPERTIES ) );
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::DISCOVER_PROPERTIES) );
    }
 
    /**
@@ -236,24 +236,24 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     * @return ResultSet
     */
    public function getProperties(
-           $catalog = NULL,
-           $schemaPattern = NULL,
-           $cubeNamePattern = NULL,
-           $dimensionUniqueName = NULL,
-           $hierarchyUniqueName = NULL,
-           $levelUniqueName = NULL,
-           $memberUniqueName = NULL,
-           $propertyNamePattern = NULL )
+      $catalog = NULL,
+      $schemaPattern = NULL,
+      $cubeNamePattern = NULL,
+      $dimensionUniqueName = NULL,
+      $hierarchyUniqueName = NULL,
+      $levelUniqueName = NULL,
+      $memberUniqueName = NULL,
+      $propertyNamePattern = NULL )
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_PROPERTIES ), array(
-            "CATALOG_NAME" => $catalog,
-            "SCHEMA_NAME" => $this->wildcard($schemaPattern),
-            "CUBE_NAME" => $this->wildcard($cubeNamePattern),
-            "DIMENSION_UNIQUE_NAME" => $dimensionUniqueName,
-            "HIERARCHY_UNIQUE_NAME" => $hierarchyUniqueName,
-            "LEVEL_UNIQUE_NAME" => $levelUniqueName,
-            "MEMBER_UNIQUE_NAME" => $memberUniqueName,
-            "PROPERTY_NAME" => $this->wildcard($propertyNamePattern)
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_PROPERTIES), array(
+         "CATALOG_NAME"          => $catalog,
+         "SCHEMA_NAME"           => $this->wildcard( $schemaPattern ),
+         "CUBE_NAME"             => $this->wildcard( $cubeNamePattern ),
+         "DIMENSION_UNIQUE_NAME" => $dimensionUniqueName,
+         "HIERARCHY_UNIQUE_NAME" => $hierarchyUniqueName,
+         "LEVEL_UNIQUE_NAME"     => $levelUniqueName,
+         "MEMBER_UNIQUE_NAME"    => $memberUniqueName,
+         "PROPERTY_NAME"         => $this->wildcard( $propertyNamePattern )
       ) );
    }
 
@@ -263,18 +263,18 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getMdxKeywords()
    {
-      $metadataRequest = new XMLAMetadataRequest( XMLAMetadataRequest::DISCOVER_KEYWORDS );
-      $context = new XMLAConnectionContext();
+      $metadataRequest         = new XMLAMetadataRequest(XMLAMetadataRequest::DISCOVER_KEYWORDS);
+      $context                 = new XMLAConnectionContext($this->xmlaConnection);
       $context->xmlaConnection = $this->xmlaConnection;
 
       $request = $this->xmlaConnection->generateRequest( $context, $metadataRequest, array() );
-      $root = $this->xmlaConnection->executeMetadataRequest( $request, $metadataRequest->isCachable() );
-      
+      $root    = $this->xmlaConnection->executeMetadataRequest( $request, $metadataRequest->isCachable() );
+
       $keywords = array();
       foreach ( $root->childNodes as $row )
       {
          $keyword = XMLAUtil::stringElement( $row, 'Keyword' );
-         if ( !empty( $keyword ) ) $keywords[] = $keyword;
+         if ( !empty($keyword) ) $keywords[] = $keyword;
       }
 
       return implode( ',', $keywords );
@@ -286,10 +286,10 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getCubes( $catalog = NULL, $schemaPattern = NULL, $cubeNamePattern = NULL )
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_CUBES ), array(
-          "CATALOG_NAME" => $catalog,
-          "SCHEMA_NAME" => $this->wildcard( $schemaPattern ),
-          "CUBE_NAME" => $this->wildcard( $cubeNamePattern )
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_CUBES), array(
+         "CATALOG_NAME" => $catalog,
+         "SCHEMA_NAME"  => $this->wildcard( $schemaPattern ),
+         "CUBE_NAME"    => $this->wildcard( $cubeNamePattern )
       ) );
    }
 
@@ -299,11 +299,11 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getDimensions( $catalog = NULL, $schemaPattern = NULL, $cubeNamePattern = NULL, $dimensionNamePattern = NULL )
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_DIMENSIONS ), array(
-          "CATALOG_NAME" => $catalog,
-          "SCHEMA_NAME" => $this->wildcard( $schemaPattern ),
-          "CUBE_NAME" => $this->wildcard( $cubeNamePattern ),
-          "DIMENSION_NAME" => $this->wildcard( $dimensionNamePattern )
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_DIMENSIONS), array(
+         "CATALOG_NAME"   => $catalog,
+         "SCHEMA_NAME"    => $this->wildcard( $schemaPattern ),
+         "CUBE_NAME"      => $this->wildcard( $cubeNamePattern ),
+         "DIMENSION_NAME" => $this->wildcard( $dimensionNamePattern )
       ) );
    }
 
@@ -313,8 +313,8 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getOlapFunctions( $functionNamePattern = NULL )
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_FUNCTIONS ), array(
-          "FUNCTION_NAME" => $this->wildcard( $functionNamePattern )
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_FUNCTIONS), array(
+         "FUNCTION_NAME" => $this->wildcard( $functionNamePattern )
       ) );
    }
 
@@ -324,12 +324,12 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getHierarchies( $catalog = NULL, $schemaPattern = NULL, $cubeNamePattern = NULL, $dimensionUniqueName = NULL, $hierarchyNamePattern = NULL )
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_HIERARCHIES ), array(
-          "CATALOG_NAME" => $catalog,
-          "SCHEMA_NAME" => $this->wildcard( $schemaPattern ),
-          "CUBE_NAME" => $this->wildcard( $cubeNamePattern ),
-          "DIMENSION_UNIQUE_NAME" => $dimensionUniqueName,
-          "HIERARCHY_NAME" => $this->wildcard( $hierarchyNamePattern )
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_HIERARCHIES), array(
+         "CATALOG_NAME"          => $catalog,
+         "SCHEMA_NAME"           => $this->wildcard( $schemaPattern ),
+         "CUBE_NAME"             => $this->wildcard( $cubeNamePattern ),
+         "DIMENSION_UNIQUE_NAME" => $dimensionUniqueName,
+         "HIERARCHY_NAME"        => $this->wildcard( $hierarchyNamePattern )
       ) );
    }
 
@@ -339,12 +339,12 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getMeasures( $catalog = NULL, $schemaPattern = NULL, $cubeNamePattern = NULL, $measureNamePattern = NULL, $measureUniqueName = NULL )
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_MEASURES ), array(
-          "CATALOG_NAME" => $catalog,
-          "SCHEMA_NAME" => $this->wildcard( $schemaPattern ),
-          "CUBE_NAME" => $this->wildcard( $cubeNamePattern ),
-          "MEASURE_NAME" => $this->wildcard( $measureNamePattern ),
-          "MEASURE_UNIQUE_NAME" => $measureUniqueName
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_MEASURES), array(
+         "CATALOG_NAME"        => $catalog,
+         "SCHEMA_NAME"         => $this->wildcard( $schemaPattern ),
+         "CUBE_NAME"           => $this->wildcard( $cubeNamePattern ),
+         "MEASURE_NAME"        => $this->wildcard( $measureNamePattern ),
+         "MEASURE_UNIQUE_NAME" => $measureUniqueName
       ) );
    }
 
@@ -352,38 +352,38 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     *
     * @return ResultSet
     */
-   public function getMembers( 
-           $catalog = NULL,
-           $schemaPattern = NULL,
-           $cubeNamePattern = NULL,
-           $dimensionUniqueName = NULL,
-           $hierarchyUniqueName = NULL,
-           $levelUniqueName = NULL,
-           $memberUniqueName = NULL,
-           array $treeOps = array() )
+   public function getMembers(
+      $catalog = NULL,
+      $schemaPattern = NULL,
+      $cubeNamePattern = NULL,
+      $dimensionUniqueName = NULL,
+      $hierarchyUniqueName = NULL,
+      $levelUniqueName = NULL,
+      $memberUniqueName = NULL,
+      array $treeOps = array() )
    {
       $treeOpString = NULL;
-      if ( !empty( $treeOps ) )
+      if ( !empty($treeOps) )
       {
          $op = 0;
          foreach ( $treeOps as $treeOp )
          {
-            $to = new XMLATreeOp( $treeOp );
+            $to = new XMLATreeOp($treeOp);
             $op |= $to->xmlaOrdinal();
          }
 
          $treeOpString = '' . $op;
       }
 
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_MEMBERS ), array(
-          "CATALOG_NAME" => $catalog,
-          "SCHEMA_NAME" => $this->wildcard( $schemaPattern ),
-          "CUBE_NAME" => $this->wildcard( $cubeNamePattern ),
-          "DIMENSION_UNIQUE_NAME" => $dimensionUniqueName,
-          "HIERARCHY_UNIQUE_NAME" => $hierarchyUniqueName,
-          "LEVEL_UNIQUE_NAME" => $levelUniqueName,
-          "MEMBER_UNIQUE_NAME" => $memberUniqueName,
-          "TREE_OP" => $treeOpString
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_MEMBERS), array(
+         "CATALOG_NAME"          => $catalog,
+         "SCHEMA_NAME"           => $this->wildcard( $schemaPattern ),
+         "CUBE_NAME"             => $this->wildcard( $cubeNamePattern ),
+         "DIMENSION_UNIQUE_NAME" => $dimensionUniqueName,
+         "HIERARCHY_UNIQUE_NAME" => $hierarchyUniqueName,
+         "LEVEL_UNIQUE_NAME"     => $levelUniqueName,
+         "MEMBER_UNIQUE_NAME"    => $memberUniqueName,
+         "TREE_OP"               => $treeOpString
       ) );
    }
 
@@ -392,20 +392,20 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     * @return ResultSet
     */
    public function getLevels(
-           $catalog = NULL,
-           $schemaPattern = NULL,
-           $cubeNamePattern = NULL,
-           $dimensionUniqueName = NULL,
-           $hierarchyUniqueName = NULL,
-           $levelNamePattern = NULL )
+      $catalog = NULL,
+      $schemaPattern = NULL,
+      $cubeNamePattern = NULL,
+      $dimensionUniqueName = NULL,
+      $hierarchyUniqueName = NULL,
+      $levelNamePattern = NULL )
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_LEVELS ), array(
-          "CATALOG_NAME" => $catalog,
-          "SCHEMA_NAME" => $this->wildcard( $schemaPattern ),
-          "CUBE_NAME" => $this->wildcard( $cubeNamePattern ),
-          "DIMENSION_UNIQUE_NAME" => $dimensionUniqueName,
-          "HIERARCHY_UNIQUE_NAME" => $hierarchyUniqueName,
-          "LEVEL_NAME" => $this->wildcard( $levelNamePattern )
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_LEVELS), array(
+         "CATALOG_NAME"          => $catalog,
+         "SCHEMA_NAME"           => $this->wildcard( $schemaPattern ),
+         "CUBE_NAME"             => $this->wildcard( $cubeNamePattern ),
+         "DIMENSION_UNIQUE_NAME" => $dimensionUniqueName,
+         "HIERARCHY_UNIQUE_NAME" => $hierarchyUniqueName,
+         "LEVEL_NAME"            => $this->wildcard( $levelNamePattern )
       ) );
    }
 
@@ -415,11 +415,11 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
     */
    public function getSets( $catalog = NULL, $schemaPattern = NULL, $cubeNamePattern = NULL, $setNamePattern = NULL )
    {
-      return $this->getMetadata( new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_SETS ), array(
-          "CATALOG_NAME" => $catalog,
-          "SCHEMA_NAME" => $this->wildcard( $schemaPattern ),
-          "CUBE_NAME" => $this->wildcard( $cubeNamePattern ),
-          "SET_NAME" => $this->wildcard( $setNamePattern )
+      return $this->getMetadata( new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_SETS), array(
+         "CATALOG_NAME" => $catalog,
+         "SCHEMA_NAME"  => $this->wildcard( $schemaPattern ),
+         "CUBE_NAME"    => $this->wildcard( $cubeNamePattern ),
+         "SET_NAME"     => $this->wildcard( $setNamePattern )
       ) );
    }
 
@@ -430,6 +430,6 @@ class XMLADatabaseMetaData implements IOLAPDatabaseMetaData
 
    public function __call( $name, $arguments )
    {
-      throw new OLAPException( 'Unsupported Operation: ' . $name );
+      throw new OLAPException('Unsupported Operation: ' . $name);
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLADimension.php b/provider/xmla/XMLADimension.php
index 600b082..404594d 100644
--- a/provider/xmla/XMLADimension.php
+++ b/provider/xmla/XMLADimension.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -61,16 +61,16 @@ class XMLADimension extends XMLAElement implements IDimension
    /**
     * Constructor
     *
-    * @param XMLACube $cube
-    * @param $uniqueName
-    * @param $name
-    * @param $caption
-    * @param $description
+    * @param XMLACube      $cube
+    * @param               $uniqueName
+    * @param               $name
+    * @param               $caption
+    * @param               $description
     * @param DimensionType $type
-    * @param $defaultHierarchyUniqueName
-    * @param $ordinal
+    * @param               $defaultHierarchyUniqueName
+    * @param               $ordinal
     */
-   public function __construct (
+   public function __construct(
       XMLACube $cube,
       $uniqueName,
       $name,
@@ -80,46 +80,46 @@ class XMLADimension extends XMLAElement implements IDimension
       $defaultHierarchyUniqueName,
       $ordinal )
    {
-      if ( empty( $cube ) || $cube == NULL ) throw new OLAPException( 'XMLADimension: $cube cannot be NULL' );
+      if ( empty($cube) || $cube == NULL ) throw new OLAPException('XMLADimension: $cube cannot be NULL');
       parent::__construct( $uniqueName, $name, $caption, $description );
       $this->defaultHierarchyUniqueName = $defaultHierarchyUniqueName;
-      $this->cube = $cube;
-      $this->type = $type;
-      $this->ordinal = (int)$ordinal;
+      $this->cube                       = $cube;
+      $this->type                       = $type;
+      $this->ordinal                    = (int)$ordinal;
 
       $this->dimensionRestrictions = array(
-          'CATALOG_NAME' => $this->cube->getSchema()->getCatalog()->getName(),
-          'SCHEMA_NAME' => $this->cube->getSchema()->getName(),
-          'CUBE_NAME' => $this->cube->getName(),
-          'DIMENSION_UNIQUE_NAME' => $this->getUniqueName()
+         'CATALOG_NAME'          => $this->cube->getSchema()->getCatalog()->getName(),
+         'SCHEMA_NAME'           => $this->cube->getSchema()->getName(),
+         'CUBE_NAME'             => $this->cube->getName(),
+         'DIMENSION_UNIQUE_NAME' => $this->getUniqueName()
       );
 
       $this->hierarchies = new LazyMetadataList(
-              new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_HIERARCHIES ),
-              new XMLAConnectionContext(
-                      $this->cube->getSchema()->getCatalog()->getMetadata()->getConnection(),
-                      $this->cube->getSchema()->getCatalog()->getMetadata(),
-                      $this->cube->getSchema()->getCatalog(),
-                      $this->cube->getSchema(),
-                      $this->cube,
-                      $this,
-                      NULL, NULL ),
-              new XMLAHierarchyHandler( $this->cube ),
-              $this->dimensionRestrictions);
+         new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_HIERARCHIES),
+         new XMLAConnectionContext(
+            $this->cube->getSchema()->getCatalog()->getMetadata()->getConnection(),
+            $this->cube->getSchema()->getCatalog()->getMetadata(),
+            $this->cube->getSchema()->getCatalog(),
+            $this->cube->getSchema(),
+            $this->cube,
+            $this,
+            NULL, NULL),
+         new XMLAHierarchyHandler($this->cube),
+         $this->dimensionRestrictions);
    }
 
    /**
     *
     * @return DimensionType
     */
-   public function getDimensionType ( )
+   public function getDimensionType()
    {
       return $this->type;
    }
 
    /**
     * @brief Gets the XMLACube this XMLADimension uses
-    * 
+    *
     * @return XMLACube
     */
    public function getCube()
@@ -133,7 +133,7 @@ class XMLADimension extends XMLAElement implements IDimension
     */
    public function getDefaultHierarchy()
    {
-      for( $i = 0; $i < $this->hierarchies->size(); $i++ )
+      for ( $i = 0; $i < $this->hierarchies->size(); $i++ )
       {
          $hierarchy = $this->hierarchies->get( $i );
          if ( $hierarchy->getUniqueName() == $this->defaultHierarchyUniqueName ) return $hierarchy;
@@ -146,6 +146,7 @@ class XMLADimension extends XMLAElement implements IDimension
    /**
     *
     * @param mixed $obj
+    *
     * @return boolean
     */
    public function equals( $obj )
@@ -177,7 +178,7 @@ class XMLADimension extends XMLAElement implements IDimension
    }
 
 
-   public function isVisible ( )
+   public function isVisible()
    {
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLAElement.php b/provider/xmla/XMLAElement.php
index 227a7ac..6c300fc 100644
--- a/provider/xmla/XMLAElement.php
+++ b/provider/xmla/XMLAElement.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -42,50 +42,50 @@ abstract class XMLAElement implements IMetadataElement, INamed
    protected $description;
    private $hash;
 
-   public function __construct (
+   public function __construct(
       $uniqueName,
       $name,
       $caption,
       $description
-      )
+   )
    {
-      assert ( $uniqueName != null );
-      assert ( $description !== null );
-      assert ( $name != null );
-      assert ( $caption != null );
+      assert( $uniqueName != null );
+      assert( $description !== null );
+      assert( $name != null );
+      assert( $caption != null );
       $this->description = $description;
-      $this->uniqueName = $uniqueName;
-      $this->caption = $caption;
-      $this->name = $name;
+      $this->uniqueName  = $uniqueName;
+      $this->caption     = $caption;
+      $this->name        = $name;
    }
 
-   public function getName ( )
+   public function getName()
    {
       return $this->name;
    }
 
-   public function getUniqueName ( )
+   public function getUniqueName()
    {
       return $this->uniqueName;
    }
 
-   public function getCaption ( )
+   public function getCaption()
    {
       return $this->caption;
    }
 
-   public function getDescription( )
+   public function getDescription()
    {
       return $this->description;
    }
 
-   public function hashCode ( )
+   public function hashCode()
    {
-      if ( empty( $this->hash ) )
+      if ( empty($this->hash) )
       {
          $this->hash = XMLAUtil::javaStringHashCode( $this->uniqueName );
       }
 
       return $this->hash;
-    }
-}
\ No newline at end of file
+   }
+}
diff --git a/provider/xmla/XMLAHierarchy.php b/provider/xmla/XMLAHierarchy.php
index 9f23215..600a5a8 100644
--- a/provider/xmla/XMLAHierarchy.php
+++ b/provider/xmla/XMLAHierarchy.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -36,6 +36,7 @@ use OLAP4PHP\Provider\XMLA\XMLALevel;
 use OLAP4PHP\Provider\XMLA\Metadata\LazyMetadataList;
 use OLAP4PHP\Provider\XMLA\XMLAMetadataRequest;
 use OLAP4PHP\Provider\XMLA\XMLAConnectionContext;
+
 //use OLAP4PHP\Provider\XMLA\Metadata\XMLALevel;
 use OLAP4PHP\Provider\XMLA\Metadata\XMLALevelHandler;
 
@@ -74,36 +75,36 @@ class XMLAHierarchy extends XMLAElement implements IHierarchy
     *
     * @param
     */
-   public function __construct ( XMLADimension $dimension, $uniqueName, $name, $caption, $description, $all, $defaultMemberUniqueName )
+   public function __construct( XMLADimension $dimension, $uniqueName, $name, $caption, $description, $all, $defaultMemberUniqueName )
    {
-      if ( empty( $dimension ) || $dimension == NULL ) throw new OLAPException( 'XMLAHierarchy: $dimension cannot be NULL' );
+      if ( empty($dimension) || $dimension == NULL ) throw new OLAPException('XMLAHierarchy: $dimension cannot be NULL');
       parent::__construct( $uniqueName, $name, $caption, $description );
 
-      $this->dimension = $dimension;
-      $this->all = (boolean)$all;
+      $this->dimension               = $dimension;
+      $this->all                     = (boolean)$all;
       $this->defaultMemberUniqueName = $defaultMemberUniqueName;
 
       $this->hierarchyRestrictions = array(
-          'CATALOG_NAME' => $this->dimension->getCube()->getSchema()->getCatalog()->getName(),
-          'SCHEMA_NAME' => $this->dimension->getCube()->getSchema()->getName(),
-          'CUBE_NAME' => $this->dimension->getCube()->getName(),
-          'DIMENSION_UNIQUE_NAME' => $this->dimension->getUniqueName(),
-          'HIERARCHY_UNIQUE_NAME' => $this->getUniqueName()
+         'CATALOG_NAME'          => $this->dimension->getCube()->getSchema()->getCatalog()->getName(),
+         'SCHEMA_NAME'           => $this->dimension->getCube()->getSchema()->getName(),
+         'CUBE_NAME'             => $this->dimension->getCube()->getName(),
+         'DIMENSION_UNIQUE_NAME' => $this->dimension->getUniqueName(),
+         'HIERARCHY_UNIQUE_NAME' => $this->getUniqueName()
       );
 
       $this->levels = new LazyMetadataList(
-              new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_LEVELS ),
-              new XMLAConnectionContext(
-                      $this->dimension->getCube()->getSchema()->getCatalog()->getMetaData()->getConnection(),
-                      $this->dimension->getCube()->getSchema()->getCatalog()->getMetaData(),
-                      $this->dimension->getCube()->getSchema()->getCatalog(),
-                      $this->dimension->getCube()->getSchema(),
-                      $this->dimension->getCube(),
-                      $this->dimension,
-                      $this,
-                      NULL ),
-              new XMLALevelHandler( $this->dimension->getCube() ),
-              $this->hierarchyRestrictions);
+         new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_LEVELS),
+         new XMLAConnectionContext(
+            $this->dimension->getCube()->getSchema()->getCatalog()->getMetaData()->getConnection(),
+            $this->dimension->getCube()->getSchema()->getCatalog()->getMetaData(),
+            $this->dimension->getCube()->getSchema()->getCatalog(),
+            $this->dimension->getCube()->getSchema(),
+            $this->dimension->getCube(),
+            $this->dimension,
+            $this,
+            NULL),
+         new XMLALevelHandler($this->dimension->getCube()),
+         $this->hierarchyRestrictions);
    }
 
    /**
@@ -139,26 +140,27 @@ class XMLAHierarchy extends XMLAElement implements IHierarchy
     */
    public function getDefaultMember()
    {
-      if ( empty( $this->defaultMemberUniqueName ) ) return NULL;
+      if ( empty($this->defaultMemberUniqueName) ) return NULL;
 
       return $this->dimension->getCube()->getMetadataReader()->lookupMemberByUniqueName( $this->defaultMemberUniqueName );
    }
 
    /**
     *
-    * @return NamedList 
+    * @return NamedList
     */
    public function getRootMembers()
    {
-      return new NamedList ( $this->dimension
-                                  ->getCube ( )
-                                  ->getMetadataReader ( )
-                                  ->getLevelMembers ( $this->levels->get ( 0 ) ) );
+      return new NamedList ($this->dimension
+         ->getCube()
+         ->getMetadataReader()
+         ->getLevelMembers( $this->levels->get( 0 ) ));
    }
 
    /**
     *
     * @param mixed $obj
+    *
     * @return boolean
     */
    public function equals( $obj )
@@ -175,4 +177,4 @@ class XMLAHierarchy extends XMLAElement implements IHierarchy
    {
       return TRUE;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLALevel.php b/provider/xmla/XMLALevel.php
index f11d2e9..334b15e 100644
--- a/provider/xmla/XMLALevel.php
+++ b/provider/xmla/XMLALevel.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -45,30 +45,30 @@ use OLAP4PHP\Provider\XMLA\Metadata\XMLAMeasureHandler;
  */
 class XMLALevel extends XMLAElement implements ILevel, INamed
 {
-   public  $hierarchy;
+   public $hierarchy;
    private $depth;
    private $type;
    private $cardinality;
    private $propertyList;
-   public  $memberList;
+   public $memberList;
    private $calculated;
 
    /**
-     * Constructor
-     *
-     * @param XMLAHierarchy $hierarchy
-     * @param string $uniqueName Unique name
-     * @param string $name Name
-     * @param string $caption Caption
-     * @param string $description Description
-     * @param integer $depth Distance to root
-     * @param LevelType $type Level type
-     * @param boolean $calculated Whether level is calculated
-     * @param integer $cardinality Number of members in this level
-     */
-   public function __construct (
+    * Constructor
+    *
+    * @param XMLAHierarchy $hierarchy
+    * @param string        $uniqueName  Unique name
+    * @param string        $name        Name
+    * @param string        $caption     Caption
+    * @param string        $description Description
+    * @param integer       $depth       Distance to root
+    * @param LevelType     $type        Level type
+    * @param boolean       $calculated  Whether level is calculated
+    * @param integer       $cardinality Number of members in this level
+    */
+   public function __construct(
       XMLAHierarchy $hierarchy,
-      $uniqueName, 
+      $uniqueName,
       $name,
       $caption,
       $description,
@@ -76,105 +76,105 @@ class XMLALevel extends XMLAElement implements ILevel, INamed
       LevelType $type = NULL,
       $calculated,
       $cardinality
-      )
+   )
    {
-      parent::__construct ( $uniqueName, $name, $caption, $description );
-      assert ( $hierarchy != null );
-      $this->type = $type;
-      $this->calculated = $calculated;
+      parent::__construct( $uniqueName, $name, $caption, $description );
+      assert( $hierarchy != null );
+      $this->type        = $type;
+      $this->calculated  = $calculated;
       $this->cardinality = $cardinality;
-      $this->depth = $depth;
-      $this->hierarchy = $hierarchy;
-
-      $levelRestrictions = array (
-         "CATALOG_NAME"          => $hierarchy->getDimension ( )->getCube ( )->getSchema ( )->getCatalog ( )->getName ( ),
-         "SCHEMA_NAME"           => $hierarchy->getDimension ( )->getCube ( )->getSchema ( )->getName(),
-         "CUBE_NAME"             => $hierarchy->getDimension ( )->getCube ( )->getName(),
-         "DIMENSION_UNIQUE_NAME" => $hierarchy->getDimension ( )->getUniqueName(),
+      $this->depth       = $depth;
+      $this->hierarchy   = $hierarchy;
+
+      $levelRestrictions = array(
+         "CATALOG_NAME"          => $hierarchy->getDimension()->getCube()->getSchema()->getCatalog()->getName(),
+         "SCHEMA_NAME"           => $hierarchy->getDimension()->getCube()->getSchema()->getName(),
+         "CUBE_NAME"             => $hierarchy->getDimension()->getCube()->getName(),
+         "DIMENSION_UNIQUE_NAME" => $hierarchy->getDimension()->getUniqueName(),
          "HIERARCHY_UNIQUE_NAME" => $hierarchy->getUniqueName(),
-         "LEVEL_UNIQUE_NAME"     => $this->getUniqueName ( )
+         "LEVEL_UNIQUE_NAME"     => $this->getUniqueName()
       );
 
       $this->propertyList = new LazyMetadataList (
-         new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_PROPERTIES ),
-         XMLAConnectionContext::createAtLevel ( $this ),
-         new XMLAPropertyHandler ( ),
-         $levelRestrictions );
+         new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_PROPERTIES),
+         XMLAConnectionContext::createAtLevel( $this ),
+         new XMLAPropertyHandler (),
+         $levelRestrictions);
 
       try
       {
-         if ( $hierarchy->getDimension ( )->getDimensionType ( ) == DimensionType::getEnum ( DimensionType::MEASURE ) )
+         if ( $hierarchy->getDimension()->getDimensionType() == DimensionType::getEnum( DimensionType::MEASURE ) )
          {
-            $restrictions = array (
-               "CATALOG_NAME"          => $hierarchy->getDimension ( )->getCube ( )->getSchema ( )->getCatalog ( )->getName ( ),
-               "SCHEMA_NAME"           => $hierarchy->getDimension ( )->getCube ( )->getSchema ( )->getName ( ),
-               "CUBE_NAME"             => $hierarchy->getDimension ( )->getCube ( )->getName ( )
+            $restrictions = array(
+               "CATALOG_NAME"          => $hierarchy->getDimension()->getCube()->getSchema()->getCatalog()->getName(),
+               "SCHEMA_NAME"           => $hierarchy->getDimension()->getCube()->getSchema()->getName(),
+               "CUBE_NAME"             => $hierarchy->getDimension()->getCube()->getName()
             );
 
             $this->memberList =
                new LazyMetadataList (
-                  new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_MEASURES ),
+                  new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_MEASURES),
                   new XMLAConnectionContext (
-                      $hierarchy->getDimension ( )->getCube ( )->getSchema ( )->getCatalog ( )->getMetadata ( )->getConnection ( ),
-                      $hierarchy->getDimension ( )->getCube ( )->getSchema ( )->getCatalog ( )->getMetadata ( ),
-                      $hierarchy->getDimension ( )->getCube ( )->getSchema ( )->getCatalog ( ),
-                      $hierarchy->getDimension ( )->getCube ( )->getSchema ( ),
-                      $hierarchy->getDimension ( )->getCube ( ),
-                      $hierarchy->getDimension ( ),
-                      $hierarchy,
-                      $this ),
+                     $hierarchy->getDimension()->getCube()->getSchema()->getCatalog()->getMetadata()->getConnection(),
+                     $hierarchy->getDimension()->getCube()->getSchema()->getCatalog()->getMetadata(),
+                     $hierarchy->getDimension()->getCube()->getSchema()->getCatalog(),
+                     $hierarchy->getDimension()->getCube()->getSchema(),
+                     $hierarchy->getDimension()->getCube(),
+                     $hierarchy->getDimension(),
+                     $hierarchy,
+                     $this),
                   new XMLAMeasureHandler (
-                      $hierarchy->getDimension ( ),
-                      $restrictions ) );
-         } 
+                     $hierarchy->getDimension(),
+                     $restrictions));
+         }
          else
          {
             $this->memberList =
                new LazyMetadataList (
-                 new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_MEMBERS ),
-                 new XMLAConnectionContext (
-                      $hierarchy->getDimension ( )->getCube ( )->getSchema ( )->getCatalog ( )->getMetadata ( )->getConnection ( ),
-                      $hierarchy->getDimension ( )->getCube ( )->getSchema ( )->getCatalog ( )->getMetadata ( ),
-                      $hierarchy->getDimension ( )->getCube ( )->getSchema ( )->getCatalog ( ),
-                      $hierarchy->getDimension ( )->getCube ( )->getSchema ( ),
-                      $hierarchy->getDimension ( )->getCube ( ),
-                      $hierarchy->getDimension ( ),
-                      $hierarchy,
-                      $this ),
-                 new XMLAMemberHandler ( ),
-                 $levelRestrictions );
+                  new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_MEMBERS),
+                  new XMLAConnectionContext (
+                     $hierarchy->getDimension()->getCube()->getSchema()->getCatalog()->getMetadata()->getConnection(),
+                     $hierarchy->getDimension()->getCube()->getSchema()->getCatalog()->getMetadata(),
+                     $hierarchy->getDimension()->getCube()->getSchema()->getCatalog(),
+                     $hierarchy->getDimension()->getCube()->getSchema(),
+                     $hierarchy->getDimension()->getCube(),
+                     $hierarchy->getDimension(),
+                     $hierarchy,
+                     $this),
+                  new XMLAMemberHandler (),
+                  $levelRestrictions);
          }
-      } 
+      }
       catch ( OlapException $e )
       {
-         throw new RuntimeException ( "Programming error", $e );
+         throw new RuntimeException ("Programming error", $e);
       }
    }
 
-   public function getDepth ( )
+   public function getDepth()
    {
       return $this->depth;
    }
 
-   public function getHierarchy ( )
+   public function getHierarchy()
    {
       return $this->hierarchy;
    }
 
-   public function getDimension ( )
+   public function getDimension()
    {
-      return $this->hierarchy->getDimension ( );
+      return $this->hierarchy->getDimension();
    }
 
-   public function isCalculated ( )
+   public function isCalculated()
    {
       return $this->calculated;
    }
 
    /**
-   * return LevelType
-   */
-   public function getLevelType ( )
+    * return LevelType
+    */
+   public function getLevelType()
    {
       return $this->type;
    }
@@ -182,22 +182,22 @@ class XMLALevel extends XMLAElement implements ILevel, INamed
    /**
     * @return NamedList
     */
-   public function getProperties ( )
+   public function getProperties()
    {
       // standard properties first
-      $list = new NamedList ( StandardMemberProperty::getEnumConstants ( ) );
+      $list = new NamedList (StandardMemberProperty::getEnumConstants());
       // then level-specific properties
-      $list->addAll ( $this->propertyList );
+      $list->addAll( $this->propertyList );
 
       return $list;
    }
 
-   public function getMembers ( )
+   public function getMembers()
    {
       return $this->memberList;
    }
 
-   public function getCardinality ( )
+   public function getCardinality()
    {
       return $this->cardinality;
    }
@@ -206,4 +206,4 @@ class XMLALevel extends XMLAElement implements ILevel, INamed
    {
       return TRUE;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLAMeasure.php b/provider/xmla/XMLAMeasure.php
index d67573c..4b9b22c 100644
--- a/provider/xmla/XMLAMeasure.php
+++ b/provider/xmla/XMLAMeasure.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -59,7 +59,7 @@ class XMLAMeasure extends XMLAMember implements IMeasure, INamed
     * @param $ordinal
     *
     */
-   public function __construct (
+   public function __construct(
       XMLALevel $level,
       $uniqueName,
       $name,
@@ -70,43 +70,43 @@ class XMLAMeasure extends XMLAMember implements IMeasure, INamed
       $datatype,
       $visible,
       $ordinal
-      )
+   )
    {
-      parent::__construct (
+      parent::__construct(
          $level,
          $uniqueName,
          $name,
          $caption,
          $description,
          $parentMemberUniqueName,
-         $aggregator == Aggregator::getEnum ( Aggregator::CALCULATED )
-            ? MemberType::getEnum ( MemberType::FORMULA )
-            : MemberType::getEnum ( MemberType::MEASURE ),
+         $aggregator == Aggregator::getEnum( Aggregator::CALCULATED )
+            ? MemberType::getEnum( MemberType::FORMULA )
+            : MemberType::getEnum( MemberType::MEASURE ),
          0,
          $ordinal,
-         array ( )
+         array()
       );
 
-      assert ( $level->getHierarchy ( )->getDimension ( )->getDimensionType ( )
-               == DimensionType::getEnum ( DimensionType::MEASURE ) );
+      assert( $level->getHierarchy()->getDimension()->getDimensionType()
+                 == DimensionType::getEnum( DimensionType::MEASURE ) );
 
       $this->aggregator = $aggregator;
-      $this->datatype = $datatype;
-      $this->visible = $visible;
+      $this->datatype   = $datatype;
+      $this->visible    = $visible;
    }
 
-   public function getAggregator ( )
+   public function getAggregator()
    {
       return $this->aggregator;
    }
 
-   public function getDatatype ( )
+   public function getDatatype()
    {
       return $this->datatype;
    }
 
-   public function isVisible ( )
+   public function isVisible()
    {
       return $this->visible;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLAMember.php b/provider/xmla/XMLAMember.php
index 0d33ee5..14cc8f3 100644
--- a/provider/xmla/XMLAMember.php
+++ b/provider/xmla/XMLAMember.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -53,12 +53,13 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
    private $propertyValueMap;
    private $type;
    private $hash;
-   /// array [ IProperty ] => Object 
+
+   /// array [ IProperty ] => Object
 
    /**
     * Constructor
     */
-   public function __construct (
+   public function __construct(
       XMLALevel $level,
       $uniqueName,
       $name,
@@ -69,22 +70,22 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
       $childMemberCount,
       $ordinal,
       array $propertyValueMap
-      )
+   )
    {
-      parent::__construct ( $uniqueName, $name, $caption, $description );
+      parent::__construct( $uniqueName, $name, $caption, $description );
       $this->ordinal = $ordinal;
-      assert ( $level != null );
-      assert ( $type != null );
-      $this->level = $level;
+      assert( $level != null );
+      assert( $type != null );
+      $this->level                  = $level;
       $this->parentMemberUniqueName = $parentMemberUniqueName;
-      $this->type = $type;
-      $this->childMemberCount = $childMemberCount;
-      $this->propertyValueMap = $propertyValueMap;
+      $this->type                   = $type;
+      $this->childMemberCount       = $childMemberCount;
+      $this->propertyValueMap       = $propertyValueMap;
    }
 
    public function hashCode()
    {
-      if ( empty( $this->hash ) ) $this->hash = XMLAUtil::javaStringHashCode ( $this->uniqueName );
+      if ( empty($this->hash) ) $this->hash = XMLAUtil::javaStringHashCode( $this->uniqueName );
       return $this->hash;
    }
 
@@ -101,14 +102,14 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
    /**
     * @return array XMLAMember
     */
-   public function getAncestorMembers ( )
+   public function getAncestorMembers()
    {
       $list = array();
-      $m = $this->getParentMember();
+      $m    = $this->getParentMember();
       while ( $m != NULL )
       {
          $list[] = $m;
-         $m = $m->getParentMember();
+         $m      = $m->getParentMember();
       }
 
       return $list;
@@ -118,7 +119,7 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
    /**
     * @return int
     */
-   public function getChildMemberCount ( )
+   public function getChildMemberCount()
    {
       return $this->childMemberCount;
    }
@@ -127,18 +128,18 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
    /**
     * @return NamedList
     */
-   public function getChildMembers ( )
+   public function getChildMembers()
    {
       $list = new NamedList();
       $cube = $this->getCube();
-      $cube->getMetadataReader()->lookupMemberRelatives( new XMLATreeOp( XMLATreeOp::CHILDREN ), $this->uniqueName, $list );
+      $cube->getMetadataReader()->lookupMemberRelatives( new XMLATreeOp(XMLATreeOp::CHILDREN), $this->uniqueName, $list );
       return $list;
    }
 
    /**
     * @return XMLADimension
     */
-   public function getDimension ( )
+   public function getDimension()
    {
       return $this->level->getHierarchy()->getDimension();
    }
@@ -147,7 +148,7 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
    /**
     * @return XMLAHierarchy
     */
-   public function getHierarchy ( )
+   public function getHierarchy()
    {
       return $this->level->getHierarchy();
    }
@@ -156,7 +157,7 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
    /**
     * @return XMLALevel
     */
-   public function getLevel ( )
+   public function getLevel()
    {
       return $this->level;
    }
@@ -165,7 +166,7 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
    /**
     * @return MemberType
     */
-   public function getMemberType ( )
+   public function getMemberType()
    {
       return $this->type;
    }
@@ -174,11 +175,11 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
    /**
     * @return XMLAMember
     */
-   public function getParentMember ( )
+   public function getParentMember()
    {
-      if ( empty( $this->parentMemberUniqueName ) ) return NULL;
+      if ( empty($this->parentMemberUniqueName) ) return NULL;
 
-      if ( empty( $this->parentMember ) )
+      if ( empty($this->parentMember) )
       {
          $this->parentMember = $this->getCube()->getMetadataReader()->lookupMemberByUniqueName( $this->parentMemberUniqueName );
       }
@@ -211,14 +212,15 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
 
    /**
     *
-    * @param string $property
+    * @param string     $property
     * @param XMLAMember $member
-    * @param array $map
+    * @param array      $map
+    *
     * @return mixed
     */
    protected function _getPropertyValue( $property, XMLAMember $member, array $map )
    {
-      if ( isset( $map[$property] ) ) return $map[$property];
+      if ( isset($map[$property]) ) return $map[$property];
 
       switch ( $property )
       {
@@ -274,10 +276,10 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
             return 1;
 
          case 'PARENT_LEVEL':
-            return ( $member->getParentMember() == NULL ) ? 0 : $member->getParentMember()->getDepth();
+            return ($member->getParentMember() == NULL) ? 0 : $member->getParentMember()->getDepth();
 
          case 'PARENT_UNIQUE_NAME':
-            return ( $member->getParentMember() == NULL ) ? NULL : $member->getParentMember()->getUniqueName();
+            return ($member->getParentMember() == NULL) ? NULL : $member->getParentMember()->getUniqueName();
 
          case 'SCHEMA_NAME':
             return $member->getCube()->getSchema()->getName();
@@ -354,11 +356,11 @@ class XMLAMember extends XMLAElement implements IXMLAMember, INamed
 
    public function getDataMember()
    {
-      
+
    }
 
    public function isHidden()
    {
       return FALSE;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLAMemberUndefined.php b/provider/xmla/XMLAMemberUndefined.php
index 3c23d80..1d6757c 100644
--- a/provider/xmla/XMLAMemberUndefined.php
+++ b/provider/xmla/XMLAMemberUndefined.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -47,18 +47,18 @@ class XMLAMemberUndefined extends XMLAElement implements IXMLAMember, INamed
    private $level;
    private $hierarchy;
    private $lnum;
-   
+
    /**
     * Constructor
     *
-    * @param XMLACellSet $cellSet
-    * @param XMLALevel $level
+    * @param XMLACellSet   $cellSet
+    * @param XMLALevel     $level
     * @param XMLAHierarchy $hierarchy
-    * @param int $lnum Level number
-    * @param string $caption Caption
-    * @param string $uname Member unique name
+    * @param int           $lnum    Level number
+    * @param string        $caption Caption
+    * @param string        $uname   Member unique name
     */
-   public function __construct (
+   public function __construct(
       XMLACellSet $cellSet,
       XMLALevel $level,
       XMLAHierarchy $hierarchy,
@@ -74,62 +74,62 @@ class XMLAMemberUndefined extends XMLAElement implements IXMLAMember, INamed
       $this->uniqueName = $uname;
    }
 
-   public function getCube ( )
+   public function getCube()
    {
-      return $cellSet->getMetaData ( )->getCube ( );
+      return $this->cellSet->getMetaData()->getCube();
    }
 
    public function getConnection()
    {
-      return $this->getCatalog ( )->getMetaData ( )->getConnection ( );
+      return $this->getCatalog()->getMetaData()->getConnection();
    }
 
-   public function getCatalog ( )
+   public function getCatalog()
    {
-      return $this->getCube ( )->getSchema ( )->getCatalog ( );
+      return $this->getCube()->getSchema()->getCatalog();
    }
 
-   public function getPropertyValueMap ( )
+   public function getPropertyValueMap()
    {
-      return array ( );
+      return array();
    }
 
-   public function getChildMembers ( )
+   public function getChildMembers()
    {
-      return Olap4jUtil.emptyNamedList ( );
+      //return Olap4jUtil::emptyNamedList ( );
    }
 
-   public function getChildMemberCount ( )
+   public function getChildMemberCount()
    {
       return 0;
    }
 
-   public function getParentMember ( )
+   public function getParentMember()
    {
       return null;
    }
 
-   public function getLevel ( )
+   public function getLevel()
    {
       return $this->level;
    }
 
-   public function getHierarchy ( )
+   public function getHierarchy()
    {
       return $this->hierarchy;
    }
 
-   public function getDimension ( )
+   public function getDimension()
    {
-      return $this->hierarchy->getDimension ( );
+      return $this->hierarchy->getDimension();
    }
 
-   public function getMemberType ( )
+   public function getMemberType()
    {
-      return new MemberType ( MemberType::UNKNOWN );
+      return new MemberType (MemberType::UNKNOWN);
    }
 
-   public function isAll ( )
+   public function isAll()
    {
       return false; // FIXME
    }
@@ -139,74 +139,74 @@ class XMLAMemberUndefined extends XMLAElement implements IXMLAMember, INamed
       return false; // FIXME
    }
 
-   public function isCalculated ( )
+   public function isCalculated()
    {
       return false; // FIXME
    }
 
-   public function getSolveOrder ( )
+   public function getSolveOrder()
    {
       return 0; // FIXME
    }
 
-   public function getExpression ( )
+   public function getExpression()
    {
       return null;
    }
 
-   public function getAncestorMembers ( )
+   public function getAncestorMembers()
    {
-      return array ( ); // FIXME
+      return array(); // FIXME
    }
 
-   public function isCalculatedInQuery ( )
+   public function isCalculatedInQuery()
    {
       return true; // probably
    }
 
-   public function getPropertyValue ( $property )
+   public function getPropertyValue( $property )
    {
       return null;
    }
 
-   public function getPropertyFormattedValue ( $property )
+   public function getPropertyFormattedValue( $property )
    {
       return null;
    }
 
-   public function setProperty ( IProperty $property, $value )
+   public function setProperty( IProperty $property, $value )
    {
-      throw new \BadMethodCallException ( );
+      throw new \BadMethodCallException ();
    }
 
-   public function getProperties ( )
+   public function getProperties()
    {
-      return new NamedList ( );
+      return new NamedList ();
    }
 
-   public function getOrdinal ( )
+   public function getOrdinal()
    {
       return -1; // FIXME
    }
 
-   public function isHidden ( )
+   public function isHidden()
    {
       return false;
    }
 
-   public function getDepth ( )
+   public function getDepth()
    {
       return $this->lnum;
    }
 
-   public function getDataMember ( )
+   public function getDataMember()
    {
       return null;
    }
 
-   public function getName ( )
+   public function getName()
    {
       return $this->caption;
    }
 
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLAMetadataColumn.php b/provider/xmla/XMLAMetadataColumn.php
index 9fc316a..c958566 100644
--- a/provider/xmla/XMLAMetadataColumn.php
+++ b/provider/xmla/XMLAMetadataColumn.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -28,7 +28,7 @@ namespace OLAP4PHP\Provider\XMLA;
 use OLAP4PHP\Provider\XMLA\XMLAUtil;
 
 /**
- * 
+ *
  */
 class XMLAMetadataColumn
 {
@@ -44,11 +44,11 @@ class XMLAMetadataColumn
 
    /**
     * @brief Metadata Column Object
-    * 
+    *
     * @param string $xmlaName
     * @param string $name
     */
-   public function __construct ( $xmlaName, $name = NULL )
+   public function __construct( $xmlaName, $name = NULL )
    {
       $this->xmlaName = $xmlaName;
 
@@ -58,8 +58,8 @@ class XMLAMetadataColumn
       }
       else
       {
-         $name = strtoupper ( $xmlaName );
-         $this->name = ( $name == 'VALUE' ) ? 'PROPERTY_VALUE' : $name;
+         $name       = strtoupper( $xmlaName );
+         $this->name = ($name == 'VALUE') ? 'PROPERTY_VALUE' : $name;
       }
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLAMetadataRequest.php b/provider/xmla/XMLAMetadataRequest.php
index 0b5ea90..282c12f 100644
--- a/provider/xmla/XMLAMetadataRequest.php
+++ b/provider/xmla/XMLAMetadataRequest.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -30,28 +30,28 @@ use OLAP4PHP\Provider\XMLA\XMLAMetadataColumn;
 
 class XMLAMetadataRequest
 {
-   const DISCOVER_DATASOURCES       = 'DISCOVER_DATASOURCES';
-   const DISCOVER_SCHEMA_ROWSETS    = 'DISCOVER_SCHEMA_ROWSETS';
-   const DISCOVER_ENUMERATORS       = 'DISCOVER_ENUMERATORS';
-   const DISCOVER_PROPERTIES        = 'DISCOVER_PROPERTIES';
-   const DISCOVER_KEYWORDS          = 'DISCOVER_KEYWORDS';
-   const DISCOVER_LITERALS          = 'DISCOVER_LITERALS';
-   const DBSCHEMA_CATALOGS          = 'DBSCHEMA_CATALOGS';
-   const DBSCHEMA_COLUMNS           = 'DBSCHEMA_COLUMNS';
-   const DBSCHEMA_PROVIDER_TYPES    = 'DBSCHEMA_PROVIDER_TYPES';
-   const DBSCHEMA_TABLES            = 'DBSCHEMA_TABLES';
-   const DBSCHEMA_TABLES_INFO       = 'DBSCHEMA_TABLES_INFO';
-   const DBSCHEMA_SCHEMATA          = 'DBSCHEMA_SCHEMATA';
-   const MDSCHEMA_ACTIONS           = 'MDSCHEMA_ACTIONS';
-   const MDSCHEMA_CUBES             = 'MDSCHEMA_CUBES';
-   const MDSCHEMA_DIMENSIONS        = 'MDSCHEMA_DIMENSIONS';
-   const MDSCHEMA_FUNCTIONS         = 'MDSCHEMA_FUNCTIONS';
-   const MDSCHEMA_HIERARCHIES       = 'MDSCHEMA_HIERARCHIES';
-   const MDSCHEMA_LEVELS            = 'MDSCHEMA_LEVELS';
-   const MDSCHEMA_MEASURES          = 'MDSCHEMA_MEASURES';
-   const MDSCHEMA_MEMBERS           = 'MDSCHEMA_MEMBERS';
-   const MDSCHEMA_PROPERTIES        = 'MDSCHEMA_PROPERTIES';
-   const MDSCHEMA_SETS              = 'MDSCHEMA_SETS';
+   const DISCOVER_DATASOURCES    = 'DISCOVER_DATASOURCES';
+   const DISCOVER_SCHEMA_ROWSETS = 'DISCOVER_SCHEMA_ROWSETS';
+   const DISCOVER_ENUMERATORS    = 'DISCOVER_ENUMERATORS';
+   const DISCOVER_PROPERTIES     = 'DISCOVER_PROPERTIES';
+   const DISCOVER_KEYWORDS       = 'DISCOVER_KEYWORDS';
+   const DISCOVER_LITERALS       = 'DISCOVER_LITERALS';
+   const DBSCHEMA_CATALOGS       = 'DBSCHEMA_CATALOGS';
+   const DBSCHEMA_COLUMNS        = 'DBSCHEMA_COLUMNS';
+   const DBSCHEMA_PROVIDER_TYPES = 'DBSCHEMA_PROVIDER_TYPES';
+   const DBSCHEMA_TABLES         = 'DBSCHEMA_TABLES';
+   const DBSCHEMA_TABLES_INFO    = 'DBSCHEMA_TABLES_INFO';
+   const DBSCHEMA_SCHEMATA       = 'DBSCHEMA_SCHEMATA';
+   const MDSCHEMA_ACTIONS        = 'MDSCHEMA_ACTIONS';
+   const MDSCHEMA_CUBES          = 'MDSCHEMA_CUBES';
+   const MDSCHEMA_DIMENSIONS     = 'MDSCHEMA_DIMENSIONS';
+   const MDSCHEMA_FUNCTIONS      = 'MDSCHEMA_FUNCTIONS';
+   const MDSCHEMA_HIERARCHIES    = 'MDSCHEMA_HIERARCHIES';
+   const MDSCHEMA_LEVELS         = 'MDSCHEMA_LEVELS';
+   const MDSCHEMA_MEASURES       = 'MDSCHEMA_MEASURES';
+   const MDSCHEMA_MEMBERS        = 'MDSCHEMA_MEMBERS';
+   const MDSCHEMA_PROPERTIES     = 'MDSCHEMA_PROPERTIES';
+   const MDSCHEMA_SETS           = 'MDSCHEMA_SETS';
 
    /**
     * @var array of XMLAMetadataColumn
@@ -67,7 +67,7 @@ class XMLAMetadataRequest
     * @var string
     */
    private $requestName;
-   
+
    /**
     * Indicates if a request can be cached or not
     * @var boolean
@@ -83,20 +83,20 @@ class XMLAMetadataRequest
     *
     * @param string $requestType
     */
-   public function __construct ( $requestType )
+   public function __construct( $requestType )
    {
       switch ( $requestType )
       {
          case self::DBSCHEMA_CATALOGS:
-            
-            $this->columns = array( new XMLAMetadataColumn( "CATALOG_NAME", "TABLE_CAT" ) );
+
+            $this->columns = array( new XMLAMetadataColumn("CATALOG_NAME", "TABLE_CAT") );
             break;
 
-         case 
-            $this->columns = array (
-               new XMLAMetadataColumn( "SCHEMA_NAME", "TABLE_SCHEM" ),
-               new XMLAMetadataColumn( "CATALOG_NAME", "TABLE_CAT" )
-            );
+         case
+         $this->columns = array(
+            new XMLAMetadataColumn("SCHEMA_NAME", "TABLE_SCHEM"),
+            new XMLAMetadataColumn("CATALOG_NAME", "TABLE_CAT")
+         );
             break;
 
          case self::DISCOVER_DATASOURCES:
@@ -144,7 +144,7 @@ class XMLAMetadataRequest
 
          case self::DISCOVER_KEYWORDS:
             $this->columns = array(
-                new XMLAMetadataColumn("Keyword")
+               new XMLAMetadataColumn("Keyword")
             );
             break;
 
@@ -159,7 +159,7 @@ class XMLAMetadataRequest
             break;
 
          case self::DBSCHEMA_CATALOGS:
-            $this->columns = array(
+            $this->columns    = array(
                new XMLAMetadataColumn("CATALOG_NAME"),
                new XMLAMetadataColumn("DESCRIPTION"),
                new XMLAMetadataColumn("ROLES"),
@@ -428,7 +428,7 @@ class XMLAMetadataRequest
             break;
 
          default:
-            throw new OLAPException( 'Unsupported metadata request type ' . $requestType );
+            throw new OLAPException('Unsupported metadata request type ' . $requestType);
       }
 
       $this->requestName = $requestType;
@@ -473,14 +473,15 @@ class XMLAMetadataRequest
 
    /**
     * @brief Retrieves a column by name, or NULL if not found
-    * 
+    *
     * @param string $name - Column Name
+    *
     * @return XMLAMetadataColumn
     */
    public function getColumn( $name )
    {
-      if ( !$this->columnsByName ) $this->lazyIndexColumnsByName ( );
-      return isset( $this->columnsByName[$name] ) ? $this->columnsByName[$name] : NULL;
+      if ( !$this->columnsByName ) $this->lazyIndexColumnsByName();
+      return isset($this->columnsByName[$name]) ? $this->columnsByName[$name] : NULL;
    }
 
    public function getName()
@@ -495,17 +496,17 @@ class XMLAMetadataRequest
 
    public function getColumnNames()
    {
-      if ( !$this->columnsByName ) $this->lazyIndexColumnsByName ( );
+      if ( !$this->columnsByName ) $this->lazyIndexColumnsByName();
       return array_keys( $this->columnsByName );
    }
-   
-   private function lazyIndexColumnsByName ( )
+
+   private function lazyIndexColumnsByName()
    {
-      $this->columnsByName = array ( );
+      $this->columnsByName = array();
       foreach ( $this->columns as $column )
       {
-         $this->columnsByName [ $column->name ] = $column;
+         $this->columnsByName [$column->name] = $column;
       }
    }
-   
-}
\ No newline at end of file
+
+}
diff --git a/provider/xmla/XMLANamedSet.php b/provider/xmla/XMLANamedSet.php
index 2619f2e..81517bd 100644
--- a/provider/xmla/XMLANamedSet.php
+++ b/provider/xmla/XMLANamedSet.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -45,38 +45,38 @@ class XMLANamedSet implements INamedSet, INamed
    /**
     * Constructor
     *
-    * @param ICube $cube
+    * @param ICube  $cube
     * @param string $name
     */
-   public function __construct ( ICube $cube, $name )
+   public function __construct( ICube $cube, $name )
    {
       $this->cube = $cube;
       $this->name = $name;
    }
 
-   public function getCube ( )
+   public function getCube()
    {
       return $this->cube;
    }
 
-   public function getName ( )
+   public function getName()
    {
       return $this->name;
    }
 
-   public function getCaption ( )
+   public function getCaption()
    {
       return $this->name;
    }
 
-   public function getDescription ( )
+   public function getDescription()
    {
       return '';
    }
 
-   public function getUniqueName ( )
+   public function getUniqueName()
    {
       return $this->name;
    }
 
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLAPosition.php b/provider/xmla/XMLAPosition.php
index 725ccc6..0e761d2 100644
--- a/provider/xmla/XMLAPosition.php
+++ b/provider/xmla/XMLAPosition.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -43,7 +43,7 @@ class XMLAPosition implements IPosition
     *
     * @return array XMLAMember
     */
-   public function __construct ( array $members, $ordinal )
+   public function __construct( array $members, $ordinal )
    {
       $this->members = $members;
       $this->ordinal = $ordinal;
@@ -53,7 +53,7 @@ class XMLAPosition implements IPosition
    /**
     * @return array XMLAMember
     */
-   public function getMembers ( )
+   public function getMembers()
    {
       return $this->members;
    }
@@ -62,8 +62,8 @@ class XMLAPosition implements IPosition
    /**
     * @return int
     */
-   public function getOrdinal ( )
+   public function getOrdinal()
    {
       return $this->ordinal;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLAPositionMember.php b/provider/xmla/XMLAPositionMember.php
index 1498ec8..d2b5811 100644
--- a/provider/xmla/XMLAPositionMember.php
+++ b/provider/xmla/XMLAPositionMember.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -35,17 +35,17 @@ use OLAP4PHP\OLAP\Provider\XMLA\IXMLAMember;
 class XMLAPositionMember implements IXMLAMember
 {
    /**
-     * Creates a XMLAPositionMember.
-     *
-     * @param IXMLAMember $member Underlying member
-     * @param array propertyValues Property values
-     */
-   public function __construct ( IXMLAMember $member, array $propertyValues )
+    * Creates a XMLAPositionMember.
+    *
+    * @param IXMLAMember $member Underlying member
+    * @param             array   propertyValues Property values
+    */
+   public function __construct( IXMLAMember $member, array $propertyValues )
    {
-      assert ( $member != null );
-      assert ( $propertyValues != null );
+      assert( $member != null );
+      assert( $propertyValues != null );
 
       $this->member         = $member;
       $this->propertyValues = $propertyValues;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLAProperty.php b/provider/xmla/XMLAProperty.php
index af9acf8..09f80d8 100644
--- a/provider/xmla/XMLAProperty.php
+++ b/provider/xmla/XMLAProperty.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -26,8 +26,8 @@
 namespace OLAP4PHP\Provider\XMLA;
 
 // Interfaces
-use OLAP4PHP\MetaData\IProperty;
-use OLAP4PHP\OLAP\MetaData\INamed;
+use OLAP4PHP\Metadata\IProperty;
+use OLAP4PHP\Metadata\INamed;
 
 // Classes
 use OLAP4PHP\Metadata\DataType;
@@ -47,15 +47,15 @@ class XMLAProperty extends XMLAElement implements IProperty, INamed
    /**
     * Constructor
     *
-    * @param string $uniqueName
-    * @param string $name
-    * @param string $caption
-    * @param string $description
-    * @param Datatype $datatype
-    * @param array PropertyType $type
+    * @param string              $uniqueName
+    * @param string              $name
+    * @param string              $caption
+    * @param string              $description
+    * @param Datatype            $datatype
+    * @param                     array               PropertyType $type
     * @param PropertyContentType $contentType
     */
-   public function __construct (
+   public function __construct(
       $uniqueName,
       $name,
       $caption,
@@ -63,20 +63,20 @@ class XMLAProperty extends XMLAElement implements IProperty, INamed
       DataType $datatype,
       PropertyType $type,
       PropertyContentType $contentType
-      )
+   )
    {
-      parent::__construct ( $uniqueName, $name, $caption, $description );
+      parent::__construct( $uniqueName, $name, $caption, $description );
       $this->contentType = $contentType;
-      assert ( $datatype != null );
-      assert ( $type != null );
+      assert( $datatype != null );
+      assert( $type != null );
       $this->datatype = $datatype;
-      $this->type = $type;
+      $this->type     = $type;
    }
 
    /**
     * @return DataType
     */
-   public function getDatatype ( )
+   public function getDatatype()
    {
       return $this->datatype;
    }
@@ -84,7 +84,7 @@ class XMLAProperty extends XMLAElement implements IProperty, INamed
    /**
     * @return PropertyType
     */
-   public function getType ( )
+   public function getType()
    {
       return $this->type;
    }
@@ -92,8 +92,8 @@ class XMLAProperty extends XMLAElement implements IProperty, INamed
    /**
     * @return PropertyContentType
     */
-   public function getContentType ( )
+   public function getContentType()
    {
       return $this->contentType;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLASchema.php b/provider/xmla/XMLASchema.php
index ca03958..ad6a57f 100644
--- a/provider/xmla/XMLASchema.php
+++ b/provider/xmla/XMLASchema.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -48,32 +48,32 @@ class XMLASchema implements ISchema
     * Constructor
     *
     * @param $catalog The schema's catalog
-    * @param $name The name of the schema
-    * 
+    * @param $name    The name of the schema
+    *
     */
-   public function __construct ( XMLACatalog $catalog, $name )
+   public function __construct( XMLACatalog $catalog, $name )
    {
-      if ( $catalog == null ) throw new InvalidArgumentException ( 'Catalog cannot be null.' );
-      if ( $name == null )    throw new InvalidArgumentException ( 'Name cannot be null.' );
+      if ( $catalog == null ) throw new InvalidArgumentException ('Catalog cannot be null.');
+      if ( $name == null ) throw new InvalidArgumentException ('Name cannot be null.');
 
       $this->catalog = $catalog;
-      $this->name = $name;
+      $this->name    = $name;
 
       // Lazying loading ...
       $this->cubes = new LazyMetadataList(
-              new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_CUBES ),
-              new XMLAConnectionContext(
-                      $this->catalog->getMetaData()->getConnection(),
-                      $this->catalog->getMetaData(),
-                      $this->catalog,
-                      $this,
-                      NULL, NULL, NULL, NULL ),
-              new XMLACubeHandler() );
+         new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_CUBES),
+         new XMLAConnectionContext(
+            $this->catalog->getMetaData()->getConnection(),
+            $this->catalog->getMetaData(),
+            $this->catalog,
+            $this,
+            NULL, NULL, NULL, NULL),
+         new XMLACubeHandler());
    }
 
    public function hashCode()
    {
-      if ( empty( $this->hash ) )
+      if ( empty($this->hash) )
       {
          $this->hash = XMLAUtil::javaStringHashCode( $this->name );
       }
@@ -94,7 +94,7 @@ class XMLASchema implements ISchema
    /**
     * @return string
     */
-   public function getName ( )
+   public function getName()
    {
       return $this->name;
    }
@@ -102,7 +102,7 @@ class XMLASchema implements ISchema
    /**
     * @return XMLACatalog
     */
-   public function getCatalog ( )
+   public function getCatalog()
    {
       return $this->catalog;
    }
@@ -121,4 +121,4 @@ class XMLASchema implements ISchema
    {
       return array();
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLAStatement.php b/provider/xmla/XMLAStatement.php
index 608ad6e..c699616 100644
--- a/provider/xmla/XMLAStatement.php
+++ b/provider/xmla/XMLAStatement.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,8 +33,7 @@ use OLAP4PHP\OLAP\IOLAPConnection;
 use OLAP4PHP\OLAP\OLAPException;
 
 use OLAP4PHP\Common\Logger;
-use SeeWind\Utils\DateTime;
-
+use OLAP4PHP\Provider\XMLA\XMLAUtil;
 
 /**
  * @brief XMLAStatement
@@ -42,14 +41,14 @@ use SeeWind\Utils\DateTime;
 class XMLAStatement implements IOLAPStatement
 {
    private $logger;
-   
+
    /**
     * Flag to indicate if we have performance logging enabled
-    *  
+    *
     * @var boolean
     */
    private $logPerformance;
-   
+
    ///! XMLA Connection Object
    private $con;
 
@@ -57,36 +56,37 @@ class XMLAStatement implements IOLAPStatement
    private $cellSet;
 
    ///! MDX Query Statement
-   private $statement; 
+   private $statement;
 
    public function __construct( IOLAPConnection $xmlaConnection )
    {
-      if ( empty( $xmlaConnection ) || !( $xmlaConnection instanceof XMLAConnection ) ) throw new OLAPException ( "XMLAConnection cannot be NULL" );
-      $this->con = $xmlaConnection;
-      $this->logger = $xmlaConnection->getLogger();
+      if ( empty($xmlaConnection) || !($xmlaConnection instanceof XMLAConnection) ) throw new OLAPException ("XMLAConnection cannot be NULL");
+      $this->con            = $xmlaConnection;
+      $this->logger         = $xmlaConnection->getLogger();
       $this->logPerformance = $xmlaConnection->getLogPerformance();
    }
 
-  /**
-   * @brief Executes an MDX Query via SOAP XMLA
-   *
-   * @param string $mdx - The MDX Query String to execute
-   * @return XMLACellSet An XMLA Cell Set, which implements ICellSet
-   */
-   public function executeOlapQuery ( $mdx )
-   {        
+   /**
+    * @brief Executes an MDX Query via SOAP XMLA
+    *
+    * @param string $mdx - The MDX Query String to execute
+    *
+    * @return XMLACellSet An XMLA Cell Set, which implements ICellSet
+    */
+   public function executeOlapQuery( $mdx )
+   {
       $logPerformance = $this->logPerformance;
-      
-      if( $this->logger )
+
+      if ( $this->logger )
       {
-         if( $logPerformance ) $startTime = DateTime::microtimeFloat();
-         
+         if ( $logPerformance ) $startTime = XMLAUtil::microtimeFloat();
+
          $this->logger->debug( __CLASS__, '[MDX QUERY]' . PHP_EOL . $mdx );
       }
-      
+
       $this->statement = $mdx;
 
-      $catalog = $this->con->getCatalog();
+      $catalog        = $this->con->getCatalog();
       $dataSourceInfo = $this->con->getDataSourceInfo();
 
       $queryXML = "
@@ -110,28 +110,36 @@ class XMLAStatement implements IOLAPStatement
       ";
 
       // submit the MDX query
-      if( $logPerformance ) 
-         $submitStartTime = DateTime::microtimeFloat();
+      if ( $logPerformance )
+      {
+         $submitStartTime = XMLAUtil::microtimeFloat();
+      }
       $dom = $this->con->submit( $queryXML );
-      if( $logPerformance ) 
-         $submitEndTime = DateTime::microtimeFloat() - $submitStartTime;
+      if ( $logPerformance )
+      {
+         $submitEndTime = XMLAUtil::microtimeFloat() - $submitStartTime;
+      }
 
       // populate the MDX query results into a cellset
-      if( $logPerformance ) 
-         $populateStartTime = DateTime::microtimeFloat();
-      if ( empty( $this->cellSet ) ) $this->cellSet = new XMLACellSet ( $this );
-      $this->cellSet->populate ( $dom );
-      if( $logPerformance ) 
-         $populateEndTime = DateTime::microtimeFloat() - $populateStartTime;
-      
+      if ( $logPerformance )
+      {
+         $populateStartTime = XMLAUtil::microtimeFloat();
+      }
+      if ( empty($this->cellSet) ) $this->cellSet = new XMLACellSet ($this);
+      $this->cellSet->populate( $dom );
+      if ( $logPerformance )
+      {
+         $populateEndTime = XMLAUtil::microtimeFloat() - $populateStartTime;
+      }
+
       // log timing of method calls for performance tuning
-      if( $logPerformance && $this->logger )
+      if ( $logPerformance && $this->logger )
       {
          $this->logger->debug( __CLASS__, "[MDX SUBMIT TIME] " . $submitEndTime );
          $this->logger->debug( __CLASS__, "[MDX POPULATE TIME] " . $populateEndTime );
-         $this->logger->debug( __CLASS__, "[MDX TOTAL TIME] " . ( DateTime::microtimeFloat()  - $startTime ) );
+         $this->logger->debug( __CLASS__, "[MDX TOTAL TIME] " . (DateTime::microtimeFloat() - $startTime) );
       }
-      
+
       return $this->cellSet;
    }
 
@@ -150,7 +158,7 @@ class XMLAStatement implements IOLAPStatement
     *
     * @param Logger $logger A logger
     */
-   public function setLogger ( Logger $logger )
+   public function setLogger( Logger $logger )
    {
       $this->logger = $logger;
    }
@@ -159,10 +167,10 @@ class XMLAStatement implements IOLAPStatement
    /**
     * @return Logger
     */
-   public function getLogger ( )
+   public function getLogger()
    {
       return $this->logger;
-   }   
+   }
+
 
-   
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLATreeOp.php b/provider/xmla/XMLATreeOp.php
index 25c9548..9795340 100644
--- a/provider/xmla/XMLATreeOp.php
+++ b/provider/xmla/XMLATreeOp.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -32,7 +32,7 @@ class XMLATreeOp implements IEnum
 {
    const CHILDREN    = 0;
    const SIBLINGS    = 1;
-   const PARENT      = 2; 
+   const PARENT      = 2;
    const SELF        = 3;
    const DESCENDANTS = 4;
    const ANCESTORS   = 5;
@@ -53,7 +53,7 @@ class XMLATreeOp implements IEnum
    private $description;
 
    private static $constants;
-   
+
 
    protected function __construct( $treeOpType )
    {
@@ -92,43 +92,47 @@ class XMLATreeOp implements IEnum
             break;
 
          default:
-            throw new OLAPException( 'Tree Operation of type ' . $treeOpType . ' not supported' );
+            throw new OLAPException('Tree Operation of type ' . $treeOpType . ' not supported');
       }
    }
 
-   static public function getEnum ( $constant )
+   static public function getEnum( $constant )
    {
       if ( !self::$constants )
-         self::getEnumConstants ( );
+      {
+         self::getEnumConstants();
+      }
 
-      if ( ! isset ( self::$constants [ $constant ] ) )
-         throw new \InvalidArgumentException ( 'Invalid constant.' );
+      if ( !isset (self::$constants [$constant]) )
+      {
+         throw new \InvalidArgumentException ('Invalid constant.');
+      }
 
-      return self::$constants [ $constant ];
+      return self::$constants [$constant];
    }
 
    /**
     * return array Return the datatype enumeration constants
     */
-   static public function getEnumConstants ( )
+   static public function getEnumConstants()
    {
       if ( !self::$constants )
       {
          // array of enums constants
-         self::$constants = array (
-            new XMLATreeOp ( self::CHILDREN ),
-            new XMLATreeOp ( self::SIBLINGS ),
-            new XMLATreeOp ( self::PARENT ),
-            new XMLATreeOp ( self::SELF ),
-            new XMLATreeOp ( self::DESCENDANTS ),
-            new XMLATreeOp ( self::ANCESTORS )
+         self::$constants = array(
+            new XMLATreeOp (self::CHILDREN),
+            new XMLATreeOp (self::SIBLINGS),
+            new XMLATreeOp (self::PARENT),
+            new XMLATreeOp (self::SELF),
+            new XMLATreeOp (self::DESCENDANTS),
+            new XMLATreeOp (self::ANCESTORS)
          );
       }
 
       return self::$constants;
    }
 
-   public function name ( )
+   public function name()
    {
    }
 
@@ -146,4 +150,4 @@ class XMLATreeOp implements IEnum
    {
       return $this->description;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/XMLAUtil.php b/provider/xmla/XMLAUtil.php
index 5895305..b48e82d 100644
--- a/provider/xmla/XMLAUtil.php
+++ b/provider/xmla/XMLAUtil.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -30,6 +30,7 @@ namespace OLAP4PHP\Provider\XMLA;
 
 // Classes / Objects
 use \DOMElement;
+
 //use OLAP4PHP\OLAP\OLAPException;
 
 
@@ -49,16 +50,18 @@ abstract class XMLAUtil
     * Extract child element nodes from provided element node.
     *
     * @param DOMElement $node
-    * 
+    *
     * @return array DOMElement
     */
-   static public function childElements ( DOMElement $node )
+   static public function childElements( DOMElement $node )
    {
-      $elements = array ( );
+      $elements = array();
 
       foreach ( $node->childNodes as $node )
          if ( $node instanceof DOMElement )
+         {
             $elements [] = $node;
+         }
 
       return $elements;
    }
@@ -68,18 +71,19 @@ abstract class XMLAUtil
     * Find a child element of the specified element.
     *
     * @param DOMElement $element
-    * @param $ns
-    * @param $tag
+    * @param            $ns
+    * @param            $tag
     *
     * @return DOMElement
     */
-   static public function findChild ( DOMElement $element, $ns, $tag )
+   static public function findChild( DOMElement $element, $ns, $tag )
    {
       foreach ( $element->childNodes as $child )
       {
          if ( $child instanceof DOMElement
-              && $child->localName == $tag
-              && ( $ns == null || $child->namespaceURI == $ns ) )
+            && $child->localName == $tag
+            && ($ns == null || $child->namespaceURI == $ns)
+         )
          {
             return $child;
          }
@@ -91,61 +95,62 @@ abstract class XMLAUtil
 
    /**
     * @param $element blah
-    * @param $ns blah blah
-    * @param $tag blah blah blah
+    * @param $ns      blah blah
+    * @param $tag     blah blah blah
     *
     * @return array DomElement
     */
-   static public function findChildren ( DOMElement $element, $ns, $tag )
+   static public function findChildren( DOMElement $element, $ns, $tag )
    {
-      $elements = array ( );
+      $elements = array();
 
       foreach ( $element->childNodes as $node )
       {
          if ( $node->localName == $tag
-              && ( $ns == null || $node->namespaceURI == $ns ) )
+            && ($ns == null || $node->namespaceURI == $ns)
+         )
          {
             $elements [] = $node;
          }
       }
 
       return $elements;
-    }
+   }
 
 
    /**
-   * @param $row
-   * @param $name
-   *
-   * @return string
-   */
-   static public function doubleElement ( DOMElement $row, $name )
+    * @param $row
+    * @param $name
+    *
+    * @return string
+    */
+   static public function doubleElement( DOMElement $row, $name )
    {
-      return (float) XMLAUtil::stringElement ( $row, $name );
+      return (float)XMLAUtil::stringElement( $row, $name );
    }
 
 
    /**
-   * @param $row
-   * @param $name
-   *
-   * @return integer
-   */
-   static public function integerElement ( DOMElement $row, $name )
+    * @param $row
+    * @param $name
+    *
+    * @return integer
+    */
+   static public function integerElement( DOMElement $row, $name )
    {
-      return (integer) XMLAUtil::stringElement ( $row, $name );
+      return (integer)XMLAUtil::stringElement( $row, $name );
    }
 
 
    /**
-   * @param $row
-   * @param $name
-   *
-   * @return float
-   */
-   static public function floatElement ( DOMElement $row, $name )
+    * @param $row
+    * @param $name
+    *
+    * @return float
+    */
+   static public function floatElement( DOMElement $row, $name )
    {
-      return (float) XMLAUtil::stringElement ( $row, $name );
+      return (float)XMLAUtil::stringElement( $row, $name );
    }
 
 
@@ -155,31 +160,31 @@ abstract class XMLAUtil
     *
     * @return long
     */
-   static public function longElement ( DOMElement $row, $name )
+   static public function longElement( DOMElement $row, $name )
    {
-      return (float) XMLAUtil::stringElement ( $row, $name );
+      return (float)XMLAUtil::stringElement( $row, $name );
    }
 
 
    /**
-   * @param $row
-   * @param $name
-   *
-   * @return boolean
-   */
-   static public function booleanElement ( DOMElement $row, $name )
+    * @param $row
+    * @param $name
+    *
+    * @return boolean
+    */
+   static public function booleanElement( DOMElement $row, $name )
    {
-      return (boolean) XMLAUtil::stringElement ( $row, $name );
+      return (boolean)XMLAUtil::stringElement( $row, $name );
    }
 
 
    /**
-   * @param $row
-   * @param $name
-   *
-   * @return string
-   */
-   static public function stringElement ( DOMElement $row, $name )
+    * @param $row
+    * @param $name
+    *
+    * @return string
+    */
+   static public function stringElement( DOMElement $row, $name )
    {
       foreach ( $row->childNodes as $node )
       {
@@ -194,7 +199,7 @@ abstract class XMLAUtil
 
    /**
     * @brief Converts SQL-style pattern matches into PREG match strings
-    * 
+    *
     * @param array $wildcards
     *
     * @return string
@@ -221,6 +226,7 @@ abstract class XMLAUtil
     * of strings in a single hash table.
     *
     * @param string $string
+    *
     * @return int
     */
    public static function javaStringHashCode( $string )
@@ -238,7 +244,7 @@ abstract class XMLAUtil
    }
 
 
-   public static function gatherText ( DOMElement $element )
+   public static function gatherText( DOMElement $element )
    {
       $buf = '';
       foreach ( $element->childNodes as $node )
@@ -246,4 +252,22 @@ abstract class XMLAUtil
 
       return $buf;
    }
+
+   public static function parseUniqueName( $uniqueName )
+   {
+      $elements = explode( '.', $uniqueName );
+      return str_replace( array( '[', ']' ), '', $elements[0] );
+   }
+
+   /**
+    * Gets the current system time as a float
+    *
+    * @static
+    * @return float
+    */
+   public static function microtimeFloat()
+   {
+      list ($usec, $sec) = explode( " ", microtime() );
+      return ((float)$usec + (float)$sec);
+   }
 }
diff --git a/provider/xmla/metadata/IXMLAMetadataHandler.php b/provider/xmla/metadata/IXMLAMetadataHandler.php
index 3d840c4..a85ac99 100644
--- a/provider/xmla/metadata/IXMLAMetadataHandler.php
+++ b/provider/xmla/metadata/IXMLAMetadataHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -40,16 +40,16 @@ interface IXMLAMetadataHandler
     * Converts an XML element from an XMLA result set into a XMLA metadata
     * object and appends it to a list of metadata objects.
     *
-    * @param DOMElement $row XMLA element
+    * @param DOMElement            $row     XMLA element
     *
     * @param XMLAConnectionContext $context Context (schema, cube, dimension, etc.) that the
-    * request was executed in and that the element will belong to
+    *                                       request was executed in and that the element will belong to
     *
-    * @param $list List of metadata objects to append new metadata object
+    * @param                       $list    List of metadata objects to append new metadata object
     *
     * @throws OlapException on error
     */
-   public function handle ( DOMElement $row, XMLAConnectionContext $context, NamedList $list );
+   public function handle( DOMElement $row, XMLAConnectionContext $context, NamedList $list );
 
    /**
     * Sorts a list of metadata object.
@@ -59,5 +59,5 @@ interface IXMLAMetadataHandler
     *
     * @param list List of metadata elements
     */
-   public function sortList ( NamedList $list );
-}
\ No newline at end of file
+   public function sortList( NamedList $list );
+}
diff --git a/provider/xmla/metadata/IXMLAMetadataReader.php b/provider/xmla/metadata/IXMLAMetadataReader.php
index d9e0cc6..17ac77d 100644
--- a/provider/xmla/metadata/IXMLAMetadataReader.php
+++ b/provider/xmla/metadata/IXMLAMetadataReader.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -39,10 +39,11 @@ interface IXMLAMetadataReader
     * Looks up a member by its unique name.
     *
     * @param string $memberUniqueName Unique name of member
+    *
     * @return XMLAMember, or null if not found
     * @throws OLAPException if error occurs
     */
-   function lookupMemberByUniqueName ( $memberUniqueName );
+   function lookupMemberByUniqueName( $memberUniqueName );
 
    /**
     * Looks up a list of members by their unique name and writes the results
@@ -50,27 +51,27 @@ interface IXMLAMetadataReader
     *
     * @param array $memberUniqueNames List of unique names of member
     *
-    * @param array& $memberMap Reference to map that will be populated with members
+    * @param array & $memberMap       Reference to map that will be populated with members
     *
     * @throws OLAPException if error occurs
     */
-   function lookupMembersByUniqueName ( array $memberUniqueNames, array& $memberMap );
+   function lookupMembersByUniqueName( array $memberUniqueNames, array& $memberMap );
 
    /**
     * Looks a member by its unique name and returns members related by
     * the specified tree-operations.
     *
-    * @param array treeOps Collection of tree operations to travel relative to
-    * given member in order to create list of members
+    * @param array  treeOps Collection of tree operations to travel relative to
+    *               given member in order to create list of members
     *
     * @param string memberUniqueName Unique name of member
     *
-    * @param array IMember List to be populated with members related to the given
-    * member, or empty set if the member is not found
+    * @param array  IMember List to be populated with members related to the given
+    *               member, or empty set if the member is not found
     *
     * @throws OLAPException if error occurs
     */
-   function lookupMemberRelatives ( array $treeOps, $memberUniqueName, NamedList $list );
+   function lookupMemberRelatives( array $treeOps, $memberUniqueName, NamedList $list );
 
    /**
     * Looks up members of a given level.
@@ -81,5 +82,5 @@ interface IXMLAMetadataReader
     *
     * @return NamedList
     */
-   function getLevelMembers ( XMLALevel $level );
-}
\ No newline at end of file
+   function getLevelMembers( XMLALevel $level );
+}
diff --git a/provider/xmla/metadata/LazyMetadataList.php b/provider/xmla/metadata/LazyMetadataList.php
index 6af98f4..f50afe6 100644
--- a/provider/xmla/metadata/LazyMetadataList.php
+++ b/provider/xmla/metadata/LazyMetadataList.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -41,9 +41,9 @@ use OLAP4PHP\Common\NamedList;
  */
 class LazyMetadataList extends NamedList
 {
-   const STATE_NEW         = 1;
-   const STATE_POPULATING  = 2;
-   const STATE_POPULATED   = 3;
+   const STATE_NEW        = 1;
+   const STATE_POPULATING = 2;
+   const STATE_POPULATED  = 3;
 
    private $state;
 
@@ -57,15 +57,19 @@ class LazyMetadataList extends NamedList
 
    public function __construct( XMLAMetadataRequest $metadataRequest, XMLAConnectionContext $context, IXMLAMetadataHandler $handler, array $restrictions = NULL )
    {
-      $this->state = self::STATE_NEW;
+      $this->state           = self::STATE_NEW;
       $this->metadataRequest = $metadataRequest;
-      $this->context = $context;
-      $this->handler = $handler;
+      $this->context         = $context;
+      $this->handler         = $handler;
 
       if ( !$restrictions )
+      {
          $this->restrictions = array();
+      }
       else
+      {
          $this->restrictions = $restrictions;
+      }
    }
 
    private function getList()
@@ -73,19 +77,19 @@ class LazyMetadataList extends NamedList
       switch ( $this->state )
       {
          case self::STATE_POPULATING:
-            throw new \Exception( 'Recursive Population: ' );
+            throw new \Exception('Recursive Population: ');
          case self::STATE_NEW:
             //print 'STATE NEW' . PHP_EOL;
             try
             {
                $this->state = self::STATE_POPULATING;
-               $this->populateList( );
+               $this->populateList();
                $this->state = self::STATE_POPULATED;
             }
             catch ( OLAPException $e )
             {
                $this->state = self::STATE_NEW;
-               throw new \Exception( $e->getMessage() );
+               throw new \Exception($e->getMessage());
             }
          case self::STATE_POPULATED:
          default:
@@ -94,10 +98,12 @@ class LazyMetadataList extends NamedList
       }
    }
 
-   public function get ( $index )
+   public function get( $index )
    {
       if ( $this->state == self::STATE_NEW )
-         $this->getList ( );
+      {
+         $this->getList();
+      }
 
       return parent::get( $index );
 
@@ -130,7 +136,9 @@ class LazyMetadataList extends NamedList
    public function indexOfName( $name )
    {
       if ( $this->state == self::STATE_NEW )
-              $this->getList();
+      {
+         $this->getList();
+      }
 
       return parent::indexOfName( $name );
       /*
@@ -144,24 +152,26 @@ class LazyMetadataList extends NamedList
        */
    }
 
-   public function size ( )
+   public function size()
    {
       //if ( !parent::count () )
       if ( $this->state == self::STATE_NEW )
-         $this->getList ( );
-      return parent::size ( );
+      {
+         $this->getList();
+      }
+      return parent::size();
    }
 
-   protected function populateList( )
+   protected function populateList()
    {
       //print 'LML::populateList' . PHP_EOL;
       $this->context->xmlaConnection
-         ->populateList (
-            $this,
-            $this->context,
-            $this->metadataRequest,
-            $this->handler,
-            $this->restrictions );
+         ->populateList(
+         $this,
+         $this->context,
+         $this->metadataRequest,
+         $this->handler,
+         $this->restrictions );
 
       //var_dump( $list );
    }
@@ -176,4 +186,4 @@ class LazyMetadataList extends NamedList
       }
       return parent::getIterator();
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLACachingMetadataReader.php b/provider/xmla/metadata/XMLACachingMetadataReader.php
index 1051476..1c97188 100644
--- a/provider/xmla/metadata/XMLACachingMetadataReader.php
+++ b/provider/xmla/metadata/XMLACachingMetadataReader.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -37,10 +37,10 @@ use OLAP4PHP\Provider\XMLA\XMLALevel;
 class XMLACachingMetadataReader extends XMLADelegatingMetadataReader
 {
    /// string => XMLAMeasure
-   private $measureMap = array ( );
+   private $measureMap = array();
 
    /// string => XMLAMember
-   private $memberMap = array ( );
+   private $memberMap = array();
 
    /* park this one
    private final Map<
@@ -52,19 +52,23 @@ class XMLACachingMetadataReader extends XMLADelegatingMetadataReader
 
    /**
     * Constructor
-    * 
+    *
     * @param IXMLAMetadataReader $metadataReader
-    * @param array $measureMap
+    * @param array               $measureMap
     *
     */
-   public function __construct ( IXMLAMetadataReader $metadataReader, array $measureMap = NULL )
+   public function __construct( IXMLAMetadataReader $metadataReader, array $measureMap = NULL )
    {
-      parent::__construct ( $metadataReader );
+      parent::__construct( $metadataReader );
 
       if ( !$measureMap )
+      {
          $this->measureMap = array();
+      }
       else
+      {
          $this->measureMap = $measureMap;
+      }
    }
 
 
@@ -72,30 +76,32 @@ class XMLACachingMetadataReader extends XMLADelegatingMetadataReader
     * Looks up a member by its unique name.
     *
     * @param string $memberUniqueName Unique name of member
+    *
     * @return XMLAMember, or null if not found
     * @throws OLAPException if error occurs
     */
-   public function lookupMemberByUniqueName ( $memberUniqueName )
+   public function lookupMemberByUniqueName( $memberUniqueName )
    {
       // First, look in measures map.
-      if ( isset ( $this->measureMap [ $memberUniqueName ] ) )
+      if ( isset ($this->measureMap [$memberUniqueName]) )
       {
-         return $this->measureMap [ $memberUniqueName ];
+         return $this->measureMap [$memberUniqueName];
       }
 
       // Next, look in the member cache.
-      if ( isset ( $this->memberMap [ $memberUniqueName ] ) )
+      if ( isset ($this->memberMap [$memberUniqueName]) )
       {
-         return $this->memberMap [ $memberUniqueName ];
+         return $this->memberMap [$memberUniqueName];
       }
 
       // Next, pass the lookup up the reader composition
-      $member = parent::lookupMemberByUniqueName ( $memberUniqueName );
-      if (   $member != null
-          && $member->getDimension()->getDimensionType ( )
-                !== DimensionType::getEnum ( DimensionType::MEASURE ) )
+      $member = parent::lookupMemberByUniqueName( $memberUniqueName );
+      if ( $member != null
+         && $member->getDimension()->getDimensionType()
+            !== DimensionType::getEnum( DimensionType::MEASURE )
+      )
       {
-          $this->memberMap [ $memberUniqueName ] = $member;
+         $this->memberMap [$memberUniqueName] = $member;
       }
 
       return $member;
@@ -108,26 +114,26 @@ class XMLACachingMetadataReader extends XMLADelegatingMetadataReader
     *
     * @param array $memberUniqueNames List of unique names of member
     *
-    * @param array $memberMap Map to populate with members
+    * @param array $memberMap         Map to populate with members
     *
     * @throws OLAPException if error occurs
     */
-   public function lookupMembersByUniqueName ( array $memberUniqueNames, array& $memberMap )
+   public function lookupMembersByUniqueName( array $memberUniqueNames, array& $memberMap )
    {
-      $remainingMemberUniqueNames = array ( );
+      $remainingMemberUniqueNames = array();
       foreach ( $memberUniqueNames as $memberUniqueName )
       {
          // First, look in measures map.
-         if ( isset ( $this->measureMap [ $memberUniqueName ] ) )
+         if ( isset ($this->measureMap [$memberUniqueName]) )
          {
-            $memberMap [ $memberUniqueName ] = $this->measureMap [ $memberUniqueName ];
+            $memberMap [$memberUniqueName] = $this->measureMap [$memberUniqueName];
             continue;
          }
 
          // Next, look in cache.
-         if ( isset ( $this->memberMap [ $memberUniqueName ] ) )
+         if ( isset ($this->memberMap [$memberUniqueName]) )
          {
-            $memberMap [ $memberUniqueName ] = $this->memberMap [ $memberUniqueName ];
+            $memberMap [$memberUniqueName] = $this->memberMap [$memberUniqueName];
             continue;
          }
 
@@ -136,21 +142,22 @@ class XMLACachingMetadataReader extends XMLADelegatingMetadataReader
 
       // If any of the member names were not in the cache, look them up
       // by delegating.
-      if ( ! empty ( $remainingMemberUniqueNames ) )
+      if ( !empty ($remainingMemberUniqueNames) )
       {
-         parent::lookupMembersByUniqueName ( $remainingMemberUniqueNames, $memberMap );
+         parent::lookupMembersByUniqueName( $remainingMemberUniqueNames, $memberMap );
 
          // Add the previously missing members into the cache.
          foreach ( $remainingMemberUniqueNames as $memberName )
          {
-            if ( isset ( $memberMap [ $memberName ] ) )
+            if ( isset ($memberMap [$memberName]) )
             {
-               $member = $memberMap [ $memberName ];
+               $member = $memberMap [$memberName];
 
-               if ( ! ( $member instanceof IMeasure )
-                    && $member->getDimension ( )->getDimensionType ( )->getConstant ( ) != DimensionType::MEASURE )
+               if ( !($member instanceof IMeasure)
+                  && $member->getDimension()->getDimensionType()->getConstant() != DimensionType::MEASURE
+               )
                {
-                  $this->memberMap [ $memberName ] = $member;
+                  $this->memberMap [$memberName] = $member;
                }
             }
          }
@@ -162,19 +169,19 @@ class XMLACachingMetadataReader extends XMLADelegatingMetadataReader
     * Looks a member by its unique name and returns members related by
     * the specified tree-operations.
     *
-    * @param array treeOps Collection of tree operations to travel relative to
-    * given member in order to create list of members
+    * @param array  treeOps Collection of tree operations to travel relative to
+    *               given member in order to create list of members
     *
     * @param string memberUniqueName Unique name of member
     *
-    * @param array IMember List to be populated with members related to the given
-    * member, or empty set if the member is not found
+    * @param array  IMember List to be populated with members related to the given
+    *               member, or empty set if the member is not found
     *
     * @throws OLAPException if error occurs
     */
-   public function lookupMemberRelatives ( array $treeOps, $memberUniqueName, NamedList $list )
+   public function lookupMemberRelatives( array $treeOps, $memberUniqueName, NamedList $list )
    {
-      throw new \BadMethodCallException ( 'Note yet implemented' );
+      throw new \BadMethodCallException ('Note yet implemented');
    }
 
    /**
@@ -186,8 +193,8 @@ class XMLACachingMetadataReader extends XMLADelegatingMetadataReader
     *
     * @return array of members at in the level
     */
-   public function getLevelMembers ( XMLALevel $level )
+   public function getLevelMembers( XMLALevel $level )
    {
-      throw new \BadMethodCallException ( 'Note yet implemented' );
+      throw new \BadMethodCallException ('Note yet implemented');
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLACatalogHandler.php b/provider/xmla/metadata/XMLACatalogHandler.php
index 2af8ba6..4243530 100644
--- a/provider/xmla/metadata/XMLACatalogHandler.php
+++ b/provider/xmla/metadata/XMLACatalogHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -33,7 +33,7 @@ use OLAP4PHP\Common\NamedList;
 
 class XMLACatalogHandler extends XMLAMetadataHandler
 {
-   public function handle ( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
+   public function handle( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
    {
       /*
       Example:
@@ -44,11 +44,11 @@ class XMLACatalogHandler extends XMLAMetadataHandler
             <ROLES>California manager,No HR Cube</ROLES>
         </row>
        */
-      $catalogName = XMLAUtil::stringElement ( $row, 'CATALOG_NAME' );
+      $catalogName = XMLAUtil::stringElement( $row, 'CATALOG_NAME' );
 
       // Unused: DESCRIPTION, ROLES
-      $list->add (
-          new XMLACatalog (
-              $context->xmlaDatabaseMetaData, $catalogName ) );
+      $list->add(
+         new XMLACatalog (
+            $context->xmlaDatabaseMetaData, $catalogName) );
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLACatalogSchemaHandler.php b/provider/xmla/metadata/XMLACatalogSchemaHandler.php
index a958b3a..71108ab 100644
--- a/provider/xmla/metadata/XMLACatalogSchemaHandler.php
+++ b/provider/xmla/metadata/XMLACatalogSchemaHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -38,14 +38,18 @@ class XMLACatalogSchemaHandler extends XMLAMetadataHandler
 
    public function __construct( $catalogName )
    {
-      if ( empty( $catalogName ) ) throw new \RuntimeException ( 'The Catalog Schema Handler requires a catalog name.' );
+      if ( empty($catalogName) ) throw new \RuntimeException ('The Catalog Schema Handler requires a catalog name.');
       $this->catalogName = $catalogName;
    }
 
-   public function handle ( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
+   public function handle( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
    {
-      $schemaName = ( XMLAUtil::stringElement( $row, "SCHEMA_NAME") === NULL ) ? '' : XMLAUtil::stringElement( $row, "SCHEMA_NAME");
-      $catalogName = XMLAUtil::stringElement( $row, "CATALOG_NAME");
+      $schemaName  = (XMLAUtil::stringElement( $row, "SCHEMA_NAME" ) === NULL) ? '' : XMLAUtil::stringElement( $row, "SCHEMA_NAME" );
+      $catalogName = XMLAUtil::stringElement( $row, "CATALOG_NAME" );
+      if ( !$catalogName && XMLAUtil::stringElement( $row, "CUBE_NAME" ) )
+      {
+         $catalogName = XMLAUtil::stringElement( $row, "CUBE_NAME" );
+      }
 
       //print $catalogName . ':' . $schemaName . PHP_EOL;
 
@@ -53,7 +57,10 @@ class XMLACatalogSchemaHandler extends XMLAMetadataHandler
       if ( $this->catalogName == $catalogName && $list->get( $schemaName ) === NULL )
       {
          //echo 'XMLACatalogSchmeHandler: inside if';
-         $list->add( new XMLASchema( $context->getCatalog( $row ), $schemaName ) );
+         if ( $schemaName )
+         {
+            $list->add( new XMLASchema($context->getCatalog( $row ), $schemaName) );
+         }
       }
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLACubeHandler.php b/provider/xmla/metadata/XMLACubeHandler.php
index 9df3c72..55f0270 100644
--- a/provider/xmla/metadata/XMLACubeHandler.php
+++ b/provider/xmla/metadata/XMLACubeHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -34,11 +34,11 @@ use OLAP4PHP\Provider\XMLA\XMLAConnectionContext;
 
 class XMLACubeHandler extends XMLAMetadataHandler
 {
-   public function handle ( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
+   public function handle( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
    {
-      $cubeName = XMLAUtil::stringElement( $row, 'CUBE_NAME' );
+      $cubeName    = XMLAUtil::stringElement( $row, 'CUBE_NAME' );
       $description = XMLAUtil::stringElement( $row, 'DESCRIPTION' );
 
-      $list->add( new XMLACube( $context->xmlaSchema, $cubeName, $description ) );
+      $list->add( new XMLACube($context->xmlaSchema, $cubeName, $description) );
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLADelegatingMetadataReader.php b/provider/xmla/metadata/XMLADelegatingMetadataReader.php
index f5e2774..e509aae 100644
--- a/provider/xmla/metadata/XMLADelegatingMetadataReader.php
+++ b/provider/xmla/metadata/XMLADelegatingMetadataReader.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -40,9 +40,9 @@ abstract class XMLADelegatingMetadataReader implements IXMLAMetadataReader
     *
     * @param IMetadataReader $metadataReader Underlying metadata reader
     */
-   public function __construct ( IXMLAMetadataReader $metadataReader )
+   public function __construct( IXMLAMetadataReader $metadataReader )
    {
-      assert ( $metadataReader != NULL );
+      assert( $metadataReader != NULL );
       $this->metadataReader = $metadataReader;
    }
 
@@ -50,12 +50,13 @@ abstract class XMLADelegatingMetadataReader implements IXMLAMetadataReader
     * Looks up a member by its unique name.
     *
     * @param string $memberUniqueName Unique name of member
+    *
     * @return XMLAMember, or null if not found
     * @throws OLAPException if error occurs
     */
-   public function lookupMemberByUniqueName ( $memberUniqueName )
+   public function lookupMemberByUniqueName( $memberUniqueName )
    {
-      return $this->metadataReader->lookupMemberByUniqueName ( $memberUniqueName );
+      return $this->metadataReader->lookupMemberByUniqueName( $memberUniqueName );
    }
 
    /**
@@ -64,32 +65,32 @@ abstract class XMLADelegatingMetadataReader implements IXMLAMetadataReader
     *
     * @param array $memberUniqueNames List of unique names of member
     *
-    * @param array $memberMap Map to populate with members
+    * @param array $memberMap         Map to populate with members
     *
     * @throws OLAPException if error occurs
     */
-   public function lookupMembersByUniqueName ( array $memberUniqueNames, array& $memberMap )
+   public function lookupMembersByUniqueName( array $memberUniqueNames, array& $memberMap )
    {
-      $this->metadataReader->lookupMembersByUniqueName ( $memberUniqueNames, $memberMap );
+      $this->metadataReader->lookupMembersByUniqueName( $memberUniqueNames, $memberMap );
    }
 
    /**
     * Looks a member by its unique name and returns members related by
     * the specified tree-operations.
     *
-    * @param array treeOps Collection of tree operations to travel relative to
-    * given member in order to create list of members
+    * @param array  treeOps Collection of tree operations to travel relative to
+    *               given member in order to create list of members
     *
     * @param string memberUniqueName Unique name of member
     *
-    * @param array IMember List to be populated with members related to the given
-    * member, or empty set if the member is not found
+    * @param array  IMember List to be populated with members related to the given
+    *               member, or empty set if the member is not found
     *
     * @throws OLAPException if error occurs
     */
-   public function lookupMemberRelatives ( array $treeOps, $memberUniqueName, NamedList $list )
+   public function lookupMemberRelatives( array $treeOps, $memberUniqueName, NamedList $list )
    {
-      $this->metadataReader->lookupMemberRelatives ( $treeOps, $memberUniqueName, $list );
+      $this->metadataReader->lookupMemberRelatives( $treeOps, $memberUniqueName, $list );
    }
 
    /**
@@ -101,8 +102,8 @@ abstract class XMLADelegatingMetadataReader implements IXMLAMetadataReader
     *
     * @return array of members at in the level
     */
-   public function getLevelMembers ( XMLALevel $level )
+   public function getLevelMembers( XMLALevel $level )
    {
-      return $this->metadataReader->getLevelMembers ( $level );
+      return $this->metadataReader->getLevelMembers( $level );
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLADimensionHandler.php b/provider/xmla/metadata/XMLADimensionHandler.php
index 0048b39..98111ad 100644
--- a/provider/xmla/metadata/XMLADimensionHandler.php
+++ b/provider/xmla/metadata/XMLADimensionHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -42,33 +42,33 @@ class XMLADimensionHandler extends XMLAMetadataHandler
 
    public function __construct( XMLACube $cube )
    {
-      if ( empty( $cube ) || $cube == NULL ) throw new OLAPException( 'XMLADimensionMetadataHandler: $cube cannot be NULL' );
+      if ( empty($cube) || $cube == NULL ) throw new OLAPException('XMLADimensionMetadataHandler: $cube cannot be NULL');
       $this->cube = $cube;
    }
 
    public function handle( \DOMElement $row, XMLAConnectionContext $context, NamedList $list )
    {
-      $dimensionName = XMLAUtil::stringElement( $row, 'DIMENSION_NAME' );
-      $dimensionUniqueName = XMLAUtil::stringElement( $row, 'DIMENSION_UNIQUE_NAME' );
-      $dimensionCaption = XMLAUtil::stringElement( $row, 'DIMENSION_CAPTION' );
-      $description = XMLAUtil::stringElement( $row, 'DESCRIPTION' );
-      $dimensionType = XMLAUtil::integerElement( $row, 'DIMENSION_TYPE' );
-      $type = DimensionType::getDictionary()->forOrdinal( $dimensionType );
+      $dimensionName              = XMLAUtil::stringElement( $row, 'DIMENSION_NAME' );
+      $dimensionUniqueName        = XMLAUtil::stringElement( $row, 'DIMENSION_UNIQUE_NAME' );
+      $dimensionCaption           = XMLAUtil::stringElement( $row, 'DIMENSION_CAPTION' );
+      $description                = XMLAUtil::stringElement( $row, 'DESCRIPTION' );
+      $dimensionType              = XMLAUtil::integerElement( $row, 'DIMENSION_TYPE' );
+      $type                       = DimensionType::getDictionary()->forOrdinal( $dimensionType );
       $defaultHierarchyUniqueName = XMLAUtil::stringElement( $row, 'DEFAULT_HIERARCHY' );
-      $dimensionOrdinal = XMLAUtil::integerElement( $row, 'DIMENSION_ORDINAL' );
+      $dimensionOrdinal           = XMLAUtil::integerElement( $row, 'DIMENSION_ORDINAL' );
 
       $dimension = new XMLADimension(
-              $this->cube,
-              $dimensionUniqueName,
-              $dimensionName,
-              $dimensionCaption,
-              $description,
-              $type,
-              $defaultHierarchyUniqueName,
-              $dimensionOrdinal == NULL ? 0 : $dimensionOrdinal);
+         $this->cube,
+         $dimensionUniqueName,
+         $dimensionName,
+         $dimensionCaption,
+         $description,
+         $type,
+         $defaultHierarchyUniqueName,
+         $dimensionOrdinal == NULL ? 0 : $dimensionOrdinal);
 
       $list->add( $dimension );
 
       $this->cube->dimensionsByUname[$dimension->getUniqueName()] = $dimension;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLAHierarchyHandler.php b/provider/xmla/metadata/XMLAHierarchyHandler.php
index 2f72fae..293934d 100644
--- a/provider/xmla/metadata/XMLAHierarchyHandler.php
+++ b/provider/xmla/metadata/XMLAHierarchyHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -42,30 +42,30 @@ class XMLAHierarchyHandler extends XMLAMetadataHandler
 
    public function __construct( XMLACube &$cube )
    {
-      if ( empty( $cube ) || $cube == NULL ) throw new OLAPException( 'XMLAHierarchyMetadataHandler: $cube cannot be NULL' );
+      if ( empty($cube) || $cube == NULL ) throw new OLAPException('XMLAHierarchyMetadataHandler: $cube cannot be NULL');
       $this->cube = &$cube;
    }
 
    public function handle( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
    {
-      $hierarchyUniqueName = XMLAUtil::stringElement( $row, 'HIERARCHY_UNIQUE_NAME' );
-      $hierarchyName = ( XMLAUtil::stringElement( $row, 'HIERARCHY_NAME' ) == NULL ) ? str_replace( array( '[', ']' ), array( '', '' ), $hierarchyUniqueName ) : XMLAUtil::stringElement( $row, 'HIERARCHY_NAME' );
-      $hierarchyCaption = XMLAUtil::stringElement( $row, 'HIERARCHY_CAPTION' );
-      $description = XMLAUtil::stringElement( $row, 'DESCRIPTION' );
-      $allMember = XMLAUtil::stringElement( $row, 'ALL_MEMBER' );
+      $hierarchyUniqueName     = XMLAUtil::stringElement( $row, 'HIERARCHY_UNIQUE_NAME' );
+      $hierarchyName           = (XMLAUtil::stringElement( $row, 'HIERARCHY_NAME' ) == NULL) ? str_replace( array( '[', ']' ), array( '', '' ), $hierarchyUniqueName ) : XMLAUtil::stringElement( $row, 'HIERARCHY_NAME' );
+      $hierarchyCaption        = XMLAUtil::stringElement( $row, 'HIERARCHY_CAPTION' );
+      $description             = XMLAUtil::stringElement( $row, 'DESCRIPTION' );
+      $allMember               = XMLAUtil::stringElement( $row, 'ALL_MEMBER' );
       $defaultMemberUniqueName = XMLAUtil::stringElement( $row, 'DEFAULT_MEMBER' );
 
       $hierarchy = new XMLAHierarchy(
-              $context->getDimension( $row ),
-              $hierarchyUniqueName,
-              $hierarchyName,
-              $hierarchyCaption,
-              $description,
-              $allMember != NULL,
-              $defaultMemberUniqueName);
+         $context->getDimension( $row ),
+         $hierarchyUniqueName,
+         $hierarchyName,
+         $hierarchyCaption,
+         $description,
+         $allMember != NULL,
+         $defaultMemberUniqueName);
 
       $list->add( $hierarchy );
 
       $this->cube->hierarchiesByUname[$hierarchy->getUniqueName()] = $hierarchy;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLALevelHandler.php b/provider/xmla/metadata/XMLALevelHandler.php
index 4be6715..184a352 100644
--- a/provider/xmla/metadata/XMLALevelHandler.php
+++ b/provider/xmla/metadata/XMLALevelHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -42,12 +42,12 @@ class XMLALevelHandler extends XMLAMetadataHandler
    /**
     * Constructor
     */
-   public function __construct ( XMLACube $cubeForCallback )
+   public function __construct( XMLACube $cubeForCallback )
    {
       $this->cubeForCallback = $cubeForCallback;
    }
 
-   public function handle ( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
+   public function handle( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
    {
       /*
       Example:
@@ -73,28 +73,28 @@ class XMLALevelHandler extends XMLAMetadataHandler
 
        */
 
-      $levelUniqueName = XMLAUtil::stringElement ( $row, 'LEVEL_UNIQUE_NAME');
+      $levelUniqueName = XMLAUtil::stringElement( $row, 'LEVEL_UNIQUE_NAME' );
       // SAP BW doesn't return a HIERARCHY_NAME attribute,
       // so try to use the unique name instead
-      $levelName =
-          XMLAUtil::stringElement ( $row, 'LEVEL_NAME') == null
-              ? ($levelUniqueName != null
-                      ? ereg_replace ( "\\]$", "", ereg_replace ( "^\\[", "", $levelUniqueName ) )
-                      : null)
-              : XMLAUtil::stringElement ( $row, 'LEVEL_NAME' );
-      $levelCaption = XMLAUtil::stringElement ( $row, 'LEVEL_CAPTION' );
-      $description = XMLAUtil::stringElement ( $row, 'DESCRIPTION' );
-      $levelNumber = XMLAUtil::integerElement ( $row, 'LEVEL_NUMBER' );
-      $levelTypeCode = XMLAUtil::integerElement ( $row, 'LEVEL_TYPE' );
+      $levelName     =
+         XMLAUtil::stringElement( $row, 'LEVEL_NAME' ) == null
+            ? ($levelUniqueName != null
+            ? ereg_replace( "\\]$", "", ereg_replace( "^\\[", "", $levelUniqueName ) )
+            : null)
+            : XMLAUtil::stringElement( $row, 'LEVEL_NAME' );
+      $levelCaption  = XMLAUtil::stringElement( $row, 'LEVEL_CAPTION' );
+      $description   = XMLAUtil::stringElement( $row, 'DESCRIPTION' );
+      $levelNumber   = XMLAUtil::integerElement( $row, 'LEVEL_NUMBER' );
+      $levelTypeCode = XMLAUtil::integerElement( $row, 'LEVEL_TYPE' );
 
-      $levelType = LevelType::getDictionary()->forOrdinal ( $levelTypeCode );
-      $calculated = ( $levelTypeCode & self::MDLEVEL_TYPE_CALCULATED ) != 0;
-      $levelCardinality = XMLAUtil::integerElement ( $row, 'LEVEL_CARDINALITY' );
-      $level = new XMLALevel (
-          $context->getHierarchy ( $row ), $levelUniqueName, $levelName,
-          $levelCaption, $description, $levelNumber, $levelType,
-          $calculated, $levelCardinality );
-      $list->add ( $level );
-      $this->cubeForCallback->levelsByUname [ $level->getUniqueName ( ) ] = $level;
+      $levelType        = LevelType::getDictionary()->forOrdinal( $levelTypeCode );
+      $calculated       = ($levelTypeCode & self::MDLEVEL_TYPE_CALCULATED) != 0;
+      $levelCardinality = XMLAUtil::integerElement( $row, 'LEVEL_CARDINALITY' );
+      $level            = new XMLALevel (
+         $context->getHierarchy( $row ), $levelUniqueName, $levelName,
+         $levelCaption, $description, $levelNumber, $levelType,
+         $calculated, $levelCardinality);
+      $list->add( $level );
+      $this->cubeForCallback->levelsByUname [$level->getUniqueName()] = $level;
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLAMeasureHandler.php b/provider/xmla/metadata/XMLAMeasureHandler.php
index 62f1876..4c7316e 100644
--- a/provider/xmla/metadata/XMLAMeasureHandler.php
+++ b/provider/xmla/metadata/XMLAMeasureHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -43,12 +43,12 @@ class XMLAMeasureHandler extends XMLAMetadataHandler
     *
     * @param XMLADimension $dimension The measures dimension
     */
-   public function __construct ( XMLADimension $dimension )
+   public function __construct( XMLADimension $dimension )
    {
       $this->dimension = $dimension;
    }
 
-   public function handle ( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
+   public function handle( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
    {
       /*
       Example:
@@ -68,10 +68,10 @@ class XMLAMeasureHandler extends XMLAMetadataHandler
 
        */
 
-      $measureName = XMLAUtil::stringElement ( $row, 'MEASURE_NAME' );
-      $measureUniqueName = XMLAUtil::stringElement ( $row, 'MEASURE_UNIQUE_NAME' );
-      $measureCaption = XMLAUtil::stringElement ( $row, 'MEASURE_CAPTION' );
-      $description = XMLAUtil::stringElement ( $row, 'DESCRIPTION' );
+      $measureName       = XMLAUtil::stringElement( $row, 'MEASURE_NAME' );
+      $measureUniqueName = XMLAUtil::stringElement( $row, 'MEASURE_UNIQUE_NAME' );
+      $measureCaption    = XMLAUtil::stringElement( $row, 'MEASURE_CAPTION' );
+      $description       = XMLAUtil::stringElement( $row, 'DESCRIPTION' );
       $measureAggregator = NULL;
       /*$measureAggregator =
           MeasureAggregator::getDictionary ( )::forOrdinal (
@@ -79,46 +79,46 @@ class XMLAMeasureHandler extends XMLAMetadataHandler
                 $row, 'MEASURE_AGGREGATOR' ) );*/
 
       // Figure out datatype
-      $datatype = NULL;
+      $datatype        = NULL;
       $ordinalDatatype =
-         DataType::getDictionary ( )->forName (
-            XMLAUtil::stringElement ( $row, 'DATA_TYPE' ) );
+         DataType::getDictionary()->forName(
+            XMLAUtil::stringElement( $row, 'DATA_TYPE' ) );
       if ( $ordinalDatatype == null )
       {
-         $datatype = Datatype::getDictionary()->forOrdinal (
-            XMLAUtil::integerElement ( $row, 'DATA_TYPE' ) );
+         $datatype = Datatype::getDictionary()->forOrdinal(
+            XMLAUtil::integerElement( $row, 'DATA_TYPE' ) );
       }
       else
       {
          $datatype = $ordinalDatatype;
       }
-      $measureIsVisible = XMLAUtil::booleanElement ( $row, 'MEASURE_IS_VISIBLE' );
+      $measureIsVisible = XMLAUtil::booleanElement( $row, 'MEASURE_IS_VISIBLE' );
 
       $member =
-         $context->getCube ( $row )->getMetadataReader ( )
-            ->lookupMemberByUniqueName (
-               $measureUniqueName );
+         $context->getCube( $row )->getMetadataReader()
+            ->lookupMemberByUniqueName(
+            $measureUniqueName );
 
       if ( $member == null )
       {
          throw new OLAPException (
-            'The server failed to resolve a member with the same unique name as a measure named '.
-            $measureUniqueName );
+            'The server failed to resolve a member with the same unique name as a measure named ' .
+               $measureUniqueName);
       }
 
-      $list->add (
-          new XMLAMeasure (
-              $member->getLevel ( ), $measureUniqueName,
-              $measureName, $measureCaption, $description, null,
-              $measureAggregator, $datatype, $measureIsVisible,
-              $member->getOrdinal ( ) ) );
+      $list->add(
+         new XMLAMeasure (
+            $member->getLevel(), $measureUniqueName,
+            $measureName, $measureCaption, $description, null,
+            $measureAggregator, $datatype, $measureIsVisible,
+            $member->getOrdinal()) );
    }
 
 
    /**
     * @param array XMLAMeasure
     */
-   public function sortList ( NamedList $list )
+   public function sortList( NamedList $list )
    {
       // TODO: Figure out how to do sorting
       //uasort ( $list, array ( 'self', 'sort' ) );
@@ -128,8 +128,8 @@ class XMLAMeasureHandler extends XMLAMetadataHandler
    /**
     * Measure sort callback
     */
-   static public function sort ( XMLAMeasure $o1, XMLAMeasure $o2 )
+   static public function sort( XMLAMeasure $o1, XMLAMeasure $o2 )
    {
-      return $o1->getOrdinal ( ) - $o2->getOrdinal ( );
+      return $o1->getOrdinal() - $o2->getOrdinal();
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLAMemberHandler.php b/provider/xmla/metadata/XMLAMemberHandler.php
index a18f5d6..38c9677 100644
--- a/provider/xmla/metadata/XMLAMemberHandler.php
+++ b/provider/xmla/metadata/XMLAMemberHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -40,7 +40,7 @@ class XMLAMemberHandler extends XMLAMetadataHandler
    /**
     * @var array
     */
-   static private $excludedPropertyNames = array (
+   static private $excludedPropertyNames = array(
       'CATALOG_NAME',
       'CUBE_NAME',
       'DIMENSION_UNIQUE_NAME',
@@ -62,17 +62,17 @@ class XMLAMemberHandler extends XMLAMetadataHandler
 
    public function handle( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
    {
-      $memberOrdinal = XMLAUtil::integerElement( $row, 'LEVEL_NUMBER' );
-      $memberUniqueName = XMLAUtil::stringElement( $row, 'MEMBER_UNIQUE_NAME' );
-      $memberName = XMLAUtil::stringElement( $row, 'MEMBER_NAME' );
-      $parentUniqueName = XMLAUtil::stringElement( $row, 'PARENT_UNIQUE_NAME' );
-      $memberTypeValues = MemberType::values();
-      $memberType = $memberTypeValues [ XMLAUtil::integerElement( $row, 'MEMBER_TYPE' ) ];
-      $memberCaption = XMLAUtil::stringElement( $row, 'MEMBER_CAPTION' );
+      $memberOrdinal       = XMLAUtil::integerElement( $row, 'LEVEL_NUMBER' );
+      $memberUniqueName    = XMLAUtil::stringElement( $row, 'MEMBER_UNIQUE_NAME' );
+      $memberName          = XMLAUtil::stringElement( $row, 'MEMBER_NAME' );
+      $parentUniqueName    = XMLAUtil::stringElement( $row, 'PARENT_UNIQUE_NAME' );
+      $memberTypeValues    = MemberType::values();
+      $memberType          = $memberTypeValues [XMLAUtil::integerElement( $row, 'MEMBER_TYPE' )];
+      $memberCaption       = XMLAUtil::stringElement( $row, 'MEMBER_CAPTION' );
       $childrenCardinality = XMLAUtil::integerElement( $row, 'CHILDREN_CARDINALITY' );
 
       $level = $context->getLevel( $row );
-      
+
       $map = array();
       $this->addUserDefinedDimensionProperties( $row, $level, $map );
 
@@ -113,4 +113,4 @@ class XMLAMemberHandler extends XMLAMetadataHandler
          }
       }
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLAMetadataHandler.php b/provider/xmla/metadata/XMLAMetadataHandler.php
index 87d7608..b4ab065 100644
--- a/provider/xmla/metadata/XMLAMetadataHandler.php
+++ b/provider/xmla/metadata/XMLAMetadataHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -32,5 +32,7 @@ use OLAP4PHP\Common\NamedList;
  */
 abstract class XMLAMetadataHandler implements IXMLAMetadataHandler
 {
-   public function sortList ( NamedList $list ) { /*print 'Default sortList: ' . get_class( $this ) . PHP_EOL;*/  }
-}
\ No newline at end of file
+   public function sortList( NamedList $list )
+   { /*print 'Default sortList: ' . get_class( $this ) . PHP_EOL;*/
+   }
+}
diff --git a/provider/xmla/metadata/XMLAMetadataReader.php b/provider/xmla/metadata/XMLAMetadataReader.php
index ebd878d..53bb58d 100644
--- a/provider/xmla/metadata/XMLAMetadataReader.php
+++ b/provider/xmla/metadata/XMLAMetadataReader.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -44,7 +44,7 @@ class XMLAMetadataReader implements IXMLAMetadataReader
    /**
     * Constructor
     */
-   public function __construct ( $cube )
+   public function __construct( $cube )
    {
       $this->cube = $cube;
    }
@@ -53,26 +53,27 @@ class XMLAMetadataReader implements IXMLAMetadataReader
     * Looks up a member by its unique name.
     *
     * @param string $memberUniqueName Unique name of member
+    *
     * @return XMLAMember, or null if not found
     * @throws OLAPException if error occurs
     */
-   public function lookupMemberByUniqueName ( $memberUniqueName )
+   public function lookupMemberByUniqueName( $memberUniqueName )
    {
-      $list = new NamedList ( );
-      $this->lookupMemberRelatives (
-         array ( XMLATreeOp::getEnum ( XMLATreeOp::SELF ) ),
+      $list = new NamedList ();
+      $this->lookupMemberRelatives(
+         array( XMLATreeOp::getEnum( XMLATreeOp::SELF ) ),
          $memberUniqueName,
          $list );
 
-      switch ( $list->size ( ) )
+      switch ( $list->size() )
       {
          case 0:
             return null;
          case 1:
-            return $list->get ( 0 );
+            return $list->get( 0 );
          default:
             throw new \InvalidArgumentException (
-               "more than one member with unique name '".$memberUniqueName."'" );
+               "more than one member with unique name '" . $memberUniqueName . "'");
       }
    }
 
@@ -82,23 +83,23 @@ class XMLAMetadataReader implements IXMLAMetadataReader
     *
     * @param array $memberUniqueNames List of unique names of member
     *
-    * @param array $memberMap Map to populate with members
+    * @param array $memberMap         Map to populate with members
     *
     * @throws OLAPException if error occurs
     */
-   public function lookupMembersByUniqueName ( array $memberUniqueNames, array& $memberMap )
+   public function lookupMembersByUniqueName( array $memberUniqueNames, array& $memberMap )
    {
       // Iterates through member names
       foreach ( $memberUniqueNames as $memberName )
       {
          // Only lookup if it is not in the map yet
-         if ( !isset ( $memberMap [ $memberName ] ) )
+         if ( !isset ($memberMap [$memberName]) )
          {
-            $member = $this->lookupMemberByUniqueName ( $memberName );
+            $member = $this->lookupMemberByUniqueName( $memberName );
             // Null members might mean calculated members
             if ( $member != null )
             {
-               $memberMap [ $member->getUniqueName ( ) ] = $member;
+               $memberMap [$member->getUniqueName()] = $member;
             }
          }
       }
@@ -108,38 +109,38 @@ class XMLAMetadataReader implements IXMLAMetadataReader
     * Looks a member by its unique name and returns members related by
     * the specified tree-operations.
     *
-    * @param array treeOps Collection of tree operations to travel relative to
-    * given member in order to create list of members
+    * @param array  treeOps Collection of tree operations to travel relative to
+    *               given member in order to create list of members
     *
     * @param string memberUniqueName Unique name of member
     *
-    * @param array IMember List to be populated with members related to the given
-    * member, or empty set if the member is not found
+    * @param array  IMember List to be populated with members related to the given
+    *               member, or empty set if the member is not found
     *
     * @throws OLAPException if error occurs
     */
-   public function lookupMemberRelatives ( array $treeOps, $memberUniqueName, NamedList $list )
+   public function lookupMemberRelatives( array $treeOps, $memberUniqueName, NamedList $list )
    {
-      $context = XMLAConnectionContext::createAtGranule ( $this->cube, null, null, null );
+      $context    = XMLAConnectionContext::createAtGranule( $this->cube, null, null, null );
       $treeOpMask = 0;
 
       foreach ( $treeOps as $treeOp )
       {
-         $treeOpMask |= $treeOp->xmlaOrdinal ( );
+         $treeOpMask |= $treeOp->xmlaOrdinal();
       }
 
-      $this->cube->getSchema()->getCatalog()->getMetaData()->getConnection ( )
-         ->populateList (
-            $list,
-            $context,
-            new XMLAMetadataRequest( XMLAMetadataRequest::MDSCHEMA_MEMBERS ),
-            new XMLAMemberHandler ( ),
-            array ( 'CATALOG_NAME' => $this->cube->getSchema()->getCatalog()->getName(),
-                    'SCHEMA_NAME' => $this->cube->getSchema()->getName(),
-                    'CUBE_NAME' => $this->cube->getName(),
-                    'MEMBER_UNIQUE_NAME' => $memberUniqueName,
-                    'TREE_OP' => $treeOpMask )
-            );
+      $this->cube->getSchema()->getCatalog()->getMetaData()->getConnection()
+         ->populateList(
+         $list,
+         $context,
+         new XMLAMetadataRequest(XMLAMetadataRequest::MDSCHEMA_MEMBERS),
+         new XMLAMemberHandler (),
+         array( 'CATALOG_NAME'       => $this->cube->getSchema()->getCatalog()->getName(),
+                'SCHEMA_NAME'        => $this->cube->getSchema()->getName(),
+                'CUBE_NAME'          => $this->cube->getName(),
+                'MEMBER_UNIQUE_NAME' => $memberUniqueName,
+                'TREE_OP'            => $treeOpMask )
+      );
    }
 
    /**
@@ -151,8 +152,8 @@ class XMLAMetadataReader implements IXMLAMetadataReader
     *
     * @return NamedList
     */
-   public function getLevelMembers ( XMLALevel $level )
+   public function getLevelMembers( XMLALevel $level )
    {
-      throw new \BadMethodCallException ( 'Not implemented yet' );
+      throw new \BadMethodCallException ('Not implemented yet');
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLANamedSetHandler.php b/provider/xmla/metadata/XMLANamedSetHandler.php
index 3fcc2fa..9d9a46d 100644
--- a/provider/xmla/metadata/XMLANamedSetHandler.php
+++ b/provider/xmla/metadata/XMLANamedSetHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -35,7 +35,7 @@ use OLAP4PHP\Common\NamedList;
 class XMLANamedSetHandler extends XMLAMetadataHandler
 {
 
-   public function handle ( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
+   public function handle( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
    {
       /*
       Example:
@@ -49,9 +49,9 @@ class XMLANamedSetHandler extends XMLAMetadataHandler
       </row>
 
        */
-      $setName = XMLAUtil::stringElement ( $row, 'SET_NAME' );
-      $list->add (
-          new XMLANamedSet (
-            $context->getCube ( $row ), $setName ) );
+      $setName = XMLAUtil::stringElement( $row, 'SET_NAME' );
+      $list->add(
+         new XMLANamedSet (
+            $context->getCube( $row ), $setName) );
    }
-}
\ No newline at end of file
+}
diff --git a/provider/xmla/metadata/XMLAPropertyHandler.php b/provider/xmla/metadata/XMLAPropertyHandler.php
index 0e15b2d..fba4bc3 100644
--- a/provider/xmla/metadata/XMLAPropertyHandler.php
+++ b/provider/xmla/metadata/XMLAPropertyHandler.php
@@ -1,13 +1,13 @@
 <?php
 /**
  * olap4php
- * 
+ *
  * LICENSE
- * 
- * Licensed to SeeWind Design Corp. under one or more 
+ *
+ * Licensed to SeeWind Design Corp. under one or more
  * contributor license agreements.  See the NOTICE file
  * distributed with this work for additional information
- * regarding copyright ownership.  SeeWind Design licenses 
+ * regarding copyright ownership.  SeeWind Design licenses
  * this file to you under the Apache License, Version 2.0 (the
  * "License"); you may not use this file except in compliance
  * with the License.  You may obtain a copy of the License at:
@@ -37,7 +37,7 @@ use OLAP4PHP\Metadata\PropertyContentType;
 class XMLAPropertyHandler extends XMLAMetadataHandler
 {
 
-   public function handle ( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
+   public function handle( DOMElement $row, XMLAConnectionContext $context, NamedList $list )
    {
       /*
       Example:
@@ -59,42 +59,42 @@ class XMLAPropertyHandler extends XMLAMetadataHandler
       </row>
        */
 
-      $description   = XMLAUtil::stringElement ( $row, 'DESCRIPTION' );
-      $uniqueName    = XMLAUtil::stringElement ( $row, 'DESCRIPTION' );
-      $caption       = XMLAUtil::stringElement ( $row, 'PROPERTY_CAPTION' );
-      $name          = XMLAUtil::stringElement ( $row, 'PROPERTY_NAME' );
-      $datatype      = null;
+      $description = XMLAUtil::stringElement( $row, 'DESCRIPTION' );
+      $uniqueName  = XMLAUtil::stringElement( $row, 'DESCRIPTION' );
+      $caption     = XMLAUtil::stringElement( $row, 'PROPERTY_CAPTION' );
+      $name        = XMLAUtil::stringElement( $row, 'PROPERTY_NAME' );
+      $datatype    = null;
 
       $ordinalDatatype =
-          DataType::getDictionary ( )->forName (
-              XMLAUtil::stringElement ( $row, 'DATA_TYPE' ) );
+         DataType::getDictionary()->forName(
+            XMLAUtil::stringElement( $row, 'DATA_TYPE' ) );
       if ( $ordinalDatatype == null )
       {
-         $datatype = DataType::getDictionary ( )->forOrdinal (
-            XMLAUtil::integerElement ( $row, 'DATA_TYPE' ) );
-      } 
+         $datatype = DataType::getDictionary()->forOrdinal(
+            XMLAUtil::integerElement( $row, 'DATA_TYPE' ) );
+      }
       else
       {
          $datatype = $ordinalDatatype;
       }
 
       $contentTypeOrdinal =
-          XMLAUtil::integerElement ( $row, 'PROPERTY_CONTENT_TYPE' );
+         XMLAUtil::integerElement( $row, 'PROPERTY_CONTENT_TYPE' );
 
       $contentType =
          $contentTypeOrdinal == null
             ? null
-            : PropertyContentType::getDictionary ( )
-                 ->forOrdinal ( $contentTypeOrdinal );
+            : PropertyContentType::getDictionary()
+            ->forOrdinal( $contentTypeOrdinal );
 
-      $propertyType 
-         = XMLAUtil::integerElement ( $row, 'PROPERTY_TYPE' );
+      $propertyType
+         = XMLAUtil::integerElement( $row, 'PROPERTY_TYPE' );
 
       $type =
-         PropertyType::getDictionary ( )->forMask ( $propertyType );
-      $list->add (
+         PropertyType::getDictionary()->forMask( $propertyType );
+      $list->add(
          new XMLAProperty (
             $uniqueName, $name, $caption, $description, $datatype, $type,
-            $contentType ) );
+            $contentType) );
    }
 }
